{
  "address": "0xdb2Fd6a9f5138246C6dfa1b8A1D5f366cc638B46",
  "abi": [
    {
      "inputs": [],
      "name": "IncompatibleLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReturnMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmountOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "changeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gaugeUser",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "liquidityGauges",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oneInch",
          "type": "address"
        }
      ],
      "name": "initializeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitType[]",
          "name": "paramsPermit",
          "type": "tuple[]"
        },
        {
          "internalType": "enum ActionType[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "mixer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vaultManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitVaultManagerType[]",
          "name": "paramsPermitVaultManager",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermitType[]",
          "name": "paramsPermit",
          "type": "tuple[]"
        },
        {
          "internalType": "enum ActionType[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "mixerVaultManagerPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneInch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "who",
          "type": "uint8"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x75e4a74bfe698e9a25bf9b43d448cd4ab65e0fe79638fd8c21dfbff3d04b76ec",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xdb2Fd6a9f5138246C6dfa1b8A1D5f366cc638B46",
    "transactionIndex": 4,
    "gasUsed": "3790511",
    "logsBloom": "0x
    "blockHash": "0x40a78843cd1dcfdc2fe19f77694a3a416dfd3f824501e8178b4889138d76353b",
    "transactionHash": "0x75e4a74bfe698e9a25bf9b43d448cd4ab65e0fe79638fd8c21dfbff3d04b76ec",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 23689079,
        "transactionHash": "0x75e4a74bfe698e9a25bf9b43d448cd4ab65e0fe79638fd8c21dfbff3d04b76ec",
        "address": "0xdb2Fd6a9f5138246C6dfa1b8A1D5f366cc638B46",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 38,
        "blockHash": "0x40a78843cd1dcfdc2fe19f77694a3a416dfd3f824501e8178b4889138d76353b"
      }
    ],
    "blockNumber": 23689079,
    "cumulativeGasUsed": "4960150",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d2039b63af7039fcdbc036f20229f89c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IncompatibleLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReturnMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gaugeUser\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityGauges\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInch\",\"type\":\"address\"}],\"name\":\"initializeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitType[]\",\"name\":\"paramsPermit\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ActionType[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"mixer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitVaultManagerType[]\",\"name\":\"paramsPermitVaultManager\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitType[]\",\"name\":\"paramsPermit\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ActionType[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"mixerVaultManagerPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"who\",\"type\":\"uint8\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"kind\":\"dev\",\"methods\":{\"changeAllowance(address[],address[],uint256[])\":{\"params\":{\"amounts\":\"Amounts to allow\",\"spenders\":\"Addresses to allow transfer\",\"tokens\":\"Addresses of the tokens to allow\"}},\"claimRewards(address,address[])\":{\"details\":\"If the caller wants to send the rewards to another account it first needs to call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\",\"params\":{\"gaugeUser\":\"Address for which to fetch the rewards from the gauges\",\"liquidityGauges\":\"Gauges to claim on\"}},\"mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])\":{\"details\":\"With this function, users can specify paths to swap tokens to the desired token of their choice. Yet the protocol does not verify the payload given and cannot check that the swap performed by users actually gives the desired out token: in this case funds may be made accessible to anyone on this contract if the concerned users do not perform a sweep action on these tokens\",\"params\":{\"actions\":\"List of actions to be performed by the router (in order of execution)\",\"data\":\"Array of encoded data for each of the actions performed in this mixer. This is where the bytes-encoded parameters for a given action are stored\",\"paramsPermit\":\"Array of params `PermitType` used to do a 1 tx to approve the router on each token (can be done once by setting high approved amounts) which supports the `permit` standard. Users willing to interact with the contract with tokens that do not support permit should approve the contract for these tokens prior to interacting with it\"}},\"mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])\":{\"details\":\"In `paramsPermitVaultManager`, the signatures for granting approvals must be given first before the signatures to revoke approvalsThe router contract has been built to be safe to keep approvals as you cannot take an action on a vault you are not approved for, but people wary about their approvals may want to grant it before immediately revoking it, although this is just an option\",\"params\":{\"paramsPermitVaultManager\":\"Parameters to sign permit to give allowance to the router for a `VaultManager` contract\"}}},\"title\":\"AngleRouterCelo\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeAllowance(address[],address[],uint256[])\":{\"notice\":\"Changes allowances for different tokens\"},\"claimRewards(address,address[])\":{\"notice\":\"Wrapper built on top of the `_claimRewards` function. It allows to claim rewards for multiple gauges at once\"},\"core()\":{\"notice\":\"Core address handling access control\"},\"initializeRouter(address,address,address)\":{\"notice\":\"Deploys the router contract on a chain\"},\"mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])\":{\"notice\":\"Allows composable calls to different functions within the protocol\"},\"mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])\":{\"notice\":\"Wrapper built on top of the base `mixer` function to grant approval to a `VaultManager` contract before performing actions and then revoking this approval after these actions\"},\"oneInch()\":{\"notice\":\"Address of 1Inch router used for swaps\"},\"setCore(address)\":{\"notice\":\"Sets a new `core` contract\"},\"setRouter(address,uint8)\":{\"notice\":\"Sets a new router variable\"},\"uniswapV3Router()\":{\"notice\":\"Address of the router used for swaps\"}},\"notice\":\"Router contract built specifially for Angle use cases on Celo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/celo/AngleRouterCelo.sol\":\"AngleRouterCelo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x9750c6fec736eb3320e85924f36a3060fa4a4ab1758d06d9585e175d164eefdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/BaseAngleRouterSidechain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./interfaces/IAgTokenMultiChain.sol\\\";\\nimport \\\"./BaseRouter.sol\\\";\\n\\n/// @title BaseAngleRouterSidechain\\n/// @author Angle Core Team\\n/// @notice Extension of the `BaseRouter` contract for sidechains\\nabstract contract BaseAngleRouterSidechain is BaseRouter {\\n    // =========================== ROUTER FUNCTIONALITIES ==========================\\n\\n    /// @notice Wrapper built on top of the `_claimRewards` function. It allows to claim rewards for multiple\\n    /// gauges at once\\n    /// @param gaugeUser Address for which to fetch the rewards from the gauges\\n    /// @param liquidityGauges Gauges to claim on\\n    /// @dev If the caller wants to send the rewards to another account it first needs to\\n    /// call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\\n    function claimRewards(address gaugeUser, address[] calldata liquidityGauges) external {\\n        _claimRewards(gaugeUser, liquidityGauges);\\n    }\\n\\n    /// @inheritdoc BaseRouter\\n    function _chainSpecificAction(ActionType action, bytes calldata data) internal override {\\n        if (action == ActionType.swapIn) {\\n            (address canonicalToken, address bridgeToken, uint256 amount, uint256 minAmountOut, address to) = abi\\n                .decode(data, (address, address, uint256, uint256, address));\\n            _swapIn(canonicalToken, bridgeToken, amount, minAmountOut, to);\\n        } else if (action == ActionType.swapOut) {\\n            (address canonicalToken, address bridgeToken, uint256 amount, uint256 minAmountOut, address to) = abi\\n                .decode(data, (address, address, uint256, uint256, address));\\n            _swapOut(canonicalToken, bridgeToken, amount, minAmountOut, to);\\n        }\\n    }\\n\\n    /// @notice Wraps a bridge token to its corresponding canonical version\\n    function _swapIn(\\n        address canonicalToken,\\n        address bridgeToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to\\n    ) internal returns (uint256) {\\n        amount = IAgTokenMultiChain(canonicalToken).swapIn(bridgeToken, amount, to);\\n        _slippageCheck(amount, minAmountOut);\\n        return amount;\\n    }\\n\\n    /// @notice Unwraps a canonical token for one of its bridge version\\n    function _swapOut(\\n        address canonicalToken,\\n        address bridgeToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to\\n    ) internal returns (uint256) {\\n        amount = IAgTokenMultiChain(canonicalToken).swapOut(bridgeToken, amount, to);\\n        _slippageCheck(amount, minAmountOut);\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe3503193ad3da691e6308881cf8e87dbe1f1714b5474c8b66aadf8764c2c5116\",\"license\":\"GPL-3.0\"},\"contracts/BaseRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\nimport \\\"./interfaces/external/uniswap/IUniswapRouter.sol\\\";\\nimport \\\"./interfaces/external/IWETH9.sol\\\";\\nimport \\\"./interfaces/ICoreBorrow.sol\\\";\\nimport \\\"./interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./interfaces/IVaultManager.sol\\\";\\n\\n// ============================== STRUCTS AND ENUM =============================\\n\\n/// @notice Action types\\nenum ActionType {\\n    transfer,\\n    wrapNative,\\n    unwrapNative,\\n    sweep,\\n    sweepNative,\\n    uniswapV3,\\n    oneInch,\\n    claimRewards,\\n    gaugeDeposit,\\n    borrower,\\n    swapper,\\n    mint4626,\\n    deposit4626,\\n    redeem4626,\\n    withdraw4626,\\n    // Deprecated\\n    prepareRedeemSavingsRate,\\n    // Deprecated\\n    claimRedeemSavingsRate,\\n    swapIn,\\n    swapOut,\\n    claimWeeklyInterest,\\n    withdraw,\\n    // Deprecated\\n    mint,\\n    deposit,\\n    // Deprecated\\n    openPerpetual,\\n    // Deprecated\\n    addToPerpetual,\\n    veANGLEDeposit,\\n    claimRewardsWithPerps\\n}\\n\\n/// @notice Data needed to get permits\\nstruct PermitType {\\n    address token;\\n    address owner;\\n    uint256 value;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n/// @notice Data to grant permit to the router for a vault\\nstruct PermitVaultManagerType {\\n    address vaultManager;\\n    address owner;\\n    bool approved;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n/// @title BaseRouter\\n/// @author Angle Core Team\\n/// @notice Base contract that Angle router contracts on different chains should override\\n/// @dev Router contracts are designed to facilitate the composition of actions on the different modules of the protocol\\nabstract contract BaseRouter is Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    // ================================= REFERENCES ================================\\n\\n    /// @notice Core address handling access control\\n    ICoreBorrow public core;\\n    /// @notice Address of the router used for swaps\\n    IUniswapV3Router public uniswapV3Router;\\n    /// @notice Address of 1Inch router used for swaps\\n    address public oneInch;\\n\\n    uint256[47] private __gap;\\n\\n    // ============================== EVENTS / ERRORS ==============================\\n\\n    error IncompatibleLengths();\\n    error InvalidReturnMessage();\\n    error NotApprovedOrOwner();\\n    error NotGovernor();\\n    error NotGovernorOrGuardian();\\n    error TooSmallAmountOut();\\n    error TransferFailed();\\n    error ZeroAddress();\\n\\n    /// @notice Deploys the router contract on a chain\\n    function initializeRouter(address _core, address _uniswapRouter, address _oneInch) public initializer {\\n        if (_core == address(0)) revert ZeroAddress();\\n        core = ICoreBorrow(_core);\\n        uniswapV3Router = IUniswapV3Router(_uniswapRouter);\\n        oneInch = _oneInch;\\n    }\\n\\n    constructor() initializer {}\\n\\n    // =========================== ROUTER FUNCTIONALITIES ==========================\\n\\n    /// @notice Allows composable calls to different functions within the protocol\\n    /// @param paramsPermit Array of params `PermitType` used to do a 1 tx to approve the router on each token (can be done once by\\n    /// setting high approved amounts) which supports the `permit` standard. Users willing to interact with the contract\\n    /// with tokens that do not support permit should approve the contract for these tokens prior to interacting with it\\n    /// @param actions List of actions to be performed by the router (in order of execution)\\n    /// @param data Array of encoded data for each of the actions performed in this mixer. This is where the bytes-encoded parameters\\n    /// for a given action are stored\\n    /// @dev With this function, users can specify paths to swap tokens to the desired token of their choice. Yet the protocol\\n    /// does not verify the payload given and cannot check that the swap performed by users actually gives the desired\\n    /// out token: in this case funds may be made accessible to anyone on this contract if the concerned users\\n    /// do not perform a sweep action on these tokens\\n    function mixer(\\n        PermitType[] memory paramsPermit,\\n        ActionType[] calldata actions,\\n        bytes[] calldata data\\n    ) public payable virtual {\\n        // If all tokens have already been approved, there's no need for this step\\n        uint256 permitsLength = paramsPermit.length;\\n        for (uint256 i; i < permitsLength; ++i) {\\n            IERC20Permit(paramsPermit[i].token).permit(\\n                paramsPermit[i].owner,\\n                address(this),\\n                paramsPermit[i].value,\\n                paramsPermit[i].deadline,\\n                paramsPermit[i].v,\\n                paramsPermit[i].r,\\n                paramsPermit[i].s\\n            );\\n        }\\n        // Performing actions one after the others\\n        uint256 actionsLength = actions.length;\\n        for (uint256 i; i < actionsLength; ++i) {\\n            if (actions[i] == ActionType.transfer) {\\n                (address inToken, address receiver, uint256 amount) = abi.decode(data[i], (address, address, uint256));\\n                if (amount == type(uint256).max) amount = IERC20(inToken).balanceOf(msg.sender);\\n                IERC20(inToken).safeTransferFrom(msg.sender, receiver, amount);\\n            } else if (actions[i] == ActionType.wrapNative) {\\n                _wrapNative();\\n            } else if (actions[i] == ActionType.unwrapNative) {\\n                (uint256 minAmountOut, address to) = abi.decode(data[i], (uint256, address));\\n                _unwrapNative(minAmountOut, to);\\n            } else if (actions[i] == ActionType.sweep) {\\n                (address tokenOut, uint256 minAmountOut, address to) = abi.decode(data[i], (address, uint256, address));\\n                _sweep(tokenOut, minAmountOut, to);\\n            } else if (actions[i] == ActionType.sweepNative) {\\n                uint256 routerBalance = address(this).balance;\\n                if (routerBalance != 0) _safeTransferNative(msg.sender, routerBalance);\\n            } else if (actions[i] == ActionType.uniswapV3) {\\n                (address inToken, uint256 amount, uint256 minAmountOut, bytes memory path) = abi.decode(\\n                    data[i],\\n                    (address, uint256, uint256, bytes)\\n                );\\n                _swapOnUniswapV3(IERC20(inToken), amount, minAmountOut, path);\\n            } else if (actions[i] == ActionType.oneInch) {\\n                (address inToken, uint256 minAmountOut, bytes memory payload) = abi.decode(\\n                    data[i],\\n                    (address, uint256, bytes)\\n                );\\n                _swapOn1Inch(IERC20(inToken), minAmountOut, payload);\\n            } else if (actions[i] == ActionType.claimRewards) {\\n                (address user, address[] memory claimLiquidityGauges) = abi.decode(data[i], (address, address[]));\\n                _claimRewards(user, claimLiquidityGauges);\\n            } else if (actions[i] == ActionType.gaugeDeposit) {\\n                (address user, uint256 amount, address gauge, bool shouldClaimRewards) = abi.decode(\\n                    data[i],\\n                    (address, uint256, address, bool)\\n                );\\n                _gaugeDeposit(user, amount, ILiquidityGauge(gauge), shouldClaimRewards);\\n            } else if (actions[i] == ActionType.borrower) {\\n                (\\n                    address collateral,\\n                    address vaultManager,\\n                    address to,\\n                    address who,\\n                    ActionBorrowType[] memory actionsBorrow,\\n                    bytes[] memory dataBorrow,\\n                    bytes memory repayData\\n                ) = abi.decode(data[i], (address, address, address, address, ActionBorrowType[], bytes[], bytes));\\n                dataBorrow = _parseVaultIDs(actionsBorrow, dataBorrow, vaultManager, collateral);\\n                _changeAllowance(IERC20(collateral), address(vaultManager), type(uint256).max);\\n                _angleBorrower(vaultManager, actionsBorrow, dataBorrow, to, who, repayData);\\n            } else if (actions[i] == ActionType.swapper) {\\n                (\\n                    ISwapper swapperContract,\\n                    IERC20 inToken,\\n                    IERC20 outToken,\\n                    address outTokenRecipient,\\n                    uint256 outTokenOwed,\\n                    uint256 inTokenObtained,\\n                    bytes memory payload\\n                ) = abi.decode(data[i], (ISwapper, IERC20, IERC20, address, uint256, uint256, bytes));\\n                _swapper(swapperContract, inToken, outToken, outTokenRecipient, outTokenOwed, inTokenObtained, payload);\\n            } else if (actions[i] == ActionType.mint4626) {\\n                (IERC20 token, IERC4626 savingsRate, uint256 shares, address to, uint256 maxAmountIn) = abi.decode(\\n                    data[i],\\n                    (IERC20, IERC4626, uint256, address, uint256)\\n                );\\n                _changeAllowance(token, address(savingsRate), type(uint256).max);\\n                _mint4626(savingsRate, shares, to, maxAmountIn);\\n            } else if (actions[i] == ActionType.deposit4626) {\\n                (IERC20 token, IERC4626 savingsRate, uint256 amount, address to, uint256 minSharesOut) = abi.decode(\\n                    data[i],\\n                    (IERC20, IERC4626, uint256, address, uint256)\\n                );\\n                _changeAllowance(token, address(savingsRate), type(uint256).max);\\n                _deposit4626(savingsRate, amount, to, minSharesOut);\\n            } else if (actions[i] == ActionType.redeem4626) {\\n                (IERC4626 savingsRate, uint256 shares, address to, uint256 minAmountOut) = abi.decode(\\n                    data[i],\\n                    (IERC4626, uint256, address, uint256)\\n                );\\n                _redeem4626(savingsRate, shares, to, minAmountOut);\\n            } else if (actions[i] == ActionType.withdraw4626) {\\n                (IERC4626 savingsRate, uint256 amount, address to, uint256 maxSharesOut) = abi.decode(\\n                    data[i],\\n                    (IERC4626, uint256, address, uint256)\\n                );\\n                _withdraw4626(savingsRate, amount, to, maxSharesOut);\\n            } else {\\n                _chainSpecificAction(actions[i], data[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Wrapper built on top of the base `mixer` function to grant approval to a `VaultManager` contract before performing\\n    /// actions and then revoking this approval after these actions\\n    /// @param paramsPermitVaultManager Parameters to sign permit to give allowance to the router for a `VaultManager` contract\\n    /// @dev In `paramsPermitVaultManager`, the signatures for granting approvals must be given first before the signatures\\n    /// to revoke approvals\\n    /// @dev The router contract has been built to be safe to keep approvals as you cannot take an action on a vault you are not\\n    /// approved for, but people wary about their approvals may want to grant it before immediately revoking it, although this\\n    /// is just an option\\n    function mixerVaultManagerPermit(\\n        PermitVaultManagerType[] memory paramsPermitVaultManager,\\n        PermitType[] memory paramsPermit,\\n        ActionType[] calldata actions,\\n        bytes[] calldata data\\n    ) external payable virtual {\\n        uint256 permitVaultManagerLength = paramsPermitVaultManager.length;\\n        for (uint256 i; i < permitVaultManagerLength; ++i) {\\n            if (paramsPermitVaultManager[i].approved) {\\n                IVaultManagerFunctions(paramsPermitVaultManager[i].vaultManager).permit(\\n                    paramsPermitVaultManager[i].owner,\\n                    address(this),\\n                    true,\\n                    paramsPermitVaultManager[i].deadline,\\n                    paramsPermitVaultManager[i].v,\\n                    paramsPermitVaultManager[i].r,\\n                    paramsPermitVaultManager[i].s\\n                );\\n            } else break;\\n        }\\n        mixer(paramsPermit, actions, data);\\n        // Storing the index at which starting the iteration for revoking approvals in a variable would make the stack\\n        // too deep\\n        for (uint256 i; i < permitVaultManagerLength; ++i) {\\n            if (!paramsPermitVaultManager[i].approved) {\\n                IVaultManagerFunctions(paramsPermitVaultManager[i].vaultManager).permit(\\n                    paramsPermitVaultManager[i].owner,\\n                    address(this),\\n                    false,\\n                    paramsPermitVaultManager[i].deadline,\\n                    paramsPermitVaultManager[i].v,\\n                    paramsPermitVaultManager[i].r,\\n                    paramsPermitVaultManager[i].s\\n                );\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    // ===================== INTERNAL ACTION-RELATED FUNCTIONS =====================\\n\\n    /// @notice Wraps the native token of a chain to its wrapped version\\n    /// @dev It can be used for ETH to wETH or MATIC to wMATIC\\n    /// @dev The amount to wrap is to be specified in the `msg.value`\\n    function _wrapNative() internal virtual returns (uint256) {\\n        _getNativeWrapper().deposit{ value: msg.value }();\\n        return msg.value;\\n    }\\n\\n    /// @notice Unwraps the wrapped version of a token to the native chain token\\n    /// @dev It can be used for wETH to ETH or wMATIC to MATIC\\n    function _unwrapNative(uint256 minAmountOut, address to) internal virtual returns (uint256 amount) {\\n        amount = _getNativeWrapper().balanceOf(address(this));\\n        _slippageCheck(amount, minAmountOut);\\n        if (amount != 0) {\\n            _getNativeWrapper().withdraw(amount);\\n            _safeTransferNative(to, amount);\\n        }\\n        return amount;\\n    }\\n\\n    /// @notice Internal version of the `claimRewards` function\\n    /// @dev If the caller wants to send the rewards to another account than `gaugeUser`, it first needs to\\n    /// call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\\n    function _claimRewards(address gaugeUser, address[] memory liquidityGauges) internal virtual {\\n        uint256 gaugesLength = liquidityGauges.length;\\n        for (uint256 i; i < gaugesLength; ++i) {\\n            ILiquidityGauge(liquidityGauges[i]).claim_rewards(gaugeUser);\\n        }\\n    }\\n\\n    /// @notice Allows to compose actions on a `VaultManager` (Angle Protocol Borrowing module)\\n    /// @param vaultManager Address of the vault to perform actions on\\n    /// @param actionsBorrow Actions type to perform on the vaultManager\\n    /// @param dataBorrow Data needed for each actions\\n    /// @param to Address to send the funds to\\n    /// @param who Swapper address to handle repayments\\n    /// @param repayData Bytes to use at the discretion of the `msg.sender`\\n    function _angleBorrower(\\n        address vaultManager,\\n        ActionBorrowType[] memory actionsBorrow,\\n        bytes[] memory dataBorrow,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) internal virtual returns (PaymentData memory paymentData) {\\n        return IVaultManagerFunctions(vaultManager).angle(actionsBorrow, dataBorrow, msg.sender, to, who, repayData);\\n    }\\n\\n    /// @notice Allows to deposit tokens into a gauge\\n    /// @param user Address on behalf of which deposits should be made in the gauge\\n    /// @param amount Amount to stake\\n    /// @param gauge Liquidity gauge to stake in\\n    /// @param shouldClaimRewards Whether to claim or not previously accumulated rewards\\n    /// @dev You should be cautious on who will receive the rewards (if `shouldClaimRewards` is true)\\n    /// @dev The function will revert if the gauge has not already been approved by the contract\\n    function _gaugeDeposit(\\n        address user,\\n        uint256 amount,\\n        ILiquidityGauge gauge,\\n        bool shouldClaimRewards\\n    ) internal virtual {\\n        gauge.deposit(amount, user, shouldClaimRewards);\\n    }\\n\\n    /// @notice Sweeps tokens from the router contract\\n    /// @param tokenOut Token to sweep\\n    /// @param minAmountOut Minimum amount of tokens to recover\\n    /// @param to Address to which tokens should be sent\\n    function _sweep(address tokenOut, uint256 minAmountOut, address to) internal virtual {\\n        uint256 balanceToken = IERC20(tokenOut).balanceOf(address(this));\\n        _slippageCheck(balanceToken, minAmountOut);\\n        if (balanceToken != 0) {\\n            IERC20(tokenOut).safeTransfer(to, balanceToken);\\n        }\\n    }\\n\\n    /// @notice Uses an external swapper\\n    /// @param swapper Contracts implementing the logic of the swap\\n    /// @param inToken Token used to do the swap\\n    /// @param outToken Token wanted\\n    /// @param outTokenRecipient Address who should have at the end of the swap at least `outTokenOwed`\\n    /// @param outTokenOwed Minimal amount for the `outTokenRecipient`\\n    /// @param inTokenObtained Amount of `inToken` used for the swap\\n    /// @param data Additional info for the specific swapper\\n    function _swapper(\\n        ISwapper swapper,\\n        IERC20 inToken,\\n        IERC20 outToken,\\n        address outTokenRecipient,\\n        uint256 outTokenOwed,\\n        uint256 inTokenObtained,\\n        bytes memory data\\n    ) internal {\\n        swapper.swap(inToken, outToken, outTokenRecipient, outTokenOwed, inTokenObtained, data);\\n    }\\n\\n    /// @notice Allows to swap between tokens via UniswapV3 (if there is a path)\\n    /// @param inToken Token used as entrance of the swap\\n    /// @param amount Amount of in token to swap\\n    /// @param minAmountOut Minimum amount of outToken accepted for the swap to happen\\n    /// @param path Bytes representing the path to swap your input token to the accepted collateral\\n    function _swapOnUniswapV3(\\n        IERC20 inToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        bytes memory path\\n    ) internal returns (uint256 amountOut) {\\n        // Approve transfer to the `uniswapV3Router`\\n        // Since this router is supposed to be a trusted contract, we can leave the allowance to the token\\n        address uniRouter = address(uniswapV3Router);\\n        _changeAllowance(IERC20(inToken), uniRouter, type(uint256).max);\\n        amountOut = IUniswapV3Router(uniRouter).exactInput(\\n            ExactInputParams(path, address(this), block.timestamp, amount, minAmountOut)\\n        );\\n    }\\n\\n    /// @notice Swaps an inToken to another token via 1Inch Router\\n    /// @param payload Bytes needed for 1Inch router to process the swap\\n    /// @dev The `payload` given is expected to be obtained from 1Inch API\\n    function _swapOn1Inch(\\n        IERC20 inToken,\\n        uint256 minAmountOut,\\n        bytes memory payload\\n    ) internal returns (uint256 amountOut) {\\n        // Approve transfer to the `oneInch` address\\n        // Since this router is supposed to be a trusted contract, we can leave the allowance to the token\\n        address oneInchRouter = oneInch;\\n        _changeAllowance(IERC20(inToken), oneInchRouter, type(uint256).max);\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = oneInchRouter.call(payload);\\n        if (!success) _revertBytes(result);\\n\\n        amountOut = abi.decode(result, (uint256));\\n        _slippageCheck(amountOut, minAmountOut);\\n    }\\n\\n    /// @notice Mints `shares` from an ERC4626 contract\\n    /// @param savingsRate ERC4626 to mint shares from\\n    /// @param shares Amount of shares to mint from the contract\\n    /// @param to Address to which shares should be sent\\n    /// @param maxAmountIn Max amount of assets used to mint\\n    /// @return amountIn Amount of assets used to mint by `to`\\n    function _mint4626(\\n        IERC4626 savingsRate,\\n        uint256 shares,\\n        address to,\\n        uint256 maxAmountIn\\n    ) internal returns (uint256 amountIn) {\\n        _slippageCheck(maxAmountIn, (amountIn = savingsRate.mint(shares, to)));\\n    }\\n\\n    /// @notice Deposits `amount` to an ERC4626 contract\\n    /// @param savingsRate The ERC4626 to deposit assets to\\n    /// @param amount Amount of assets to deposit\\n    /// @param to Address to which shares should be sent\\n    /// @param minSharesOut Minimum amount of shares that `to` should received\\n    /// @return sharesOut Amount of shares received by `to`\\n    function _deposit4626(\\n        IERC4626 savingsRate,\\n        uint256 amount,\\n        address to,\\n        uint256 minSharesOut\\n    ) internal returns (uint256 sharesOut) {\\n        _slippageCheck(sharesOut = savingsRate.deposit(amount, to), minSharesOut);\\n    }\\n\\n    /// @notice Withdraws `amount` from an ERC4626 contract\\n    /// @param savingsRate ERC4626 to withdraw assets from\\n    /// @param amount Amount of assets to withdraw\\n    /// @param to Destination of assets\\n    /// @param maxSharesOut Maximum amount of shares that should be burnt in the operation\\n    /// @return sharesOut Amount of shares burnt\\n    function _withdraw4626(\\n        IERC4626 savingsRate,\\n        uint256 amount,\\n        address to,\\n        uint256 maxSharesOut\\n    ) internal returns (uint256 sharesOut) {\\n        _slippageCheck(maxSharesOut, sharesOut = savingsRate.withdraw(amount, to, msg.sender));\\n    }\\n\\n    /// @notice Redeems `shares` from an ERC4626 contract\\n    /// @param savingsRate ERC4626 to redeem shares from\\n    /// @param shares Amount of shares to redeem\\n    /// @param to Destination of assets\\n    /// @param minAmountOut Minimum amount of assets that `to` should receive in the redemption process\\n    /// @return amountOut Amount of assets received by `to`\\n    function _redeem4626(\\n        IERC4626 savingsRate,\\n        uint256 shares,\\n        address to,\\n        uint256 minAmountOut\\n    ) internal returns (uint256 amountOut) {\\n        _slippageCheck(amountOut = savingsRate.redeem(shares, to, msg.sender), minAmountOut);\\n    }\\n\\n    /// @notice Allows to perform some specific actions for a chain\\n    function _chainSpecificAction(ActionType action, bytes calldata data) internal virtual {}\\n\\n    // ======================= VIRTUAL FUNCTIONS TO OVERRIDE =======================\\n\\n    /// @notice Gets the official wrapper of the native token on a chain (like wETH on Ethereum)\\n    function _getNativeWrapper() internal pure virtual returns (IWETH9);\\n\\n    // ============================ GOVERNANCE FUNCTION ============================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!core.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    /// @notice Sets a new `core` contract\\n    function setCore(ICoreBorrow _core) external {\\n        if (!core.isGovernor(msg.sender) || !_core.isGovernor(msg.sender)) revert NotGovernor();\\n        core = ICoreBorrow(_core);\\n    }\\n\\n    /// @notice Changes allowances for different tokens\\n    /// @param tokens Addresses of the tokens to allow\\n    /// @param spenders Addresses to allow transfer\\n    /// @param amounts Amounts to allow\\n    function changeAllowance(\\n        IERC20[] calldata tokens,\\n        address[] calldata spenders,\\n        uint256[] calldata amounts\\n    ) external onlyGovernorOrGuardian {\\n        uint256 tokensLength = tokens.length;\\n        if (tokensLength != spenders.length || tokensLength != amounts.length) revert IncompatibleLengths();\\n        for (uint256 i; i < tokensLength; ++i) {\\n            _changeAllowance(tokens[i], spenders[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Sets a new router variable\\n    function setRouter(address router, uint8 who) external onlyGovernorOrGuardian {\\n        if (router == address(0)) revert ZeroAddress();\\n        if (who == 0) uniswapV3Router = IUniswapV3Router(router);\\n        else oneInch = router;\\n    }\\n\\n    // ========================= INTERNAL UTILITY FUNCTIONS ========================\\n\\n    /// @notice Changes allowance of this contract for a given token\\n    /// @param token Address of the token to change allowance\\n    /// @param spender Address to change the allowance of\\n    /// @param amount Amount allowed\\n    function _changeAllowance(IERC20 token, address spender, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        // In case `currentAllowance < type(uint256).max / 2` and we want to increase it:\\n        // Do nothing (to handle tokens that need reapprovals to 0 and save gas)\\n        if (currentAllowance < amount && currentAllowance < type(uint256).max / 2) {\\n            token.safeIncreaseAllowance(spender, amount - currentAllowance);\\n        } else if (currentAllowance > amount) {\\n            token.safeDecreaseAllowance(spender, currentAllowance - amount);\\n        }\\n    }\\n\\n    /// @notice Transfer amount of the native token to the `to` address\\n    /// @dev Forked from Solmate: https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol\\n    function _safeTransferNative(address to, uint256 amount) internal {\\n        bool success;\\n        //solhint-disable-next-line\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    /// @notice Parses the actions submitted to the router contract to interact with a `VaultManager` and makes sure that\\n    /// the calling address is well approved for all the vaults with which it is interacting\\n    /// @dev If such check was not made, we could end up in a situation where an address has given an approval for all its\\n    /// vaults to the router contract, and another address takes advantage of this to instruct actions on these other vaults\\n    /// to the router: it is hence super important for the router to pay attention to the fact that the addresses interacting\\n    /// with a vault are approved for this vault\\n    function _parseVaultIDs(\\n        ActionBorrowType[] memory actionsBorrow,\\n        bytes[] memory dataBorrow,\\n        address vaultManager,\\n        address collateral\\n    ) internal view returns (bytes[] memory) {\\n        uint256 actionsBorrowLength = actionsBorrow.length;\\n        uint256[] memory vaultIDsToCheckOwnershipOf = new uint256[](actionsBorrowLength);\\n        bool createVaultAction;\\n        uint256 lastVaultID;\\n        uint256 vaultIDLength;\\n        for (uint256 i; i < actionsBorrowLength; ++i) {\\n            uint256 vaultID;\\n            // If there is a `createVault` action, the router should not worry about looking at\\n            // next vaultIDs given equal to 0\\n            if (actionsBorrow[i] == ActionBorrowType.createVault) {\\n                createVaultAction = true;\\n                continue;\\n                // If the action is a `addCollateral` action, we should check whether a max amount was given to end up adding\\n                // as collateral the full contract balance\\n            } else if (actionsBorrow[i] == ActionBorrowType.addCollateral) {\\n                uint256 amount;\\n                (vaultID, amount) = abi.decode(dataBorrow[i], (uint256, uint256));\\n                if (amount == type(uint256).max)\\n                    dataBorrow[i] = abi.encode(vaultID, IERC20(collateral).balanceOf(address(this)));\\n                continue;\\n                // There are different ways depending on the action to find the `vaultID` to parse\\n            } else if (\\n                actionsBorrow[i] == ActionBorrowType.removeCollateral || actionsBorrow[i] == ActionBorrowType.borrow\\n            ) {\\n                (vaultID, ) = abi.decode(dataBorrow[i], (uint256, uint256));\\n            } else if (actionsBorrow[i] == ActionBorrowType.closeVault) {\\n                vaultID = abi.decode(dataBorrow[i], (uint256));\\n            } else if (actionsBorrow[i] == ActionBorrowType.getDebtIn) {\\n                (vaultID, , , ) = abi.decode(dataBorrow[i], (uint256, address, uint256, uint256));\\n            } else continue;\\n            // If we need to add a null `vaultID`, we look at the `vaultIDCount` in the `VaultManager`\\n            // if there has not been any specific action\\n            if (vaultID == 0) {\\n                if (createVaultAction) {\\n                    continue;\\n                } else {\\n                    // If we haven't stored the last `vaultID`, we need to fetch it\\n                    if (lastVaultID == 0) {\\n                        lastVaultID = IVaultManagerStorage(vaultManager).vaultIDCount();\\n                    }\\n                    vaultID = lastVaultID;\\n                }\\n            }\\n\\n            // Check if this `vaultID` has already been verified\\n            for (uint256 j; j < vaultIDLength; ++j) {\\n                if (vaultIDsToCheckOwnershipOf[j] == vaultID) {\\n                    // If yes, we continue to the next iteration\\n                    continue;\\n                }\\n            }\\n            // Verify this new `vaultID` and add it to the list\\n            if (!IVaultManagerFunctions(vaultManager).isApprovedOrOwner(msg.sender, vaultID)) {\\n                revert NotApprovedOrOwner();\\n            }\\n            vaultIDsToCheckOwnershipOf[vaultIDLength] = vaultID;\\n            vaultIDLength += 1;\\n        }\\n        return dataBorrow;\\n    }\\n\\n    /// @notice Checks whether the amount obtained during a swap is not too small\\n    function _slippageCheck(uint256 amount, uint256 thresholdAmount) internal pure {\\n        if (amount < thresholdAmount) revert TooSmallAmountOut();\\n    }\\n\\n    /// @notice Internal function used for error handling\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length != 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert InvalidReturnMessage();\\n    }\\n}\\n\",\"keccak256\":\"0xd0cab24d7769f5bdb284b0c137883f09dc8b49c14c806261d6184c225ce31f37\",\"license\":\"GPL-3.0\"},\"contracts/implementations/celo/AngleRouterCelo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../BaseAngleRouterSidechain.sol\\\";\\n\\n/// @title AngleRouterCelo\\n/// @author Angle Core Team\\n/// @notice Router contract built specifially for Angle use cases on Celo\\ncontract AngleRouterCelo is BaseAngleRouterSidechain {\\n    /// @inheritdoc BaseRouter\\n    /// @dev There is no wCELO contract on CELO\\n    function _getNativeWrapper() internal pure override returns (IWETH9) {\\n        return IWETH9(0x0000000000000000000000000000000000000000);\\n    }\\n}\\n\",\"keccak256\":\"0x40958e7eea1b2ca3aeb79cc158f0e457368f6e8cdb12e296f4651f3b586af1d3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAgTokenMultiChain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\n/// @title IAgTokenMultiChain\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts in multiple chains\\ninterface IAgTokenMultiChain {\\n    function swapIn(\\n        address bridgeToken,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function swapOut(\\n        address bridgeToken,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x535074b018a207b7a518dd6f5b2c7d127e27410dab239a0326177d663fa21e91\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n\\ninterface ICoreBorrow {\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2414539c445977b04bc7e9adac2e5147364994dd74e5d7118b44824956de602c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface ILiquidityGauge {\\n    // solhint-disable-next-line\\n    function staking_token() external returns (address stakingToken);\\n\\n    // solhint-disable-next-line\\n    function deposit_reward_token(address _rewardToken, uint256 _amount) external;\\n\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        // solhint-disable-next-line\\n        bool _claim_rewards\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function claim_rewards(address _addr) external;\\n\\n    // solhint-disable-next-line\\n    function claim_rewards(address _addr, address _receiver) external;\\n}\\n\",\"keccak256\":\"0x27144c21760603a4e441bb5eecf975ad7f71331ac0ba0a83352b280ccf734756\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @title ISwapper\\n/// @author Angle Core Team\\n/// @notice Interface for a generic swapper, that supports swaps of higher complexity than aggregators\\ninterface ISwapper {\\n    function swap(\\n        IERC20 inToken,\\n        IERC20 outToken,\\n        address outTokenRecipient,\\n        uint256 outTokenOwed,\\n        uint256 inTokenObtained,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x506f50d8447c2dc662bd844779cc66a407af07a91210612b956ef47abcc15776\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x36bd50a0ab1c46503bb64b8d5777bf3b4fd2da0e2dcfe68c8a9702eb132eb3e2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\n\\n// ========================= Key Structs and Enums =============================\\n\\n/// @notice Data to track during a series of action the amount to give or receive in stablecoins and collateral\\n/// to the caller or associated addresses\\nstruct PaymentData {\\n    // Stablecoin amount the contract should give\\n    uint256 stablecoinAmountToGive;\\n    // Stablecoin amount owed to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Collateral amount the contract should give\\n    uint256 collateralAmountToGive;\\n    // Collateral amount owed to the contract\\n    uint256 collateralAmountToReceive;\\n}\\n\\n/// @notice Data stored to track someone's loan (or equivalently called position)\\nstruct Vault {\\n    // Amount of collateral deposited in the vault\\n    uint256 collateralAmount;\\n    // Normalized value of the debt (that is to say of the stablecoins borrowed)\\n    uint256 normalizedDebt;\\n}\\n\\n/// @notice Actions possible when composing calls to the different entry functions proposed\\nenum ActionBorrowType {\\n    createVault,\\n    closeVault,\\n    addCollateral,\\n    removeCollateral,\\n    repayDebt,\\n    borrow,\\n    getDebtIn,\\n    permit\\n}\\n\\n// ========================= Interfaces =============================\\n\\n/// @title IVaultManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module (without getters)\\ninterface IVaultManagerFunctions {\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionBorrowType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @param who Address of the contract to handle in case of repayment of stablecoins from received collateral\\n    /// @param repayData Data to pass to the repayment contract in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionBorrowType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Checks whether a given address is approved for a vault or owns this vault\\n    /// @param spender Address for which vault ownership should be checked\\n    /// @param vaultID ID of the vault to check\\n    /// @return Whether the `spender` address owns or is approved for `vaultID`\\n    function isApprovedOrOwner(address spender, uint256 vaultID) external view returns (bool);\\n\\n    /// @notice Allows an address to give or revoke approval for all its vaults to another address\\n    /// @param owner Address signing the permit and giving (or revoking) its approval for all the controlled vaults\\n    /// @param spender Address to give approval to\\n    /// @param approved Whether to give or revoke the approval\\n    /// @param deadline Deadline parameter for the signature to be valid\\n    /// @dev The `v`, `r`, and `s` parameters are used as signature data\\n    function permit(\\n        address owner,\\n        address spender,\\n        bool approved,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n/// @title IVaultManagerStorage\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface contains getters of the contract's public variables used by other contracts\\n/// of this module\\ninterface IVaultManagerStorage {\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury);\\n\\n    /// @notice Reference to the collateral handled by this `VaultManager`\\n    function collateral() external view returns (IERC20);\\n\\n    /// @notice ID of the last vault created. The `vaultIDCount` variables serves as a counter to generate a unique\\n    /// `vaultID` for each vault: it is like `tokenID` in basic ERC721 contracts\\n    function vaultIDCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4cf6dc5e5b494165e4d9e524dca5c65f6307e5b005a62287c5e84f1539dc81f1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xb109c1d668416c05f61d6edea2ec7a10b2f8b386fd51a59cc12f929c73d00424\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/uniswap/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nstruct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3Router {\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\\n/// @title Router for price estimation functionality\\n/// @notice Functions for getting the price of one token with respect to another using Uniswap V2\\n/// @dev This interface is only used for non critical elements of the protocol\\ninterface IUniswapV2Router {\\n    /// @notice Given an input asset amount, returns the maximum output amount of the\\n    /// other asset (accounting for fees) given reserves.\\n    /// @param path Addresses of the pools used to get prices\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 swapAmount,\\n        uint256 minExpected,\\n        address[] calldata path,\\n        address receiver,\\n        uint256 swapDeadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1908fcdc6ff78ad2250f6ccacc7129df464a648cb2a5f376bedbe506d058bb73\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b620018f81760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b614372806200015c6000396000f3fe6080604052600436106100b55760003560e01c80638000963011610069578063848c48da1161004e578063848c48da146101d9578063b82c4dc1146101ec578063f2f4eb261461020c57600080fd5b8063800096301461019957806383f1d681146101b957600080fd5b80632c76d7a61161009a5780632c76d7a61461013957806342860d4b1461016657806359856d561461018657600080fd5b8063045c08d5146100c15780632026ffa31461011757600080fd5b366100bc57005b600080fd5b3480156100cd57600080fd5b506002546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561012357600080fd5b50610137610132366004613240565b61023f565b005b34801561014557600080fd5b506001546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561017257600080fd5b50610137610181366004613295565b610281565b6101376101943660046134a9565b6104ec565b3480156101a557600080fd5b506101376101b436600461362f565b610888565b3480156101c557600080fd5b506101376101d436600461364c565b610a3a565b6101376101e7366004613681565b610bea565b3480156101f857600080fd5b50610137610207366004613716565b61175a565b34801561021857600080fd5b506000546100ee9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b61027c8383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061191492505050565b505050565b600054610100900460ff16158080156102a15750600054600160ff909116105b806102bb5750303b1580156102bb575060005460ff166001145b61034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103aa57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b73ffffffffffffffffffffffffffffffffffffffff84166103f7576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff80871662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90921691909117909155600180548583167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600280549285169290911691909117905580156104e657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b855160005b818110156106b45787818151811061050b5761050b613791565b6020026020010151604001511561069f5787818151811061052e5761052e613791565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663f51cc7dd89838151811061056757610567613791565b6020026020010151602001513060018c868151811061058857610588613791565b6020026020010151606001518d87815181106105a6576105a6613791565b6020026020010151608001518e88815181106105c4576105c4613791565b602002602001015160a001518f89815181106105e2576105e2613791565b602090810291909101015160c001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff97881660048201529690951660248701529215156044860152606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b15801561068257600080fd5b505af1158015610696573d6000803e3d6000fd5b505050506106a4565b6106b4565b6106ad816137ef565b90506104f1565b506106c28686868686610bea565b60005b8181101561087e578781815181106106df576106df613791565b60200260200101516040015161086e5787818151811061070157610701613791565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663f51cc7dd89838151811061073a5761073a613791565b6020026020010151602001513060008c868151811061075b5761075b613791565b6020026020010151606001518d878151811061077957610779613791565b6020026020010151608001518e888151811061079757610797613791565b602002602001015160a001518f89815181106107b5576107b5613791565b602090810291909101015160c001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff97881660048201529690951660248701529215156044860152606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b505050505b610877816137ef565b90506106c5565b5050505050505050565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f9190613827565b15806109b657506040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff82169063e43581b890602401602060405180830381865afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190613827565b155b156109ed576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190613827565b610b07576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610b54576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff16600003610ba5576001805473ffffffffffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790555050565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b5050565b845160005b81811015610da257868181518110610c0957610c09613791565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663d505accf888381518110610c4257610c42613791565b602002602001015160200151308a8581518110610c6157610c61613791565b6020026020010151604001518b8681518110610c7f57610c7f613791565b6020026020010151606001518c8781518110610c9d57610c9d613791565b6020026020010151608001518d8881518110610cbb57610cbb613791565b602002602001015160a001518e8981518110610cd957610cd9613791565b602090810291909101015160c001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff97881660048201529690951660248701526044860193909352606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b158015610d7957600080fd5b505af1158015610d8d573d6000803e3d6000fd5b5050505080610d9b906137ef565b9050610bef565b508360005b8181101561087e576000878783818110610dc357610dc3613791565b9050602002016020810190610dd89190613873565b601a811115610de957610de9613844565b03610f0c576000806000878785818110610e0557610e05613791565b9050602002810190610e179190613894565b810190610e249190613904565b9250925092507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610ee2576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190613945565b90505b610f0473ffffffffffffffffffffffffffffffffffffffff84163384846119d1565b50505061174a565b6001878783818110610f2057610f20613791565b9050602002016020810190610f359190613873565b601a811115610f4657610f46613844565b03610f5957610f53611aad565b5061174a565b6002878783818110610f6d57610f6d613791565b9050602002016020810190610f829190613873565b601a811115610f9357610f93613844565b03610fda57600080868684818110610fad57610fad613791565b9050602002810190610fbf9190613894565b810190610fcc919061395e565b91509150610f048282611b16565b6003878783818110610fee57610fee613791565b90506020020160208101906110039190613873565b601a81111561101457611014613844565b0361106057600080600087878581811061103057611030613791565b90506020028101906110429190613894565b81019061104f919061398e565b925092509250610f04838383611c36565b600487878381811061107457611074613791565b90506020020160208101906110899190613873565b601a81111561109a5761109a613844565b036110b057478015610f5357610f533382611cfa565b60058787838181106110c4576110c4613791565b90506020020160208101906110d99190613873565b601a8111156110ea576110ea613844565b036111445760008060008088888681811061110757611107613791565b90506020028101906111199190613894565b8101906111269190613a53565b935093509350935061113a84848484611d3f565b505050505061174a565b600687878381811061115857611158613791565b905060200201602081019061116d9190613873565b601a81111561117e5761117e613844565b036111d357600080600087878581811061119a5761119a613791565b90506020028101906111ac9190613894565b8101906111b99190613ab6565b9250925092506111ca838383611e49565b5050505061174a565b60078787838181106111e7576111e7613791565b90506020020160208101906111fc9190613873565b601a81111561120d5761120d613844565b0361125b5760008086868481811061122757611227613791565b90506020028101906112399190613894565b8101906112469190613b0f565b915091506112548282611914565b505061174a565b600887878381811061126f5761126f613791565b90506020020160208101906112849190613873565b601a81111561129557611295613844565b036112e5576000806000808888868181106112b2576112b2613791565b90506020028101906112c49190613894565b8101906112d19190613bbe565b93509350935093506111ca84848484611f37565b60098787838181106112f9576112f9613791565b905060200201602081019061130e9190613873565b601a81111561131f5761131f613844565b036113c25760008060008060008060008b8b8981811061134157611341613791565b90506020028101906113539190613894565b8101906113609190613d05565b965096509650965096509650965061137a8383888a611fc3565b91506113a787877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b6113b586848488888661262e565b505050505050505061174a565b600a8787838181106113d6576113d6613791565b90506020020160208101906113eb9190613873565b601a8111156113fc576113fc613844565b036114665760008060008060008060008b8b8981811061141e5761141e613791565b90506020028101906114309190613894565b81019061143d9190613dd4565b965096509650965096509650965061145a87878787878787612703565b5050505050505061174a565b600b87878381811061147a5761147a613791565b905060200201602081019061148f9190613873565b601a8111156114a0576114a0613844565b0361152a5760008060008060008989878181106114bf576114bf613791565b90506020028101906114d19190613894565b8101906114de9190613e60565b9450945094509450945061151385857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b61151f8484848461279a565b50505050505061174a565b600c87878381811061153e5761153e613791565b90506020020160208101906115539190613873565b601a81111561156457611564613844565b036115e357600080600080600089898781811061158357611583613791565b90506020028101906115959190613894565b8101906115a29190613e60565b945094509450945094506115d785857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b61151f84848484612846565b600d8787838181106115f7576115f7613791565b905060200201602081019061160c9190613873565b601a81111561161d5761161d613844565b0361166d5760008060008088888681811061163a5761163a613791565b905060200281019061164c9190613894565b8101906116599190613ebb565b935093509350935061113a848484846128f0565b600e87878381811061168157611681613791565b90506020020160208101906116969190613873565b601a8111156116a7576116a7613844565b036116f7576000806000808888868181106116c4576116c4613791565b90506020028101906116d69190613894565b8101906116e39190613ebb565b935093509350935061113a84848484612958565b61174a87878381811061170c5761170c613791565b90506020020160208101906117219190613873565b86868481811061173357611733613791565b90506020028101906117459190613894565b6129c3565b611753816137ef565b9050610da7565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190613827565b611827576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8483811415806118375750808214155b1561186e576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561087e576118e888888381811061188e5761188e613791565b90506020020160208101906118a3919061362f565b8787848181106118b5576118b5613791565b90506020020160208101906118ca919061362f565b8686858181106118dc576118dc613791565b905060200201356124f0565b6118f1816137ef565b9050611871565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b805160005b818110156104e65782818151811061193357611933613791565b60209081029190910101516040517f84e9bd7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152909116906384e9bd7e90602401600060405180830381600087803b1580156119a857600080fd5b505af11580156119bc573d6000803e3d6000fd5b50505050806119ca906137ef565b9050611919565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526104e69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612a52565b60008073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b505050505034905090565b6000806040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190613945565b9050611bb58184612b5e565b8015611c30576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101829052600090632e1a7d4d90602401600060405180830381600087803b158015611c0e57600080fd5b505af1158015611c22573d6000803e3d6000fd5b50505050611c308282611cfa565b92915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015611ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc79190613945565b9050611cd38184612b5e565b80156104e6576104e673ffffffffffffffffffffffffffffffffffffffff85168383612b98565b600080600080600085875af190508061027c576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015460009073ffffffffffffffffffffffffffffffffffffffff16611d8686827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b6040805160a0810182528481523060208201524281830152606081018790526080810186905290517fc04b8d5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169163c04b8d5991611dfc9190600401613f71565b6020604051808303816000875af1158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190613945565b9695505050505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff16611e9085827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b6000808273ffffffffffffffffffffffffffffffffffffffff1685604051611eb89190613fd7565b6000604051808303816000865af19150503d8060008114611ef5576040519150601f19603f3d011682016040523d82523d6000602084013e611efa565b606091505b509150915081611f0d57611f0d81612bee565b80806020019051810190611f219190613945565b9350611f2d8487612b5e565b5050509392505050565b6040517f83df67470000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff858116602483015282151560448301528316906383df674790606401600060405180830381600087803b158015611faf57600080fd5b505af115801561087e573d6000803e3d6000fd5b835160609060008167ffffffffffffffff811115611fe357611fe36132e0565b60405190808252806020026020018201604052801561200c578160200160208202803683370190505b5090506000806000805b858110156124de576000808c838151811061203357612033613791565b6020026020010151600781111561204c5761204c613844565b0361205b5760019450506124ce565b60028c838151811061206f5761206f613791565b6020026020010151600781111561208857612088613844565b0361219f5760008b83815181106120a1576120a1613791565b60200260200101518060200190518101906120bc9190613ff3565b909250905060018101612198576040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152829073ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa158015612135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121599190613945565b6040805160208101939093528201526060016040516020818303038152906040528c848151811061218c5761218c613791565b60200260200101819052505b50506124ce565b60038c83815181106121b3576121b3613791565b602002602001015160078111156121cc576121cc613844565b1480612202575060058c83815181106121e7576121e7613791565b6020026020010151600781111561220057612200613844565b145b1561223c578a828151811061221957612219613791565b60200260200101518060200190518101906122349190613ff3565b509050612313565b60018c838151811061225057612250613791565b6020026020010151600781111561226957612269613844565b036122a2578a828151811061228057612280613791565b602002602001015180602001905181019061229b9190613945565b9050612313565b60068c83815181106122b6576122b6613791565b602002602001015160078111156122cf576122cf613844565b0361230d578a82815181106122e6576122e6613791565b60200260200101518060200190518101906123019190614017565b50919250612313915050565b506124ce565b806000036123a457841561232757506124ce565b836000036123a1578973ffffffffffffffffffffffffffffffffffffffff16633c2e941b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561237a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239e9190613945565b93505b50825b60005b838110156123d557818782815181106123c2576123c2613791565b5050506123ce816137ef565b90506123a7565b506040517f430c20810000000000000000000000000000000000000000000000000000000081523360048201526024810182905273ffffffffffffffffffffffffffffffffffffffff8b169063430c208190604401602060405180830381865afa158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b9190613827565b6124a1576040517fe433766c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808684815181106124b4576124b4613791565b60209081029190910101526124ca600184614055565b9250505b6124d7816137ef565b9050612016565b5088955050505050505b949350505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258a9190613945565b905081811080156125c457506125c160027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614068565b81105b156125fa576125f5836125d783856140a3565b73ffffffffffffffffffffffffffffffffffffffff87169190612c2f565b6104e6565b818111156104e6576104e68361261084846140a3565b73ffffffffffffffffffffffffffffffffffffffff87169190612d2d565b6126596040518060800160405280600081526020016000815260200160008152602001600081525090565b6040517fde8fc69800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063de8fc698906126b5908990899033908a908a908a9060040161410b565b6080604051808303816000875af11580156126d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f8919061420b565b979650505050505050565b6040517fa5d4096b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063a5d4096b9061275f90899089908990899089908990600401614271565b600060405180830381600087803b15801561277957600080fd5b505af115801561278d573d6000803e3d6000fd5b5050505050505050505050565b6040517f94bf804d0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301526000916124e8918491908816906394bf804d906044015b6020604051808303816000875af115801561281a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283e9190613945565b925082612b5e565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301526000916124e891871690636e553f65906044015b6020604051808303816000875af11580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e79190613945565b91508183612b5e565b6040517fba0876520000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301523360448301526000916124e89187169063ba087652906064016128a4565b6040517fb460af940000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301523360448301526000916124e89184919088169063b460af94906064016127fb565b601183601a8111156129d7576129d7613844565b03612a10576000808080806129ee868801886142ca565b94509450945094509450612a058585858585612eba565b505050505050505050565b601283601a811115612a2457612a24613844565b0361027c57600080808080612a3b868801886142ca565b94509450945094509450612a058585858585612f76565b6000612ab4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612fdd9092919063ffffffff16565b80519091501561027c5780806020019051810190612ad29190613827565b61027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610343565b80821015610be6576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261027c9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611a2b565b805115612bfd57805181602001fd5b6040517fee418e3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cca9190613945565b612cd49190614055565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506104e69085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611a2b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc79190613945565b905081811015612e59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610343565b60405173ffffffffffffffffffffffffffffffffffffffff841660248201528282036044820181905290612eb39086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611a2b565b5050505050565b6040517f151dd75500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282811660448301526000919087169063151dd755906064015b6020604051808303816000875af1158015612f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f609190613945565b9350612f6c8484612b5e565b5091949350505050565b6040517fd44ad63f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282811660448301526000919087169063d44ad63f90606401612f1d565b6060612fec8484600085612ff6565b90505b9392505050565b606082471015613088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610343565b73ffffffffffffffffffffffffffffffffffffffff85163b613106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610343565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161312f9190613fd7565b60006040518083038185875af1925050503d806000811461316c576040519150601f19603f3d011682016040523d82523d6000602084013e613171565b606091505b50915091506126f88282866060831561318b575081612fef565b82511561319b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103439190614329565b73ffffffffffffffffffffffffffffffffffffffff811681146131f157600080fd5b50565b60008083601f84011261320657600080fd5b50813567ffffffffffffffff81111561321e57600080fd5b6020830191508360208260051b850101111561323957600080fd5b9250929050565b60008060006040848603121561325557600080fd5b8335613260816131cf565b9250602084013567ffffffffffffffff81111561327c57600080fd5b613288868287016131f4565b9497909650939450505050565b6000806000606084860312156132aa57600080fd5b83356132b5816131cf565b925060208401356132c5816131cf565b915060408401356132d5816131cf565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613332576133326132e0565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561337f5761337f6132e0565b604052919050565b600067ffffffffffffffff8211156133a1576133a16132e0565b5060051b60200190565b80151581146131f157600080fd5b803560ff811681146133ca57600080fd5b919050565b600082601f8301126133e057600080fd5b813560206133f56133f083613387565b613338565b82815260e0928302850182019282820191908785111561341457600080fd5b8387015b8581101561349c5781818a0312156134305760008081fd5b61343861330f565b8135613443816131cf565b815281860135613452816131cf565b81870152604082810135908201526060808301359082015260806134778184016133b9565b9082015260a0828101359082015260c080830135908201528452928401928101613418565b5090979650505050505050565b600080600080600080608087890312156134c257600080fd5b863567ffffffffffffffff808211156134da57600080fd5b818901915089601f8301126134ee57600080fd5b813560206134fe6133f083613387565b82815260e09092028401810191818101908d84111561351c57600080fd5b948201945b838610156135b35760e0868f03121561353a5760008081fd5b61354261330f565b863561354d816131cf565b81528684013561355c816131cf565b8185015260408781013561356f816133ab565b9082015260608781013590820152613589608088016133b9565b608082015260a0878101359082015260c08088013590820152825260e09095019490820190613521565b9a50508a0135925050808211156135c957600080fd5b6135d58a838b016133cf565b965060408901359150808211156135eb57600080fd5b6135f78a838b016131f4565b9096509450606089013591508082111561361057600080fd5b5061361d89828a016131f4565b979a9699509497509295939492505050565b60006020828403121561364157600080fd5b8135612fef816131cf565b6000806040838503121561365f57600080fd5b823561366a816131cf565b9150613678602084016133b9565b90509250929050565b60008060008060006060868803121561369957600080fd5b853567ffffffffffffffff808211156136b157600080fd5b6136bd89838a016133cf565b965060208801359150808211156136d357600080fd5b6136df89838a016131f4565b909650945060408801359150808211156136f857600080fd5b50613705888289016131f4565b969995985093965092949392505050565b6000806000806000806060878903121561372f57600080fd5b863567ffffffffffffffff8082111561374757600080fd5b6137538a838b016131f4565b9098509650602089013591508082111561376c57600080fd5b6137788a838b016131f4565b9096509450604089013591508082111561361057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613820576138206137c0565b5060010190565b60006020828403121561383957600080fd5b8151612fef816133ab565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561388557600080fd5b8135601b8110612fef57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126138c957600080fd5b83018035915067ffffffffffffffff8211156138e457600080fd5b60200191503681900382131561323957600080fd5b80356133ca816131cf565b60008060006060848603121561391957600080fd5b8335613924816131cf565b92506020840135613934816131cf565b929592945050506040919091013590565b60006020828403121561395757600080fd5b5051919050565b6000806040838503121561397157600080fd5b823591506020830135613983816131cf565b809150509250929050565b6000806000606084860312156139a357600080fd5b83356139ae816131cf565b92506020840135915060408401356132d5816131cf565b600082601f8301126139d657600080fd5b813567ffffffffffffffff8111156139f0576139f06132e0565b613a2160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613338565b818152846020838601011115613a3657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613a6957600080fd5b8435613a74816131cf565b93506020850135925060408501359150606085013567ffffffffffffffff811115613a9e57600080fd5b613aaa878288016139c5565b91505092959194509250565b600080600060608486031215613acb57600080fd5b8335613ad6816131cf565b925060208401359150604084013567ffffffffffffffff811115613af957600080fd5b613b05868287016139c5565b9150509250925092565b60008060408385031215613b2257600080fd5b8235613b2d816131cf565b915060208381013567ffffffffffffffff811115613b4a57600080fd5b8401601f81018613613b5b57600080fd5b8035613b696133f082613387565b81815260059190911b82018301908381019088831115613b8857600080fd5b928401925b82841015613baf578335613ba0816131cf565b82529284019290840190613b8d565b80955050505050509250929050565b60008060008060808587031215613bd457600080fd5b8435613bdf816131cf565b9350602085013592506040850135613bf6816131cf565b91506060850135613c06816133ab565b939692955090935050565b600082601f830112613c2257600080fd5b81356020613c326133f083613387565b82815260059290921b84018101918181019086841115613c5157600080fd5b8286015b84811015613c7a57803560088110613c6d5760008081fd5b8352918301918301613c55565b509695505050505050565b600082601f830112613c9657600080fd5b81356020613ca66133f083613387565b82815260059290921b84018101918181019086841115613cc557600080fd5b8286015b84811015613c7a57803567ffffffffffffffff811115613ce95760008081fd5b613cf78986838b01016139c5565b845250918301918301613cc9565b600080600080600080600060e0888a031215613d2057600080fd5b8735613d2b816131cf565b96506020880135613d3b816131cf565b9550613d49604089016138f9565b9450613d57606089016138f9565b9350608088013567ffffffffffffffff80821115613d7457600080fd5b613d808b838c01613c11565b945060a08a0135915080821115613d9657600080fd5b613da28b838c01613c85565b935060c08a0135915080821115613db857600080fd5b50613dc58a828b016139c5565b91505092959891949750929550565b600080600080600080600060e0888a031215613def57600080fd5b8735613dfa816131cf565b96506020880135613e0a816131cf565b95506040880135613e1a816131cf565b94506060880135613e2a816131cf565b93506080880135925060a0880135915060c088013567ffffffffffffffff811115613e5457600080fd5b613dc58a828b016139c5565b600080600080600060a08688031215613e7857600080fd5b8535613e83816131cf565b94506020860135613e93816131cf565b9350604086013592506060860135613eaa816131cf565b949793965091946080013592915050565b60008060008060808587031215613ed157600080fd5b8435613edc816131cf565b9350602085013592506040850135613ef3816131cf565b9396929550929360600135925050565b60005b83811015613f1e578181015183820152602001613f06565b50506000910152565b60008151808452613f3f816020860160208601613f03565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000825160a06020840152613f8d60c0840182613f27565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008251613fe9818460208701613f03565b9190910192915050565b6000806040838503121561400657600080fd5b505080516020909101519092909150565b6000806000806080858703121561402d57600080fd5b84519350602085015161403f816131cf565b6040860151606090960151949790965092505050565b80820180821115611c3057611c306137c0565b60008261409e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81810381811115611c3057611c306137c0565b600081518084526020808501808196508360051b8101915082860160005b858110156140fe5782840389526140ec848351613f27565b988501989350908401906001016140d4565b5091979650505050505050565b60c0808252875190820181905260009060209060e0840190828b0184805b8381101561417a57825160088110614168577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b85529385019391850191600101614129565b505050508381038285015261418f818a6140b6565b9150506141b4604084018873ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff8616606084015273ffffffffffffffffffffffffffffffffffffffff8516608084015282810360a08401526141fe8185613f27565b9998505050505050505050565b60006080828403121561421d57600080fd5b6040516080810181811067ffffffffffffffff82111715614240576142406132e0565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015283608083015260c060a08301526142be60c0830184613f27565b98975050505050505050565b600080600080600060a086880312156142e257600080fd5b85356142ed816131cf565b945060208601356142fd816131cf565b93506040860135925060608601359150608086013561431b816131cf565b809150509295509295909350565b602081526000612fef6020830184613f2756fea2646970667358221220613ea70d653995768ec4f8289d1bb4adef56514876bc5211c5819ef51cd59f4264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100b55760003560e01c80638000963011610069578063848c48da1161004e578063848c48da146101d9578063b82c4dc1146101ec578063f2f4eb261461020c57600080fd5b8063800096301461019957806383f1d681146101b957600080fd5b80632c76d7a61161009a5780632c76d7a61461013957806342860d4b1461016657806359856d561461018657600080fd5b8063045c08d5146100c15780632026ffa31461011757600080fd5b366100bc57005b600080fd5b3480156100cd57600080fd5b506002546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561012357600080fd5b50610137610132366004613240565b61023f565b005b34801561014557600080fd5b506001546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561017257600080fd5b50610137610181366004613295565b610281565b6101376101943660046134a9565b6104ec565b3480156101a557600080fd5b506101376101b436600461362f565b610888565b3480156101c557600080fd5b506101376101d436600461364c565b610a3a565b6101376101e7366004613681565b610bea565b3480156101f857600080fd5b50610137610207366004613716565b61175a565b34801561021857600080fd5b506000546100ee9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b61027c8383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061191492505050565b505050565b600054610100900460ff16158080156102a15750600054600160ff909116105b806102bb5750303b1580156102bb575060005460ff166001145b61034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103aa57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b73ffffffffffffffffffffffffffffffffffffffff84166103f7576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff80871662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90921691909117909155600180548583167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600280549285169290911691909117905580156104e657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b855160005b818110156106b45787818151811061050b5761050b613791565b6020026020010151604001511561069f5787818151811061052e5761052e613791565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663f51cc7dd89838151811061056757610567613791565b6020026020010151602001513060018c868151811061058857610588613791565b6020026020010151606001518d87815181106105a6576105a6613791565b6020026020010151608001518e88815181106105c4576105c4613791565b602002602001015160a001518f89815181106105e2576105e2613791565b602090810291909101015160c001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff97881660048201529690951660248701529215156044860152606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b15801561068257600080fd5b505af1158015610696573d6000803e3d6000fd5b505050506106a4565b6106b4565b6106ad816137ef565b90506104f1565b506106c28686868686610bea565b60005b8181101561087e578781815181106106df576106df613791565b60200260200101516040015161086e5787818151811061070157610701613791565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663f51cc7dd89838151811061073a5761073a613791565b6020026020010151602001513060008c868151811061075b5761075b613791565b6020026020010151606001518d878151811061077957610779613791565b6020026020010151608001518e888151811061079757610797613791565b602002602001015160a001518f89815181106107b5576107b5613791565b602090810291909101015160c001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff97881660048201529690951660248701529215156044860152606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b505050505b610877816137ef565b90506106c5565b5050505050505050565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f9190613827565b15806109b657506040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff82169063e43581b890602401602060405180830381865afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190613827565b155b156109ed576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190613827565b610b07576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610b54576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff16600003610ba5576001805473ffffffffffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790555050565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b5050565b845160005b81811015610da257868181518110610c0957610c09613791565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663d505accf888381518110610c4257610c42613791565b602002602001015160200151308a8581518110610c6157610c61613791565b6020026020010151604001518b8681518110610c7f57610c7f613791565b6020026020010151606001518c8781518110610c9d57610c9d613791565b6020026020010151608001518d8881518110610cbb57610cbb613791565b602002602001015160a001518e8981518110610cd957610cd9613791565b602090810291909101015160c001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff97881660048201529690951660248701526044860193909352606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b158015610d7957600080fd5b505af1158015610d8d573d6000803e3d6000fd5b5050505080610d9b906137ef565b9050610bef565b508360005b8181101561087e576000878783818110610dc357610dc3613791565b9050602002016020810190610dd89190613873565b601a811115610de957610de9613844565b03610f0c576000806000878785818110610e0557610e05613791565b9050602002810190610e179190613894565b810190610e249190613904565b9250925092507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610ee2576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190613945565b90505b610f0473ffffffffffffffffffffffffffffffffffffffff84163384846119d1565b50505061174a565b6001878783818110610f2057610f20613791565b9050602002016020810190610f359190613873565b601a811115610f4657610f46613844565b03610f5957610f53611aad565b5061174a565b6002878783818110610f6d57610f6d613791565b9050602002016020810190610f829190613873565b601a811115610f9357610f93613844565b03610fda57600080868684818110610fad57610fad613791565b9050602002810190610fbf9190613894565b810190610fcc919061395e565b91509150610f048282611b16565b6003878783818110610fee57610fee613791565b90506020020160208101906110039190613873565b601a81111561101457611014613844565b0361106057600080600087878581811061103057611030613791565b90506020028101906110429190613894565b81019061104f919061398e565b925092509250610f04838383611c36565b600487878381811061107457611074613791565b90506020020160208101906110899190613873565b601a81111561109a5761109a613844565b036110b057478015610f5357610f533382611cfa565b60058787838181106110c4576110c4613791565b90506020020160208101906110d99190613873565b601a8111156110ea576110ea613844565b036111445760008060008088888681811061110757611107613791565b90506020028101906111199190613894565b8101906111269190613a53565b935093509350935061113a84848484611d3f565b505050505061174a565b600687878381811061115857611158613791565b905060200201602081019061116d9190613873565b601a81111561117e5761117e613844565b036111d357600080600087878581811061119a5761119a613791565b90506020028101906111ac9190613894565b8101906111b99190613ab6565b9250925092506111ca838383611e49565b5050505061174a565b60078787838181106111e7576111e7613791565b90506020020160208101906111fc9190613873565b601a81111561120d5761120d613844565b0361125b5760008086868481811061122757611227613791565b90506020028101906112399190613894565b8101906112469190613b0f565b915091506112548282611914565b505061174a565b600887878381811061126f5761126f613791565b90506020020160208101906112849190613873565b601a81111561129557611295613844565b036112e5576000806000808888868181106112b2576112b2613791565b90506020028101906112c49190613894565b8101906112d19190613bbe565b93509350935093506111ca84848484611f37565b60098787838181106112f9576112f9613791565b905060200201602081019061130e9190613873565b601a81111561131f5761131f613844565b036113c25760008060008060008060008b8b8981811061134157611341613791565b90506020028101906113539190613894565b8101906113609190613d05565b965096509650965096509650965061137a8383888a611fc3565b91506113a787877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b6113b586848488888661262e565b505050505050505061174a565b600a8787838181106113d6576113d6613791565b90506020020160208101906113eb9190613873565b601a8111156113fc576113fc613844565b036114665760008060008060008060008b8b8981811061141e5761141e613791565b90506020028101906114309190613894565b81019061143d9190613dd4565b965096509650965096509650965061145a87878787878787612703565b5050505050505061174a565b600b87878381811061147a5761147a613791565b905060200201602081019061148f9190613873565b601a8111156114a0576114a0613844565b0361152a5760008060008060008989878181106114bf576114bf613791565b90506020028101906114d19190613894565b8101906114de9190613e60565b9450945094509450945061151385857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b61151f8484848461279a565b50505050505061174a565b600c87878381811061153e5761153e613791565b90506020020160208101906115539190613873565b601a81111561156457611564613844565b036115e357600080600080600089898781811061158357611583613791565b90506020028101906115959190613894565b8101906115a29190613e60565b945094509450945094506115d785857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b61151f84848484612846565b600d8787838181106115f7576115f7613791565b905060200201602081019061160c9190613873565b601a81111561161d5761161d613844565b0361166d5760008060008088888681811061163a5761163a613791565b905060200281019061164c9190613894565b8101906116599190613ebb565b935093509350935061113a848484846128f0565b600e87878381811061168157611681613791565b90506020020160208101906116969190613873565b601a8111156116a7576116a7613844565b036116f7576000806000808888868181106116c4576116c4613791565b90506020028101906116d69190613894565b8101906116e39190613ebb565b935093509350935061113a84848484612958565b61174a87878381811061170c5761170c613791565b90506020020160208101906117219190613873565b86868481811061173357611733613791565b90506020028101906117459190613894565b6129c3565b611753816137ef565b9050610da7565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190613827565b611827576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8483811415806118375750808214155b1561186e576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561087e576118e888888381811061188e5761188e613791565b90506020020160208101906118a3919061362f565b8787848181106118b5576118b5613791565b90506020020160208101906118ca919061362f565b8686858181106118dc576118dc613791565b905060200201356124f0565b6118f1816137ef565b9050611871565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b805160005b818110156104e65782818151811061193357611933613791565b60209081029190910101516040517f84e9bd7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152909116906384e9bd7e90602401600060405180830381600087803b1580156119a857600080fd5b505af11580156119bc573d6000803e3d6000fd5b50505050806119ca906137ef565b9050611919565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526104e69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612a52565b60008073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b505050505034905090565b6000806040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190613945565b9050611bb58184612b5e565b8015611c30576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101829052600090632e1a7d4d90602401600060405180830381600087803b158015611c0e57600080fd5b505af1158015611c22573d6000803e3d6000fd5b50505050611c308282611cfa565b92915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015611ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc79190613945565b9050611cd38184612b5e565b80156104e6576104e673ffffffffffffffffffffffffffffffffffffffff85168383612b98565b600080600080600085875af190508061027c576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015460009073ffffffffffffffffffffffffffffffffffffffff16611d8686827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b6040805160a0810182528481523060208201524281830152606081018790526080810186905290517fc04b8d5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169163c04b8d5991611dfc9190600401613f71565b6020604051808303816000875af1158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190613945565b9695505050505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff16611e9085827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124f0565b6000808273ffffffffffffffffffffffffffffffffffffffff1685604051611eb89190613fd7565b6000604051808303816000865af19150503d8060008114611ef5576040519150601f19603f3d011682016040523d82523d6000602084013e611efa565b606091505b509150915081611f0d57611f0d81612bee565b80806020019051810190611f219190613945565b9350611f2d8487612b5e565b5050509392505050565b6040517f83df67470000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff858116602483015282151560448301528316906383df674790606401600060405180830381600087803b158015611faf57600080fd5b505af115801561087e573d6000803e3d6000fd5b835160609060008167ffffffffffffffff811115611fe357611fe36132e0565b60405190808252806020026020018201604052801561200c578160200160208202803683370190505b5090506000806000805b858110156124de576000808c838151811061203357612033613791565b6020026020010151600781111561204c5761204c613844565b0361205b5760019450506124ce565b60028c838151811061206f5761206f613791565b6020026020010151600781111561208857612088613844565b0361219f5760008b83815181106120a1576120a1613791565b60200260200101518060200190518101906120bc9190613ff3565b909250905060018101612198576040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152829073ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa158015612135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121599190613945565b6040805160208101939093528201526060016040516020818303038152906040528c848151811061218c5761218c613791565b60200260200101819052505b50506124ce565b60038c83815181106121b3576121b3613791565b602002602001015160078111156121cc576121cc613844565b1480612202575060058c83815181106121e7576121e7613791565b6020026020010151600781111561220057612200613844565b145b1561223c578a828151811061221957612219613791565b60200260200101518060200190518101906122349190613ff3565b509050612313565b60018c838151811061225057612250613791565b6020026020010151600781111561226957612269613844565b036122a2578a828151811061228057612280613791565b602002602001015180602001905181019061229b9190613945565b9050612313565b60068c83815181106122b6576122b6613791565b602002602001015160078111156122cf576122cf613844565b0361230d578a82815181106122e6576122e6613791565b60200260200101518060200190518101906123019190614017565b50919250612313915050565b506124ce565b806000036123a457841561232757506124ce565b836000036123a1578973ffffffffffffffffffffffffffffffffffffffff16633c2e941b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561237a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239e9190613945565b93505b50825b60005b838110156123d557818782815181106123c2576123c2613791565b5050506123ce816137ef565b90506123a7565b506040517f430c20810000000000000000000000000000000000000000000000000000000081523360048201526024810182905273ffffffffffffffffffffffffffffffffffffffff8b169063430c208190604401602060405180830381865afa158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b9190613827565b6124a1576040517fe433766c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808684815181106124b4576124b4613791565b60209081029190910101526124ca600184614055565b9250505b6124d7816137ef565b9050612016565b5088955050505050505b949350505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258a9190613945565b905081811080156125c457506125c160027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614068565b81105b156125fa576125f5836125d783856140a3565b73ffffffffffffffffffffffffffffffffffffffff87169190612c2f565b6104e6565b818111156104e6576104e68361261084846140a3565b73ffffffffffffffffffffffffffffffffffffffff87169190612d2d565b6126596040518060800160405280600081526020016000815260200160008152602001600081525090565b6040517fde8fc69800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063de8fc698906126b5908990899033908a908a908a9060040161410b565b6080604051808303816000875af11580156126d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f8919061420b565b979650505050505050565b6040517fa5d4096b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063a5d4096b9061275f90899089908990899089908990600401614271565b600060405180830381600087803b15801561277957600080fd5b505af115801561278d573d6000803e3d6000fd5b5050505050505050505050565b6040517f94bf804d0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301526000916124e8918491908816906394bf804d906044015b6020604051808303816000875af115801561281a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283e9190613945565b925082612b5e565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301526000916124e891871690636e553f65906044015b6020604051808303816000875af11580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e79190613945565b91508183612b5e565b6040517fba0876520000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301523360448301526000916124e89187169063ba087652906064016128a4565b6040517fb460af940000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301523360448301526000916124e89184919088169063b460af94906064016127fb565b601183601a8111156129d7576129d7613844565b03612a10576000808080806129ee868801886142ca565b94509450945094509450612a058585858585612eba565b505050505050505050565b601283601a811115612a2457612a24613844565b0361027c57600080808080612a3b868801886142ca565b94509450945094509450612a058585858585612f76565b6000612ab4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612fdd9092919063ffffffff16565b80519091501561027c5780806020019051810190612ad29190613827565b61027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610343565b80821015610be6576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261027c9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611a2b565b805115612bfd57805181602001fd5b6040517fee418e3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cca9190613945565b612cd49190614055565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506104e69085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611a2b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc79190613945565b905081811015612e59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610343565b60405173ffffffffffffffffffffffffffffffffffffffff841660248201528282036044820181905290612eb39086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611a2b565b5050505050565b6040517f151dd75500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282811660448301526000919087169063151dd755906064015b6020604051808303816000875af1158015612f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f609190613945565b9350612f6c8484612b5e565b5091949350505050565b6040517fd44ad63f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282811660448301526000919087169063d44ad63f90606401612f1d565b6060612fec8484600085612ff6565b90505b9392505050565b606082471015613088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610343565b73ffffffffffffffffffffffffffffffffffffffff85163b613106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610343565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161312f9190613fd7565b60006040518083038185875af1925050503d806000811461316c576040519150601f19603f3d011682016040523d82523d6000602084013e613171565b606091505b50915091506126f88282866060831561318b575081612fef565b82511561319b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103439190614329565b73ffffffffffffffffffffffffffffffffffffffff811681146131f157600080fd5b50565b60008083601f84011261320657600080fd5b50813567ffffffffffffffff81111561321e57600080fd5b6020830191508360208260051b850101111561323957600080fd5b9250929050565b60008060006040848603121561325557600080fd5b8335613260816131cf565b9250602084013567ffffffffffffffff81111561327c57600080fd5b613288868287016131f4565b9497909650939450505050565b6000806000606084860312156132aa57600080fd5b83356132b5816131cf565b925060208401356132c5816131cf565b915060408401356132d5816131cf565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613332576133326132e0565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561337f5761337f6132e0565b604052919050565b600067ffffffffffffffff8211156133a1576133a16132e0565b5060051b60200190565b80151581146131f157600080fd5b803560ff811681146133ca57600080fd5b919050565b600082601f8301126133e057600080fd5b813560206133f56133f083613387565b613338565b82815260e0928302850182019282820191908785111561341457600080fd5b8387015b8581101561349c5781818a0312156134305760008081fd5b61343861330f565b8135613443816131cf565b815281860135613452816131cf565b81870152604082810135908201526060808301359082015260806134778184016133b9565b9082015260a0828101359082015260c080830135908201528452928401928101613418565b5090979650505050505050565b600080600080600080608087890312156134c257600080fd5b863567ffffffffffffffff808211156134da57600080fd5b818901915089601f8301126134ee57600080fd5b813560206134fe6133f083613387565b82815260e09092028401810191818101908d84111561351c57600080fd5b948201945b838610156135b35760e0868f03121561353a5760008081fd5b61354261330f565b863561354d816131cf565b81528684013561355c816131cf565b8185015260408781013561356f816133ab565b9082015260608781013590820152613589608088016133b9565b608082015260a0878101359082015260c08088013590820152825260e09095019490820190613521565b9a50508a0135925050808211156135c957600080fd5b6135d58a838b016133cf565b965060408901359150808211156135eb57600080fd5b6135f78a838b016131f4565b9096509450606089013591508082111561361057600080fd5b5061361d89828a016131f4565b979a9699509497509295939492505050565b60006020828403121561364157600080fd5b8135612fef816131cf565b6000806040838503121561365f57600080fd5b823561366a816131cf565b9150613678602084016133b9565b90509250929050565b60008060008060006060868803121561369957600080fd5b853567ffffffffffffffff808211156136b157600080fd5b6136bd89838a016133cf565b965060208801359150808211156136d357600080fd5b6136df89838a016131f4565b909650945060408801359150808211156136f857600080fd5b50613705888289016131f4565b969995985093965092949392505050565b6000806000806000806060878903121561372f57600080fd5b863567ffffffffffffffff8082111561374757600080fd5b6137538a838b016131f4565b9098509650602089013591508082111561376c57600080fd5b6137788a838b016131f4565b9096509450604089013591508082111561361057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613820576138206137c0565b5060010190565b60006020828403121561383957600080fd5b8151612fef816133ab565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561388557600080fd5b8135601b8110612fef57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126138c957600080fd5b83018035915067ffffffffffffffff8211156138e457600080fd5b60200191503681900382131561323957600080fd5b80356133ca816131cf565b60008060006060848603121561391957600080fd5b8335613924816131cf565b92506020840135613934816131cf565b929592945050506040919091013590565b60006020828403121561395757600080fd5b5051919050565b6000806040838503121561397157600080fd5b823591506020830135613983816131cf565b809150509250929050565b6000806000606084860312156139a357600080fd5b83356139ae816131cf565b92506020840135915060408401356132d5816131cf565b600082601f8301126139d657600080fd5b813567ffffffffffffffff8111156139f0576139f06132e0565b613a2160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613338565b818152846020838601011115613a3657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613a6957600080fd5b8435613a74816131cf565b93506020850135925060408501359150606085013567ffffffffffffffff811115613a9e57600080fd5b613aaa878288016139c5565b91505092959194509250565b600080600060608486031215613acb57600080fd5b8335613ad6816131cf565b925060208401359150604084013567ffffffffffffffff811115613af957600080fd5b613b05868287016139c5565b9150509250925092565b60008060408385031215613b2257600080fd5b8235613b2d816131cf565b915060208381013567ffffffffffffffff811115613b4a57600080fd5b8401601f81018613613b5b57600080fd5b8035613b696133f082613387565b81815260059190911b82018301908381019088831115613b8857600080fd5b928401925b82841015613baf578335613ba0816131cf565b82529284019290840190613b8d565b80955050505050509250929050565b60008060008060808587031215613bd457600080fd5b8435613bdf816131cf565b9350602085013592506040850135613bf6816131cf565b91506060850135613c06816133ab565b939692955090935050565b600082601f830112613c2257600080fd5b81356020613c326133f083613387565b82815260059290921b84018101918181019086841115613c5157600080fd5b8286015b84811015613c7a57803560088110613c6d5760008081fd5b8352918301918301613c55565b509695505050505050565b600082601f830112613c9657600080fd5b81356020613ca66133f083613387565b82815260059290921b84018101918181019086841115613cc557600080fd5b8286015b84811015613c7a57803567ffffffffffffffff811115613ce95760008081fd5b613cf78986838b01016139c5565b845250918301918301613cc9565b600080600080600080600060e0888a031215613d2057600080fd5b8735613d2b816131cf565b96506020880135613d3b816131cf565b9550613d49604089016138f9565b9450613d57606089016138f9565b9350608088013567ffffffffffffffff80821115613d7457600080fd5b613d808b838c01613c11565b945060a08a0135915080821115613d9657600080fd5b613da28b838c01613c85565b935060c08a0135915080821115613db857600080fd5b50613dc58a828b016139c5565b91505092959891949750929550565b600080600080600080600060e0888a031215613def57600080fd5b8735613dfa816131cf565b96506020880135613e0a816131cf565b95506040880135613e1a816131cf565b94506060880135613e2a816131cf565b93506080880135925060a0880135915060c088013567ffffffffffffffff811115613e5457600080fd5b613dc58a828b016139c5565b600080600080600060a08688031215613e7857600080fd5b8535613e83816131cf565b94506020860135613e93816131cf565b9350604086013592506060860135613eaa816131cf565b949793965091946080013592915050565b60008060008060808587031215613ed157600080fd5b8435613edc816131cf565b9350602085013592506040850135613ef3816131cf565b9396929550929360600135925050565b60005b83811015613f1e578181015183820152602001613f06565b50506000910152565b60008151808452613f3f816020860160208601613f03565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000825160a06020840152613f8d60c0840182613f27565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008251613fe9818460208701613f03565b9190910192915050565b6000806040838503121561400657600080fd5b505080516020909101519092909150565b6000806000806080858703121561402d57600080fd5b84519350602085015161403f816131cf565b6040860151606090960151949790965092505050565b80820180821115611c3057611c306137c0565b60008261409e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81810381811115611c3057611c306137c0565b600081518084526020808501808196508360051b8101915082860160005b858110156140fe5782840389526140ec848351613f27565b988501989350908401906001016140d4565b5091979650505050505050565b60c0808252875190820181905260009060209060e0840190828b0184805b8381101561417a57825160088110614168577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b85529385019391850191600101614129565b505050508381038285015261418f818a6140b6565b9150506141b4604084018873ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff8616606084015273ffffffffffffffffffffffffffffffffffffffff8516608084015282810360a08401526141fe8185613f27565b9998505050505050505050565b60006080828403121561421d57600080fd5b6040516080810181811067ffffffffffffffff82111715614240576142406132e0565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015283608083015260c060a08301526142be60c0830184613f27565b98975050505050505050565b600080600080600060a086880312156142e257600080fd5b85356142ed816131cf565b945060208601356142fd816131cf565b93506040860135925060608601359150608086013561431b816131cf565b809150509295509295909350565b602081526000612fef6020830184613f2756fea2646970667358221220613ea70d653995768ec4f8289d1bb4adef56514876bc5211c5819ef51cd59f4264736f6c63430008110033",
  "devdoc": {
    "author": "Angle Core Team",
    "kind": "dev",
    "methods": {
      "changeAllowance(address[],address[],uint256[])": {
        "params": {
          "amounts": "Amounts to allow",
          "spenders": "Addresses to allow transfer",
          "tokens": "Addresses of the tokens to allow"
        }
      },
      "claimRewards(address,address[])": {
        "details": "If the caller wants to send the rewards to another account it first needs to call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`",
        "params": {
          "gaugeUser": "Address for which to fetch the rewards from the gauges",
          "liquidityGauges": "Gauges to claim on"
        }
      },
      "mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])": {
        "details": "With this function, users can specify paths to swap tokens to the desired token of their choice. Yet the protocol does not verify the payload given and cannot check that the swap performed by users actually gives the desired out token: in this case funds may be made accessible to anyone on this contract if the concerned users do not perform a sweep action on these tokens",
        "params": {
          "actions": "List of actions to be performed by the router (in order of execution)",
          "data": "Array of encoded data for each of the actions performed in this mixer. This is where the bytes-encoded parameters for a given action are stored",
          "paramsPermit": "Array of params `PermitType` used to do a 1 tx to approve the router on each token (can be done once by setting high approved amounts) which supports the `permit` standard. Users willing to interact with the contract with tokens that do not support permit should approve the contract for these tokens prior to interacting with it"
        }
      },
      "mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])": {
        "details": "In `paramsPermitVaultManager`, the signatures for granting approvals must be given first before the signatures to revoke approvalsThe router contract has been built to be safe to keep approvals as you cannot take an action on a vault you are not approved for, but people wary about their approvals may want to grant it before immediately revoking it, although this is just an option",
        "params": {
          "paramsPermitVaultManager": "Parameters to sign permit to give allowance to the router for a `VaultManager` contract"
        }
      }
    },
    "title": "AngleRouterCelo",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeAllowance(address[],address[],uint256[])": {
        "notice": "Changes allowances for different tokens"
      },
      "claimRewards(address,address[])": {
        "notice": "Wrapper built on top of the `_claimRewards` function. It allows to claim rewards for multiple gauges at once"
      },
      "core()": {
        "notice": "Core address handling access control"
      },
      "initializeRouter(address,address,address)": {
        "notice": "Deploys the router contract on a chain"
      },
      "mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])": {
        "notice": "Allows composable calls to different functions within the protocol"
      },
      "mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],uint8[],bytes[])": {
        "notice": "Wrapper built on top of the base `mixer` function to grant approval to a `VaultManager` contract before performing actions and then revoking this approval after these actions"
      },
      "oneInch()": {
        "notice": "Address of 1Inch router used for swaps"
      },
      "setCore(address)": {
        "notice": "Sets a new `core` contract"
      },
      "setRouter(address,uint8)": {
        "notice": "Sets a new router variable"
      },
      "uniswapV3Router()": {
        "notice": "Address of the router used for swaps"
      }
    },
    "notice": "Router contract built specifially for Angle use cases on Celo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/implementations/celo/AngleRouterCelo.sol:AngleRouterCelo",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/implementations/celo/AngleRouterCelo.sol:AngleRouterCelo",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1544,
        "contract": "contracts/implementations/celo/AngleRouterCelo.sol:AngleRouterCelo",
        "label": "core",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ICoreBorrow)3549"
      },
      {
        "astId": 1548,
        "contract": "contracts/implementations/celo/AngleRouterCelo.sol:AngleRouterCelo",
        "label": "uniswapV3Router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV3Router)3779"
      },
      {
        "astId": 1551,
        "contract": "contracts/implementations/celo/AngleRouterCelo.sol:AngleRouterCelo",
        "label": "oneInch",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1555,
        "contract": "contracts/implementations/celo/AngleRouterCelo.sol:AngleRouterCelo",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICoreBorrow)3549": {
        "encoding": "inplace",
        "label": "contract ICoreBorrow",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Router)3779": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Router",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}