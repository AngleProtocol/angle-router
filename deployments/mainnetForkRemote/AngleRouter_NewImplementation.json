{
  "address": "0x2ea80c5a8944cf1461167EC4FD9ffAA3C94AF4E5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConditions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReturnMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmountOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "setGovernor",
          "type": "bool"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stableMaster",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityGauge",
          "type": "address"
        }
      ],
      "name": "CollateralToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sanToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newLiquidityGauge",
          "type": "address"
        }
      ],
      "name": "SanTokenLiquidityGaugeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stableMaster",
          "type": "address"
        }
      ],
      "name": "StablecoinAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stableMaster",
          "type": "address"
        }
      ],
      "name": "StablecoinRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ANGLE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STETH",
      "outputs": [
        {
          "internalType": "contract IStETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VEANGLE",
      "outputs": [
        {
          "internalType": "contract IVeANGLE",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WSTETH",
      "outputs": [
        {
          "internalType": "contract IWStETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "contract IPoolManager[]",
          "name": "poolManagers",
          "type": "address[]"
        },
        {
          "internalType": "contract ILiquidityGauge[]",
          "name": "liquidityGauges",
          "type": "address[]"
        }
      ],
      "name": "addPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "internalType": "contract IStableMasterFront",
          "name": "stableMaster",
          "type": "address"
        }
      ],
      "name": "addStableMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollatAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "changeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "liquidityGauges",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "perpetualIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "perpetualManagers",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gaugeUser",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "liquidityGauges",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "perpetualIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "collaterals",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableMasterFront",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapPoolManagers",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "poolManager",
          "type": "address"
        },
        {
          "internalType": "contract IPerpetualManagerFrontWithClaim",
          "name": "perpetualManager",
          "type": "address"
        },
        {
          "internalType": "contract ISanToken",
          "name": "sanToken",
          "type": "address"
        },
        {
          "internalType": "contract ILiquidityGauge",
          "name": "gauge",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapStableMasters",
      "outputs": [
        {
          "internalType": "contract IStableMasterFront",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStableAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AngleRouter.PermitType[]",
          "name": "paramsPermit",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            }
          ],
          "internalType": "struct AngleRouter.TransferType[]",
          "name": "paramsTransfer",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "enum AngleRouter.SwapType",
              "name": "swapType",
              "type": "uint8"
            }
          ],
          "internalType": "struct AngleRouter.ParamsSwapType[]",
          "name": "paramsSwap",
          "type": "tuple[]"
        },
        {
          "internalType": "enum AngleRouter.ActionType[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "mixer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vaultManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AngleRouter.PermitVaultManagerType[]",
          "name": "paramsPermitVaultManager",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AngleRouter.PermitType[]",
          "name": "paramsPermit",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            }
          ],
          "internalType": "struct AngleRouter.TransferType[]",
          "name": "paramsTransfer",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "enum AngleRouter.SwapType",
              "name": "swapType",
              "type": "uint8"
            }
          ],
          "internalType": "struct AngleRouter.ParamsSwapType[]",
          "name": "paramsSwap",
          "type": "tuple[]"
        },
        {
          "internalType": "enum AngleRouter.ActionType[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "mixerVaultManagerPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneInch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oneInchAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "collaterals",
          "type": "address[]"
        },
        {
          "internalType": "contract IStableMasterFront[]",
          "name": "stableMasters",
          "type": "address[]"
        }
      ],
      "name": "removePairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "removeStableMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "setGovernor",
          "type": "bool"
        }
      ],
      "name": "setGovernorOrGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "collaterals",
          "type": "address[]"
        },
        {
          "internalType": "contract ILiquidityGauge[]",
          "name": "newLiquidityGauges",
          "type": "address[]"
        }
      ],
      "name": "setLiquidityGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xce6db58c55f59dce1dafa1654ef48167ea0b31a8e5f22ddefff56f94aca2f7c8",
  "receipt": {
    "to": null,
    "from": "0xb1533E797dF1D1ef1F4f00fcC3B3D2d5F42D49B0",
    "contractAddress": "0x2ea80c5a8944cf1461167EC4FD9ffAA3C94AF4E5",
    "transactionIndex": 0,
    "gasUsed": "5236412",
    "logsBloom": "0x
    "blockHash": "0x3eed4e9c0f925ee19e03a38f62ec5a9f4d0cc8b6e8e221b6bce3f7faf2fef960",
    "transactionHash": "0xce6db58c55f59dce1dafa1654ef48167ea0b31a8e5f22ddefff56f94aca2f7c8",
    "logs": [],
    "blockNumber": 14673073,
    "cumulativeGasUsed": "5236412",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4c90ce44fc32cf477fd74b3443d45d27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReturnMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setGovernor\",\"type\":\"bool\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableMaster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityGauge\",\"type\":\"address\"}],\"name\":\"CollateralToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sanToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityGauge\",\"type\":\"address\"}],\"name\":\"SanTokenLiquidityGaugeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableMaster\",\"type\":\"address\"}],\"name\":\"StablecoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableMaster\",\"type\":\"address\"}],\"name\":\"StablecoinRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANGLE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STETH\",\"outputs\":[{\"internalType\":\"contract IStETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VEANGLE\",\"outputs\":[{\"internalType\":\"contract IVeANGLE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WSTETH\",\"outputs\":[{\"internalType\":\"contract IWStETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"contract IPoolManager[]\",\"name\":\"poolManagers\",\"type\":\"address[]\"},{\"internalType\":\"contract ILiquidityGauge[]\",\"name\":\"liquidityGauges\",\"type\":\"address[]\"}],\"name\":\"addPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IStableMasterFront\",\"name\":\"stableMaster\",\"type\":\"address\"}],\"name\":\"addStableMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollatAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityGauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"perpetualManagers\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gaugeUser\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityGauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableMasterFront\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapPoolManagers\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"contract IPerpetualManagerFrontWithClaim\",\"name\":\"perpetualManager\",\"type\":\"address\"},{\"internalType\":\"contract ISanToken\",\"name\":\"sanToken\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityGauge\",\"name\":\"gauge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapStableMasters\",\"outputs\":[{\"internalType\":\"contract IStableMasterFront\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct AngleRouter.PermitType[]\",\"name\":\"paramsPermit\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct AngleRouter.TransferType[]\",\"name\":\"paramsTransfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"enum AngleRouter.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"}],\"internalType\":\"struct AngleRouter.ParamsSwapType[]\",\"name\":\"paramsSwap\",\"type\":\"tuple[]\"},{\"internalType\":\"enum AngleRouter.ActionType[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"mixer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct AngleRouter.PermitVaultManagerType[]\",\"name\":\"paramsPermitVaultManager\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct AngleRouter.PermitType[]\",\"name\":\"paramsPermit\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct AngleRouter.TransferType[]\",\"name\":\"paramsTransfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"enum AngleRouter.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"}],\"internalType\":\"struct AngleRouter.ParamsSwapType[]\",\"name\":\"paramsSwap\",\"type\":\"tuple[]\"},{\"internalType\":\"enum AngleRouter.ActionType[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"mixerVaultManagerPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oneInchAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"collaterals\",\"type\":\"address[]\"},{\"internalType\":\"contract IStableMasterFront[]\",\"name\":\"stableMasters\",\"type\":\"address[]\"}],\"name\":\"removePairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"removeStableMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setGovernor\",\"type\":\"bool\"}],\"name\":\"setGovernorOrGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"collaterals\",\"type\":\"address[]\"},{\"internalType\":\"contract ILiquidityGauge[]\",\"name\":\"newLiquidityGauges\",\"type\":\"address[]\"}],\"name\":\"setLiquidityGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"Interfaces were designed for both advanced users which know the addresses of the protocol's contract, but most of the time users which only know addresses of the stablecoins and collateral types of the protocol can perform the actions they want without needing to understand what's happening under the hood\",\"kind\":\"dev\",\"methods\":{\"addPairs(address[],address[],address[])\":{\"params\":{\"liquidityGauges\":\"Addresses of liquidity gauges contract associated to sanToken\",\"poolManagers\":\"Addresses of the `PoolManager` contracts associated to the pair (stablecoin,collateral)\",\"stablecoins\":\"Addresses of the stablecoins associated to the `StableMaster` of interest\"}},\"addStableMaster(address,address)\":{\"params\":{\"stableMaster\":\"Address of the new `StableMaster`\",\"stablecoin\":\"Address of the new stablecoin\"}},\"burn(address,uint256,uint256,address,address)\":{\"params\":{\"amount\":\"Amount of stablecoins to use for the burn\",\"collateral\":\"Collateral to mint from\",\"dest\":\"Address to send the collateral to\",\"minCollatAmount\":\"Minimum collateral amount received for the tx not to revert\",\"stablecoin\":\"Address of the stablecoin to mint\"}},\"changeAllowance(address[],address[],uint256[])\":{\"details\":\"Approvals are normally given in the `addGauges` method, in the initializer and in the internal functions to process swaps with Uniswap and 1Inch\",\"params\":{\"amounts\":\"Amounts to allow\",\"spenders\":\"Addresses to allow transfer\",\"tokens\":\"Addresses of the tokens to allow\"}},\"claimRewards(address,address[],uint256[],address[])\":{\"details\":\"If the caller wants to send the rewards to another account it first needs to call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\",\"params\":{\"liquidityGauges\":\"Contracts to claim for\",\"perpetualIDs\":\"Perpetual IDs to claim rewards for\",\"perpetualManagers\":\"`perpetualManager` contracts for every perp to claim\",\"user\":\"Address to which the contract should send the rewards from gauges (not perpetuals)\"}},\"claimRewards(address,address[],uint256[],address[],address[])\":{\"details\":\"If the caller wants to send the rewards to another account it first needs to call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\",\"params\":{\"collaterals\":\"Collateral contracts linked to the perpetualsIDs or `perpetualManager`\",\"gaugeUser\":\"Address for which to fetch the rewards from the gauges\",\"liquidityGauges\":\"Gauges to claim on\",\"perpetualIDs\":\"Perpetual IDs to claim rewards for\",\"stablecoins\":\"Stablecoin contracts linked to the perpetualsIDs\"}},\"mint(address,uint256,uint256,address,address)\":{\"params\":{\"amount\":\"Amount of collateral to use for the mint\",\"collateral\":\"Collateral to mint from\",\"minStableAmount\":\"Minimum stablecoin minted for the tx not to revert\",\"stablecoin\":\"Address of the stablecoin to mint\",\"user\":\"Address to send the stablecoins to\"}},\"mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])\":{\"details\":\"This function first fills the router balances via transfers and swaps. It then proceeds with each action in the order at which they are givenWith this function, users can specify paths to swap tokens to the desired token of their choice. Yet the protocol does not verify the payload given and cannot check that the swap performed by users actually gives the desired out token: in this case funds will be lost by the userFor some actions (`mint`, `deposit`, `openPerpetual`, `addToPerpetual`, `withdraw`), users are required to give a proportion of the amount of token they have brought to the router within the transaction (through a direct transfer or a swap) they want to use for the operation. If you want to use all the USDC you have brought (through an ETH -> USDC) swap to mint stablecoins for instance, you should use `BASE_PARAMS` as a proportion.The proportion that is specified for an action is a proportion of what is left. If you want to use 50% of your USDC for a `mint` and the rest for an `openPerpetual`, proportion used for the `mint` should be 50% (that is `BASE_PARAMS/2`), and proportion for the `openPerpetual` should be all that is left that is 100% (= `BASE_PARAMS`).For each action here, make sure to read the documentation of the associated internal function to know how to correctly specify parameters\",\"params\":{\"actions\":\"List of actions to be performed by the router (in order of execution): make sure to read for each action the associated internal function\",\"data\":\"Array of encoded data for each of the actions performed in this mixer. This is where the bytes-encoded parameters for a given action are stored\",\"paramsPermit\":\"Array of params `PermitType` used to do a 1 tx to approve the router on each token (can be done once by setting high approved amounts) which supports the `permit` standard. Users willing to interact with the contract with tokens that do not support permit should approve the contract for these tokens prior to interacting with it\",\"paramsSwap\":\"Array of params `ParamsSwapType` used to swap tokens\",\"paramsTransfer\":\"Array of params `TransferType` used to transfer tokens to the router\"}},\"mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])\":{\"details\":\"In `paramsPermitVaultManager`, the signatures for granting approvals must be given first before the signatures to revoke approvals\",\"params\":{\"paramsPermitVaultManager\":\"Parameters to sign permit to give allowance to the router for a `VaultManager` contract\"}},\"recoverERC20(address,address,uint256)\":{\"details\":\"If tokens are mistakenly sent to this contract, any address can take advantage of the `mixer` function below to get the funds back\",\"params\":{\"to\":\"Address to give tokens to\",\"tokenAddress\":\"Address of the token to transfer\",\"tokenAmount\":\"Amount of tokens to transfer\"}},\"removePairs(address[],address[],address[])\":{\"details\":\"In the lists, if a `stableMaster` address is null in `stableMasters` then this means that the associated `stablecoins` address (at the same index) should be non null\",\"params\":{\"collaterals\":\"Addresses of the collaterals\",\"stableMasters\":\"List of the associated `StableMaster` contracts\",\"stablecoins\":\"Addresses of the stablecoins\"}},\"removeStableMaster(address)\":{\"details\":\"Before calling this function, governor or guardian should remove first all pairs from the `mapPoolManagers[stableMaster]`. It is assumed that the governor or guardian calling this function will act correctly here, it indeed avoids storing a list of all pairs for each `StableMaster`\",\"params\":{\"stablecoin\":\"Address of the associated stablecoin\"}},\"setGovernorOrGuardian(address,bool)\":{\"details\":\"There can only be one guardian and one governor address in the router and both need to be different\",\"params\":{\"admin\":\"New guardian or guardian address\",\"setGovernor\":\"Whether to set Governor if true, or Guardian if false\"}},\"setLiquidityGauges(address[],address[],address[])\":{\"details\":\"If `newLiquidityGauge` is null, this means that there is no liquidity gauge for this pairThis function could be used to simply revoke the approval to a liquidity gauge\",\"params\":{\"collaterals\":\"Addresses of the collaterals\",\"newLiquidityGauges\":\"Addresses of the new liquidity gauges contract\",\"stablecoins\":\"Addresses of the stablecoins\"}}},\"title\":\"Angle Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE_PARAMS()\":{\"notice\":\"Base used for params\"},\"STETH()\":{\"notice\":\"StETH contract\"},\"WSTETH()\":{\"notice\":\"Wrapped StETH contract\"},\"addPairs(address[],address[],address[])\":{\"notice\":\"Adds new collateral types to specific stablecoins\"},\"addStableMaster(address,address)\":{\"notice\":\"Adds a new `StableMaster`\"},\"burn(address,uint256,uint256,address,address)\":{\"notice\":\"Wrapper built on top of the `_burn` method to burn stablecoins\"},\"changeAllowance(address[],address[],uint256[])\":{\"notice\":\"Change allowance for a contract.\"},\"claimRewards(address,address[],uint256[],address[])\":{\"notice\":\"Wrapper n\\u00b02 (a little more gas efficient than n\\u00b01) built on top of the _claimRewards function Allows to claim rewards for multiple gauges and perpetuals at once\"},\"claimRewards(address,address[],uint256[],address[],address[])\":{\"notice\":\"Wrapper n\\u00b01 built on top of the _claimRewards function Allows to claim rewards for multiple gauges and perpetuals at once\"},\"governor()\":{\"notice\":\"Governor address\"},\"guardian()\":{\"notice\":\"Guardian address\"},\"mapPoolManagers(address,address)\":{\"notice\":\"Maps a `StableMaster` to a mapping of collateral token to its counterpart `PoolManager`\"},\"mapStableMasters(address)\":{\"notice\":\"Maps an agToken to its counterpart `StableMaster`\"},\"mint(address,uint256,uint256,address,address)\":{\"notice\":\"Wrapper built on top of the `_mint` method to mint stablecoins\"},\"mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])\":{\"notice\":\"Allows composable calls to different functions within the protocol\"},\"mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])\":{\"notice\":\"Wrapper built on top of the mixer function to grant approval to a VaultManager contract before performing actions and then revoking this approval after these actions\"},\"oneInch()\":{\"notice\":\"Address of 1Inch router used for swaps\"},\"oneInchAllowedToken(address)\":{\"notice\":\"Whether the token was already approved on 1Inch\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Supports recovering any tokens as the router does not own any other tokens than the one mistakenly sent\"},\"removePairs(address[],address[],address[])\":{\"notice\":\"Removes collateral types from specific `StableMaster` contracts using the address of the associated stablecoins\"},\"removeStableMaster(address)\":{\"notice\":\"Removes a `StableMaster`\"},\"setGovernorOrGuardian(address,bool)\":{\"notice\":\"Changes the guardian or the governor address\"},\"setLiquidityGauges(address[],address[],address[])\":{\"notice\":\"Sets new `liquidityGauge` contract for the associated sanTokens\"},\"uniAllowedToken(address)\":{\"notice\":\"Whether the token was already approved on Uniswap router\"},\"uniswapV3Router()\":{\"notice\":\"Address of the router used for swaps\"}},\"notice\":\"The `AngleRouter` contract facilitates interactions for users with the protocol. It was built to reduce the number of approvals required to users and the number of transactions needed to perform some complex actions: like deposit and stake in just one transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AngleRouter01.sol\":\"AngleRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AngleRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFeeDistributor.sol\\\";\\nimport \\\"./interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"./interfaces/ISanToken.sol\\\";\\nimport \\\"./interfaces/IStableMaster.sol\\\";\\nimport \\\"./interfaces/IStableMasterFront.sol\\\";\\nimport \\\"./interfaces/IVeANGLE.sol\\\";\\nimport \\\"./interfaces/external/IWETH9.sol\\\";\\nimport \\\"./interfaces/external/uniswap/IUniswapRouter.sol\\\";\\nimport \\\"./interfaces/IVaultManager.sol\\\";\\nimport \\\"./interfaces/external/lido/ISteth.sol\\\";\\nimport \\\"./interfaces/external/lido/IWStETH.sol\\\";\\n\\n/// @title Angle Router\\n/// @author Angle Core Team\\n/// @notice The `AngleRouter` contract facilitates interactions for users with the protocol. It was built to reduce the number\\n/// of approvals required to users and the number of transactions needed to perform some complex actions: like deposit and stake\\n/// in just one transaction\\n/// @dev Interfaces were designed for both advanced users which know the addresses of the protocol's contract, but most of the time\\n/// users which only know addresses of the stablecoins and collateral types of the protocol can perform the actions they want without\\n/// needing to understand what's happening under the hood\\ncontract AngleRouter is Initializable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n    /// @notice Base used for params\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    /// @notice Base used for params\\n    uint256 private constant _MAX_TOKENS = 10;\\n    // @notice Wrapped ETH contract\\n    IWETH9 public constant WETH9 = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    // @notice ANGLE contract\\n    IERC20 public constant ANGLE = IERC20(0x31429d1856aD1377A8A0079410B297e1a9e214c2);\\n    // @notice veANGLE contract\\n    IVeANGLE public constant VEANGLE = IVeANGLE(0x0C462Dbb9EC8cD1630f1728B2CFD2769d09f0dd5);\\n\\n    // =========================== Structs and Enums ===============================\\n\\n    /// @notice Action types\\n    enum ActionType {\\n        claimRewards,\\n        claimWeeklyInterest,\\n        gaugeDeposit,\\n        withdraw,\\n        mint,\\n        deposit,\\n        openPerpetual,\\n        addToPerpetual,\\n        veANGLEDeposit,\\n        borrower\\n    }\\n\\n    /// @notice All possible swaps\\n    enum SwapType {\\n        UniswapV3,\\n        oneINCH,\\n        WrapStETH,\\n        None\\n    }\\n\\n    /// @notice Params for swaps\\n    /// @param inToken Token to swap\\n    /// @param collateral Token to swap for\\n    /// @param amountIn Amount of token to sell\\n    /// @param minAmountOut Minimum amount of collateral to receive for the swap to not revert\\n    /// @param args Either the path for Uniswap or the payload for 1Inch\\n    /// @param swapType Which swap route to take\\n    struct ParamsSwapType {\\n        IERC20 inToken;\\n        address collateral;\\n        uint256 amountIn;\\n        uint256 minAmountOut;\\n        bytes args;\\n        SwapType swapType;\\n    }\\n\\n    /// @notice Params for direct collateral transfer\\n    /// @param inToken Token to transfer\\n    /// @param amountIn Amount of token transfer\\n    struct TransferType {\\n        IERC20 inToken;\\n        uint256 amountIn;\\n    }\\n\\n    /// @notice References to the contracts associated to a collateral for a stablecoin\\n    struct Pairs {\\n        IPoolManager poolManager;\\n        IPerpetualManagerFrontWithClaim perpetualManager;\\n        ISanToken sanToken;\\n        ILiquidityGauge gauge;\\n    }\\n\\n    /// @notice Data needed to get permits\\n    struct PermitType {\\n        address token;\\n        address owner;\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // =============================== Events ======================================\\n\\n    event AdminChanged(address indexed admin, bool setGovernor);\\n    event StablecoinAdded(address indexed stableMaster);\\n    event StablecoinRemoved(address indexed stableMaster);\\n    event CollateralToggled(address indexed stableMaster, address indexed poolManager, address indexed liquidityGauge);\\n    event SanTokenLiquidityGaugeUpdated(address indexed sanToken, address indexed newLiquidityGauge);\\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n\\n    // =============================== Mappings ====================================\\n\\n    /// @notice Maps an agToken to its counterpart `StableMaster`\\n    mapping(IERC20 => IStableMasterFront) public mapStableMasters;\\n    /// @notice Maps a `StableMaster` to a mapping of collateral token to its counterpart `PoolManager`\\n    mapping(IStableMasterFront => mapping(IERC20 => Pairs)) public mapPoolManagers;\\n    /// @notice Whether the token was already approved on Uniswap router\\n    mapping(IERC20 => bool) public uniAllowedToken;\\n    /// @notice Whether the token was already approved on 1Inch\\n    mapping(IERC20 => bool) public oneInchAllowedToken;\\n\\n    // =============================== References ==================================\\n\\n    /// @notice Governor address\\n    address public governor;\\n    /// @notice Guardian address\\n    address public guardian;\\n    /// @notice Address of the router used for swaps\\n    IUniswapV3Router public uniswapV3Router;\\n    /// @notice Address of 1Inch router used for swaps\\n    address public oneInch;\\n\\n    uint256[50] private __gap;\\n\\n    struct PermitVaultManagerType {\\n        address vaultManager;\\n        address owner;\\n        bool approved;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// @notice StETH contract\\n    IStETH public constant STETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n    /// @notice Wrapped StETH contract\\n    IWStETH public constant WSTETH = IWStETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\\n\\n    // ============================= Error Messages ================================\\n\\n    error AlreadyAdded();\\n    error IncompatibleLengths();\\n    error InvalidAddress();\\n    error InvalidCall();\\n    error InvalidConditions();\\n    error InvalidReturnMessage();\\n    error InvalidToken();\\n    error NotApprovedOrOwner();\\n    error NotGovernorOrGuardian();\\n    error TooSmallAmountOut();\\n    error ZeroAddress();\\n\\n    constructor() initializer {}\\n\\n    // Removed the `initialize` function in this implementation since it has already been called and can not be called again\\n\\n    // ============================== Modifiers ====================================\\n\\n    /// @notice Checks to see if it is the `governor` or `guardian` calling this contract\\n    /// @dev There is no Access Control here, because it can be handled cheaply through this modifier\\n    /// @dev In this contract, the `governor` and the `guardian` address have exactly similar rights\\n    modifier onlyGovernorOrGuardian() {\\n        if (msg.sender != governor && msg.sender != guardian) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    // =========================== Governance utilities ============================\\n\\n    /// @notice Changes the guardian or the governor address\\n    /// @param admin New guardian or guardian address\\n    /// @param setGovernor Whether to set Governor if true, or Guardian if false\\n    /// @dev There can only be one guardian and one governor address in the router\\n    /// and both need to be different\\n    function setGovernorOrGuardian(address admin, bool setGovernor) external onlyGovernorOrGuardian {\\n        if (admin == address(0)) revert ZeroAddress();\\n        if (guardian == admin || governor == admin) revert InvalidAddress();\\n        if (setGovernor) governor = admin;\\n        else guardian = admin;\\n        emit AdminChanged(admin, setGovernor);\\n    }\\n\\n    /// @notice Adds a new `StableMaster`\\n    /// @param stablecoin Address of the new stablecoin\\n    /// @param stableMaster Address of the new `StableMaster`\\n    function addStableMaster(IERC20 stablecoin, IStableMasterFront stableMaster) external onlyGovernorOrGuardian {\\n        // No need to check if the `stableMaster` address is a zero address as otherwise the call to `stableMaster.agToken()`\\n        // would revert\\n        if (address(stablecoin) == address(0)) revert ZeroAddress();\\n        if (address(mapStableMasters[stablecoin]) != address(0)) revert AlreadyAdded();\\n        if (stableMaster.agToken() != address(stablecoin)) revert InvalidToken();\\n        mapStableMasters[stablecoin] = stableMaster;\\n        emit StablecoinAdded(address(stableMaster));\\n    }\\n\\n    /// @notice Removes a `StableMaster`\\n    /// @param stablecoin Address of the associated stablecoin\\n    /// @dev Before calling this function, governor or guardian should remove first all pairs\\n    /// from the `mapPoolManagers[stableMaster]`. It is assumed that the governor or guardian calling this function\\n    /// will act correctly here, it indeed avoids storing a list of all pairs for each `StableMaster`\\n    function removeStableMaster(IERC20 stablecoin) external onlyGovernorOrGuardian {\\n        IStableMasterFront stableMaster = mapStableMasters[stablecoin];\\n        delete mapStableMasters[stablecoin];\\n        emit StablecoinRemoved(address(stableMaster));\\n    }\\n\\n    /// @notice Adds new collateral types to specific stablecoins\\n    /// @param stablecoins Addresses of the stablecoins associated to the `StableMaster` of interest\\n    /// @param poolManagers Addresses of the `PoolManager` contracts associated to the pair (stablecoin,collateral)\\n    /// @param liquidityGauges Addresses of liquidity gauges contract associated to sanToken\\n    function addPairs(\\n        IERC20[] calldata stablecoins,\\n        IPoolManager[] calldata poolManagers,\\n        ILiquidityGauge[] calldata liquidityGauges\\n    ) external onlyGovernorOrGuardian {\\n        if (poolManagers.length != stablecoins.length || liquidityGauges.length != stablecoins.length)\\n            revert IncompatibleLengths();\\n        for (uint256 i = 0; i < stablecoins.length; i++) {\\n            IStableMasterFront stableMaster = mapStableMasters[stablecoins[i]];\\n            _addPair(stableMaster, poolManagers[i], liquidityGauges[i]);\\n        }\\n    }\\n\\n    /// @notice Removes collateral types from specific `StableMaster` contracts using the address\\n    /// of the associated stablecoins\\n    /// @param stablecoins Addresses of the stablecoins\\n    /// @param collaterals Addresses of the collaterals\\n    /// @param stableMasters List of the associated `StableMaster` contracts\\n    /// @dev In the lists, if a `stableMaster` address is null in `stableMasters` then this means that the associated\\n    /// `stablecoins` address (at the same index) should be non null\\n    function removePairs(\\n        IERC20[] calldata stablecoins,\\n        IERC20[] calldata collaterals,\\n        IStableMasterFront[] calldata stableMasters\\n    ) external onlyGovernorOrGuardian {\\n        if (collaterals.length != stablecoins.length || stableMasters.length != collaterals.length)\\n            revert IncompatibleLengths();\\n        Pairs memory pairs;\\n        IStableMasterFront stableMaster;\\n        for (uint256 i = 0; i < stablecoins.length; i++) {\\n            if (address(stableMasters[i]) == address(0))\\n                // In this case `collaterals[i]` is a collateral address\\n                (stableMaster, pairs) = _getInternalContracts(stablecoins[i], collaterals[i]);\\n            else {\\n                // In this case `collaterals[i]` is a `PoolManager` address\\n                stableMaster = stableMasters[i];\\n                pairs = mapPoolManagers[stableMaster][collaterals[i]];\\n            }\\n            delete mapPoolManagers[stableMaster][collaterals[i]];\\n            _changeAllowance(collaterals[i], address(stableMaster), 0);\\n            _changeAllowance(collaterals[i], address(pairs.perpetualManager), 0);\\n            if (address(pairs.gauge) != address(0)) pairs.sanToken.approve(address(pairs.gauge), 0);\\n            emit CollateralToggled(address(stableMaster), address(pairs.poolManager), address(pairs.gauge));\\n        }\\n    }\\n\\n    /// @notice Sets new `liquidityGauge` contract for the associated sanTokens\\n    /// @param stablecoins Addresses of the stablecoins\\n    /// @param collaterals Addresses of the collaterals\\n    /// @param newLiquidityGauges Addresses of the new liquidity gauges contract\\n    /// @dev If `newLiquidityGauge` is null, this means that there is no liquidity gauge for this pair\\n    /// @dev This function could be used to simply revoke the approval to a liquidity gauge\\n    function setLiquidityGauges(\\n        IERC20[] calldata stablecoins,\\n        IERC20[] calldata collaterals,\\n        ILiquidityGauge[] calldata newLiquidityGauges\\n    ) external onlyGovernorOrGuardian {\\n        if (collaterals.length != stablecoins.length || newLiquidityGauges.length != stablecoins.length)\\n            revert IncompatibleLengths();\\n        for (uint256 i = 0; i < stablecoins.length; i++) {\\n            IStableMasterFront stableMaster = mapStableMasters[stablecoins[i]];\\n            Pairs storage pairs = mapPoolManagers[stableMaster][collaterals[i]];\\n            ILiquidityGauge gauge = pairs.gauge;\\n            ISanToken sanToken = pairs.sanToken;\\n            if (address(stableMaster) == address(0) || address(pairs.poolManager) == address(0)) revert ZeroAddress();\\n            pairs.gauge = newLiquidityGauges[i];\\n            if (address(gauge) != address(0)) {\\n                sanToken.approve(address(gauge), 0);\\n            }\\n            if (address(newLiquidityGauges[i]) != address(0)) {\\n                // Checking compatibility of the staking token: it should be the sanToken\\n                if (address(newLiquidityGauges[i].staking_token()) != address(sanToken)) revert InvalidToken();\\n                sanToken.approve(address(newLiquidityGauges[i]), type(uint256).max);\\n            }\\n            emit SanTokenLiquidityGaugeUpdated(address(sanToken), address(newLiquidityGauges[i]));\\n        }\\n    }\\n\\n    /// @notice Change allowance for a contract.\\n    /// @param tokens Addresses of the tokens to allow\\n    /// @param spenders Addresses to allow transfer\\n    /// @param amounts Amounts to allow\\n    /// @dev Approvals are normally given in the `addGauges` method, in the initializer and in\\n    /// the internal functions to process swaps with Uniswap and 1Inch\\n    function changeAllowance(\\n        IERC20[] calldata tokens,\\n        address[] calldata spenders,\\n        uint256[] calldata amounts\\n    ) external onlyGovernorOrGuardian {\\n        if (tokens.length != spenders.length || tokens.length != amounts.length) revert IncompatibleLengths();\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _changeAllowance(tokens[i], spenders[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Supports recovering any tokens as the router does not own any other tokens than\\n    /// the one mistakenly sent\\n    /// @param tokenAddress Address of the token to transfer\\n    /// @param to Address to give tokens to\\n    /// @param tokenAmount Amount of tokens to transfer\\n    /// @dev If tokens are mistakenly sent to this contract, any address can take advantage of the `mixer` function\\n    /// below to get the funds back\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 tokenAmount\\n    ) external onlyGovernorOrGuardian {\\n        IERC20(tokenAddress).safeTransfer(to, tokenAmount);\\n        emit Recovered(tokenAddress, to, tokenAmount);\\n    }\\n\\n    // =========================== Router Functionalities =========================\\n\\n    /// @notice Wrapper n\\u00b01 built on top of the _claimRewards function\\n    /// Allows to claim rewards for multiple gauges and perpetuals at once\\n    /// @param gaugeUser Address for which to fetch the rewards from the gauges\\n    /// @param liquidityGauges Gauges to claim on\\n    /// @param perpetualIDs Perpetual IDs to claim rewards for\\n    /// @param stablecoins Stablecoin contracts linked to the perpetualsIDs\\n    /// @param collaterals Collateral contracts linked to the perpetualsIDs or `perpetualManager`\\n    /// @dev If the caller wants to send the rewards to another account it first needs to\\n    /// call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\\n    function claimRewards(\\n        address gaugeUser,\\n        address[] memory liquidityGauges,\\n        uint256[] memory perpetualIDs,\\n        address[] memory stablecoins,\\n        address[] memory collaterals\\n    ) external {\\n        _claimRewards(gaugeUser, liquidityGauges, perpetualIDs, false, stablecoins, collaterals);\\n    }\\n\\n    /// @notice Wrapper n\\u00b02 (a little more gas efficient than n\\u00b01) built on top of the _claimRewards function\\n    /// Allows to claim rewards for multiple gauges and perpetuals at once\\n    /// @param user Address to which the contract should send the rewards from gauges (not perpetuals)\\n    /// @param liquidityGauges Contracts to claim for\\n    /// @param perpetualIDs Perpetual IDs to claim rewards for\\n    /// @param perpetualManagers `perpetualManager` contracts for every perp to claim\\n    /// @dev If the caller wants to send the rewards to another account it first needs to\\n    /// call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\\n    function claimRewards(\\n        address user,\\n        address[] memory liquidityGauges,\\n        uint256[] memory perpetualIDs,\\n        address[] memory perpetualManagers\\n    ) external {\\n        _claimRewards(user, liquidityGauges, perpetualIDs, true, new address[](perpetualIDs.length), perpetualManagers);\\n    }\\n\\n    /// @notice Wrapper built on top of the `_mint` method to mint stablecoins\\n    /// @param user Address to send the stablecoins to\\n    /// @param amount Amount of collateral to use for the mint\\n    /// @param minStableAmount Minimum stablecoin minted for the tx not to revert\\n    /// @param stablecoin Address of the stablecoin to mint\\n    /// @param collateral Collateral to mint from\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 minStableAmount,\\n        address stablecoin,\\n        address collateral\\n    ) external {\\n        IERC20(collateral).safeTransferFrom(msg.sender, address(this), amount);\\n        _mint(user, amount, minStableAmount, false, stablecoin, collateral, IPoolManager(address(0)));\\n    }\\n\\n    /// @notice Wrapper built on top of the `_burn` method to burn stablecoins\\n    /// @param dest Address to send the collateral to\\n    /// @param amount Amount of stablecoins to use for the burn\\n    /// @param minCollatAmount Minimum collateral amount received for the tx not to revert\\n    /// @param stablecoin Address of the stablecoin to mint\\n    /// @param collateral Collateral to mint from\\n    function burn(\\n        address dest,\\n        uint256 amount,\\n        uint256 minCollatAmount,\\n        address stablecoin,\\n        address collateral\\n    ) external {\\n        _burn(dest, amount, minCollatAmount, false, stablecoin, collateral, IPoolManager(address(0)));\\n    }\\n\\n    /// @notice Allows composable calls to different functions within the protocol\\n    /// @param paramsPermit Array of params `PermitType` used to do a 1 tx to approve the router on each token (can be done once by\\n    /// setting high approved amounts) which supports the `permit` standard. Users willing to interact with the contract\\n    /// with tokens that do not support permit should approve the contract for these tokens prior to interacting with it\\n    /// @param paramsTransfer Array of params `TransferType` used to transfer tokens to the router\\n    /// @param paramsSwap Array of params `ParamsSwapType` used to swap tokens\\n    /// @param actions List of actions to be performed by the router (in order of execution): make sure to read for each action the\\n    /// associated internal function\\n    /// @param data Array of encoded data for each of the actions performed in this mixer. This is where the bytes-encoded parameters\\n    /// for a given action are stored\\n    /// @dev This function first fills the router balances via transfers and swaps. It then proceeds with each\\n    /// action in the order at which they are given\\n    /// @dev With this function, users can specify paths to swap tokens to the desired token of their choice. Yet the protocol\\n    /// does not verify the payload given and cannot check that the swap performed by users actually gives the desired\\n    /// out token: in this case funds will be lost by the user\\n    /// @dev For some actions (`mint`, `deposit`, `openPerpetual`, `addToPerpetual`, `withdraw`), users are\\n    /// required to give a proportion of the amount of token they have brought to the router within the transaction (through\\n    /// a direct transfer or a swap) they want to use for the operation. If you want to use all the USDC you have brought (through an ETH -> USDC)\\n    /// swap to mint stablecoins for instance, you should use `BASE_PARAMS` as a proportion.\\n    /// @dev The proportion that is specified for an action is a proportion of what is left. If you want to use 50% of your USDC for a `mint`\\n    /// and the rest for an `openPerpetual`, proportion used for the `mint` should be 50% (that is `BASE_PARAMS/2`), and proportion\\n    /// for the `openPerpetual` should be all that is left that is 100% (= `BASE_PARAMS`).\\n    /// @dev For each action here, make sure to read the documentation of the associated internal function to know how to correctly\\n    /// specify parameters\\n    function mixer(\\n        PermitType[] memory paramsPermit,\\n        TransferType[] memory paramsTransfer,\\n        ParamsSwapType[] memory paramsSwap,\\n        ActionType[] memory actions,\\n        bytes[] calldata data\\n    ) public payable {\\n        // Do all the permits once for all: if all tokens have already been approved, there's no need for this step\\n        for (uint256 i = 0; i < paramsPermit.length; i++) {\\n            IERC20PermitUpgradeable(paramsPermit[i].token).permit(\\n                paramsPermit[i].owner,\\n                address(this),\\n                paramsPermit[i].value,\\n                paramsPermit[i].deadline,\\n                paramsPermit[i].v,\\n                paramsPermit[i].r,\\n                paramsPermit[i].s\\n            );\\n        }\\n\\n        // Then, do all the transfer to load all needed funds into the router\\n        // This function is limited to 10 different assets to be spent on the protocol (agTokens, collaterals, sanTokens)\\n        address[_MAX_TOKENS] memory listTokens;\\n        uint256[_MAX_TOKENS] memory balanceTokens;\\n\\n        for (uint256 i = 0; i < paramsTransfer.length; i++) {\\n            paramsTransfer[i].inToken.safeTransferFrom(msg.sender, address(this), paramsTransfer[i].amountIn);\\n            _addToList(listTokens, balanceTokens, address(paramsTransfer[i].inToken), paramsTransfer[i].amountIn);\\n        }\\n\\n        for (uint256 i = 0; i < paramsSwap.length; i++) {\\n            // Caution here: if the args are not set such that end token is the params `paramsSwap[i].collateral`,\\n            // then the funds will be lost, and any user could take advantage of it to fetch the funds\\n            uint256 amountOut = _transferAndSwap(\\n                paramsSwap[i].inToken,\\n                paramsSwap[i].amountIn,\\n                paramsSwap[i].minAmountOut,\\n                paramsSwap[i].swapType,\\n                paramsSwap[i].args\\n            );\\n            _addToList(listTokens, balanceTokens, address(paramsSwap[i].collateral), amountOut);\\n        }\\n\\n        // Performing actions one after the others\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            if (actions[i] == ActionType.claimRewards) {\\n                (\\n                    address user,\\n                    uint256 proportionToBeTransferred,\\n                    address[] memory claimLiquidityGauges,\\n                    uint256[] memory claimPerpetualIDs,\\n                    bool addressProcessed,\\n                    address[] memory stablecoins,\\n                    address[] memory collateralsOrPerpetualManagers\\n                ) = abi.decode(data[i], (address, uint256, address[], uint256[], bool, address[], address[]));\\n\\n                uint256 amount = ANGLE.balanceOf(user);\\n\\n                _claimRewards(\\n                    user,\\n                    claimLiquidityGauges,\\n                    claimPerpetualIDs,\\n                    addressProcessed,\\n                    stablecoins,\\n                    collateralsOrPerpetualManagers\\n                );\\n                if (proportionToBeTransferred > 0) {\\n                    amount = ANGLE.balanceOf(user) - amount;\\n                    amount = (amount * proportionToBeTransferred) / BASE_PARAMS;\\n                    ANGLE.safeTransferFrom(msg.sender, address(this), amount);\\n                    _addToList(listTokens, balanceTokens, address(ANGLE), amount);\\n                }\\n            } else if (actions[i] == ActionType.claimWeeklyInterest) {\\n                (address user, address feeDistributor, bool letInContract) = abi.decode(\\n                    data[i],\\n                    (address, address, bool)\\n                );\\n\\n                (uint256 amount, IERC20 token) = _claimWeeklyInterest(\\n                    user,\\n                    IFeeDistributorFront(feeDistributor),\\n                    letInContract\\n                );\\n                if (address(token) != address(0)) _addToList(listTokens, balanceTokens, address(token), amount);\\n                // In all the following action, the `amount` variable represents the proportion of the\\n                // balance that needs to be used for this action (in `BASE_PARAMS`)\\n                // We name it `amount` here to save some new variable declaration costs\\n            } else if (actions[i] == ActionType.veANGLEDeposit) {\\n                (address user, uint256 amount) = abi.decode(data[i], (address, uint256));\\n\\n                amount = _computeProportion(amount, listTokens, balanceTokens, address(ANGLE));\\n                _depositOnLocker(user, amount);\\n            } else if (actions[i] == ActionType.gaugeDeposit) {\\n                (address user, uint256 amount, address stakedToken, address gauge, bool shouldClaimRewards) = abi\\n                    .decode(data[i], (address, uint256, address, address, bool));\\n\\n                amount = _computeProportion(amount, listTokens, balanceTokens, stakedToken);\\n                _gaugeDeposit(user, amount, ILiquidityGauge(gauge), shouldClaimRewards);\\n            } else if (actions[i] == ActionType.deposit) {\\n                (\\n                    address user,\\n                    uint256 amount,\\n                    bool addressProcessed,\\n                    address stablecoinOrStableMaster,\\n                    address collateral,\\n                    address poolManager,\\n                    address sanToken\\n                ) = abi.decode(data[i], (address, uint256, bool, address, address, address, address));\\n\\n                amount = _computeProportion(amount, listTokens, balanceTokens, collateral);\\n                (amount, sanToken) = _deposit(\\n                    user,\\n                    amount,\\n                    addressProcessed,\\n                    stablecoinOrStableMaster,\\n                    collateral,\\n                    IPoolManager(poolManager),\\n                    ISanToken(sanToken)\\n                );\\n\\n                if (amount > 0) _addToList(listTokens, balanceTokens, sanToken, amount);\\n            } else if (actions[i] == ActionType.withdraw) {\\n                (\\n                    uint256 amount,\\n                    bool addressProcessed,\\n                    address stablecoinOrStableMaster,\\n                    address collateralOrPoolManager,\\n                    address sanToken\\n                ) = abi.decode(data[i], (uint256, bool, address, address, address));\\n\\n                amount = _computeProportion(amount, listTokens, balanceTokens, sanToken);\\n                // Reusing the `collateralOrPoolManager` variable to save some variable declarations\\n                (amount, collateralOrPoolManager) = _withdraw(\\n                    amount,\\n                    addressProcessed,\\n                    stablecoinOrStableMaster,\\n                    collateralOrPoolManager\\n                );\\n                _addToList(listTokens, balanceTokens, collateralOrPoolManager, amount);\\n            } else if (actions[i] == ActionType.mint) {\\n                (\\n                    address user,\\n                    uint256 amount,\\n                    uint256 minStableAmount,\\n                    bool addressProcessed,\\n                    address stablecoinOrStableMaster,\\n                    address collateral,\\n                    address poolManager\\n                ) = abi.decode(data[i], (address, uint256, uint256, bool, address, address, address));\\n\\n                amount = _computeProportion(amount, listTokens, balanceTokens, collateral);\\n                _mint(\\n                    user,\\n                    amount,\\n                    minStableAmount,\\n                    addressProcessed,\\n                    stablecoinOrStableMaster,\\n                    collateral,\\n                    IPoolManager(poolManager)\\n                );\\n            } else if (actions[i] == ActionType.openPerpetual) {\\n                (\\n                    address user,\\n                    uint256 amount,\\n                    uint256 amountCommitted,\\n                    uint256 extremeRateOracle,\\n                    uint256 minNetMargin,\\n                    bool addressProcessed,\\n                    address stablecoinOrPerpetualManager,\\n                    address collateral\\n                ) = abi.decode(data[i], (address, uint256, uint256, uint256, uint256, bool, address, address));\\n\\n                amount = _computeProportion(amount, listTokens, balanceTokens, collateral);\\n\\n                _openPerpetual(\\n                    user,\\n                    amount,\\n                    amountCommitted,\\n                    extremeRateOracle,\\n                    minNetMargin,\\n                    addressProcessed,\\n                    stablecoinOrPerpetualManager,\\n                    collateral\\n                );\\n            } else if (actions[i] == ActionType.addToPerpetual) {\\n                (\\n                    uint256 amount,\\n                    uint256 perpetualID,\\n                    bool addressProcessed,\\n                    address stablecoinOrPerpetualManager,\\n                    address collateral\\n                ) = abi.decode(data[i], (uint256, uint256, bool, address, address));\\n\\n                amount = _computeProportion(amount, listTokens, balanceTokens, collateral);\\n                _addToPerpetual(amount, perpetualID, addressProcessed, stablecoinOrPerpetualManager, collateral);\\n            } else if (actions[i] == ActionType.borrower) {\\n                (\\n                    address collateral,\\n                    address stablecoin,\\n                    address vaultManager,\\n                    address to,\\n                    address who,\\n                    ActionBorrowType[] memory actionsBorrow,\\n                    bytes[] memory dataBorrow,\\n                    bytes memory repayData\\n                ) = abi.decode(\\n                        data[i],\\n                        (address, address, address, address, address, ActionBorrowType[], bytes[], bytes)\\n                    );\\n                _parseVaultIDs(actionsBorrow, dataBorrow, vaultManager);\\n                _changeAllowance(IERC20(collateral), address(vaultManager), type(uint256).max);\\n                uint256 stablecoinBalance;\\n                uint256 collateralBalance;\\n                // In this case, this may mean that the `VaultManager` will engage in some way in a swap of stablecoins\\n                // or collateral and we should not trust the amounts outputted by the `_angleBorrower` function as the true amounts\\n                if (repayData.length > 0) {\\n                    stablecoinBalance = IERC20(stablecoin).balanceOf(address(this));\\n                    collateralBalance = IERC20(collateral).balanceOf(address(this));\\n                }\\n\\n                PaymentData memory paymentData = _angleBorrower(\\n                    vaultManager,\\n                    actionsBorrow,\\n                    dataBorrow,\\n                    to,\\n                    who,\\n                    repayData\\n                );\\n\\n                _changeAllowance(IERC20(collateral), address(vaultManager), 0);\\n\\n                if (repayData.length > 0) {\\n                    paymentData.collateralAmountToGive = IERC20(collateral).balanceOf(address(this));\\n                    paymentData.stablecoinAmountToGive = IERC20(stablecoin).balanceOf(address(this));\\n                    paymentData.collateralAmountToReceive = collateralBalance;\\n                    paymentData.stablecoinAmountToReceive = stablecoinBalance;\\n                }\\n\\n                // Handle collateral transfers\\n                if (paymentData.collateralAmountToReceive > paymentData.collateralAmountToGive) {\\n                    uint256 index = _searchList(listTokens, collateral);\\n                    balanceTokens[index] -= paymentData.collateralAmountToReceive - paymentData.collateralAmountToGive;\\n                } else if (\\n                    paymentData.collateralAmountToReceive < paymentData.collateralAmountToGive &&\\n                    (to == address(this) || repayData.length > 0)\\n                ) {\\n                    _addToList(\\n                        listTokens,\\n                        balanceTokens,\\n                        collateral,\\n                        paymentData.collateralAmountToGive - paymentData.collateralAmountToReceive\\n                    );\\n                }\\n                // Handle stablecoins transfers: the `VaultManager` is called with the `from` address being the `msg.sender`\\n                // so we don't need to update the stablecoin balance if stablecoins are given to it from this operation\\n                if (\\n                    paymentData.stablecoinAmountToReceive < paymentData.stablecoinAmountToGive &&\\n                    (to == address(this) || repayData.length > 0)\\n                ) {\\n                    _addToList(\\n                        listTokens,\\n                        balanceTokens,\\n                        stablecoin,\\n                        paymentData.stablecoinAmountToGive - paymentData.stablecoinAmountToReceive\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Once all actions have been performed, the router sends back the unused funds from users\\n        // If a user sends funds (through a swap) but specifies incorrectly the collateral associated to it, then\\n        //  the mixer will revert when trying to send the remaining funds back\\n        for (uint256 i = 0; i < balanceTokens.length; i++) {\\n            if (balanceTokens[i] > 0) IERC20(listTokens[i]).safeTransfer(msg.sender, balanceTokens[i]);\\n        }\\n    }\\n\\n    /// @notice Wrapper built on top of the mixer function to grant approval to a VaultManager contract before performing\\n    /// actions and then revoking this approval after these actions\\n    /// @param paramsPermitVaultManager Parameters to sign permit to give allowance to the router for a `VaultManager` contract\\n    /// @dev In `paramsPermitVaultManager`, the signatures for granting approvals must be given first before the signatures\\n    /// to revoke approvals\\n    function mixerVaultManagerPermit(\\n        PermitVaultManagerType[] memory paramsPermitVaultManager,\\n        PermitType[] memory paramsPermit,\\n        TransferType[] memory paramsTransfer,\\n        ParamsSwapType[] memory paramsSwap,\\n        ActionType[] memory actions,\\n        bytes[] calldata data\\n    ) external payable {\\n        for (uint256 i = 0; i < paramsPermitVaultManager.length; i++) {\\n            if (paramsPermitVaultManager[i].approved) {\\n                IVaultManagerFunctions(paramsPermitVaultManager[i].vaultManager).permit(\\n                    paramsPermitVaultManager[i].owner,\\n                    address(this),\\n                    true,\\n                    paramsPermitVaultManager[i].deadline,\\n                    paramsPermitVaultManager[i].v,\\n                    paramsPermitVaultManager[i].r,\\n                    paramsPermitVaultManager[i].s\\n                );\\n            } else break;\\n        }\\n        mixer(paramsPermit, paramsTransfer, paramsSwap, actions, data);\\n        // Storing the index at which starting the iteration for revoking approvals in a variable would make the stack\\n        // too deep\\n        for (uint256 i = 0; i < paramsPermitVaultManager.length; i++) {\\n            if (!paramsPermitVaultManager[i].approved) {\\n                IVaultManagerFunctions(paramsPermitVaultManager[i].vaultManager).permit(\\n                    paramsPermitVaultManager[i].owner,\\n                    address(this),\\n                    false,\\n                    paramsPermitVaultManager[i].deadline,\\n                    paramsPermitVaultManager[i].v,\\n                    paramsPermitVaultManager[i].r,\\n                    paramsPermitVaultManager[i].s\\n                );\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    // ======================== Internal Utility Functions =========================\\n    // Most internal utility functions have a wrapper built on top of it\\n\\n    /// @notice Internal version of the `claimRewards` function\\n    /// Allows to claim rewards for multiple gauges and perpetuals at once\\n    /// @param gaugeUser Address for which to fetch the rewards from the gauges\\n    /// @param liquidityGauges Gauges to claim on\\n    /// @param perpetualIDs Perpetual IDs to claim rewards for\\n    /// @param addressProcessed Whether `PerpetualManager` list is already accessible in `collateralsOrPerpetualManagers`vor if it should be\\n    /// retrieved from `stablecoins` and `collateralsOrPerpetualManagers`\\n    /// @param stablecoins Stablecoin contracts linked to the perpetualsIDs. Array of zero addresses if addressProcessed is true\\n    /// @param collateralsOrPerpetualManagers Collateral contracts linked to the perpetualsIDs or `perpetualManager` contracts if\\n    /// `addressProcessed` is true\\n    /// @dev If the caller wants to send the rewards to another account than `gaugeUser` it first needs to\\n    /// call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`\\n    /// @dev The function only takes rewards received by users,\\n    function _claimRewards(\\n        address gaugeUser,\\n        address[] memory liquidityGauges,\\n        uint256[] memory perpetualIDs,\\n        bool addressProcessed,\\n        address[] memory stablecoins,\\n        address[] memory collateralsOrPerpetualManagers\\n    ) internal {\\n        if (stablecoins.length != perpetualIDs.length || collateralsOrPerpetualManagers.length != perpetualIDs.length)\\n            revert IncompatibleLengths();\\n\\n        for (uint256 i = 0; i < liquidityGauges.length; i++) {\\n            ILiquidityGauge(liquidityGauges[i]).claim_rewards(gaugeUser);\\n        }\\n\\n        for (uint256 i = 0; i < perpetualIDs.length; i++) {\\n            IPerpetualManagerFrontWithClaim perpManager;\\n            if (addressProcessed) perpManager = IPerpetualManagerFrontWithClaim(collateralsOrPerpetualManagers[i]);\\n            else {\\n                (, Pairs memory pairs) = _getInternalContracts(\\n                    IERC20(stablecoins[i]),\\n                    IERC20(collateralsOrPerpetualManagers[i])\\n                );\\n                perpManager = pairs.perpetualManager;\\n            }\\n            perpManager.getReward(perpetualIDs[i]);\\n        }\\n    }\\n\\n    /// @notice Allows to deposit ANGLE on an existing locker\\n    /// @param user Address to deposit for\\n    /// @param amount Amount to deposit\\n    function _depositOnLocker(address user, uint256 amount) internal {\\n        VEANGLE.deposit_for(user, amount);\\n    }\\n\\n    /// @notice Allows to call angle builder actions on VaultManager (Angle Protocol borrowing module)\\n    /// @param vaultManager Address of the vault to perform actions on\\n    /// @param actionsBorrow Actions type to perform on the vaultManager\\n    /// @param dataBorrow Data needed for each actions\\n    /// @param to Address to send the funds to\\n    /// @param who Address Swapper to handle repayments\\n    /// @param repayData Bytes to use at the discretion of the msg.sender\\n    function _angleBorrower(\\n        address vaultManager,\\n        ActionBorrowType[] memory actionsBorrow,\\n        bytes[] memory dataBorrow,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) internal returns (PaymentData memory paymentData) {\\n        return IVaultManagerFunctions(vaultManager).angle(actionsBorrow, dataBorrow, msg.sender, to, who, repayData);\\n    }\\n\\n    /// @notice Allows to claim weekly interest distribution and if wanted to transfer it to the `angleRouter` for future use\\n    /// @param user Address to claim for\\n    /// @param _feeDistributor Address of the fee distributor to claim to\\n    /// @dev If funds are transferred to the router, this action cannot be an end in itself, otherwise funds will be lost:\\n    /// typically we expect people to call for this action before doing a deposit\\n    /// @dev If `letInContract` (and hence if funds are transferred to the router), you should approve the `angleRouter` to\\n    /// transfer the token claimed from the `feeDistributor`\\n    function _claimWeeklyInterest(\\n        address user,\\n        IFeeDistributorFront _feeDistributor,\\n        bool letInContract\\n    ) internal returns (uint256 amount, IERC20 token) {\\n        amount = _feeDistributor.claim(user);\\n        if (letInContract) {\\n            // Fetching info from the `FeeDistributor` to process correctly the withdrawal\\n            token = IERC20(_feeDistributor.token());\\n            token.safeTransferFrom(msg.sender, address(this), amount);\\n        } else {\\n            amount = 0;\\n        }\\n    }\\n\\n    /// @notice Internal version of the `gaugeDeposit` function\\n    /// Allows to deposit tokens into a gauge\\n    /// @param user Address on behalf of which deposit should be made in the gauge\\n    /// @param amount Amount to stake\\n    /// @param gauge LiquidityGauge to stake in\\n    /// @param shouldClaimRewards Whether to claim or not previously accumulated rewards\\n    /// @dev You should be cautious on who will receive the rewards (if `shouldClaimRewards` is true)\\n    /// It can be set on each gauge\\n    /// @dev In the `mixer`, before calling for this action, user should have made sure to get in the router\\n    /// the associated token (by like a  `deposit` action)\\n    /// @dev The function will revert if the gauge has not already been approved by the contract\\n    function _gaugeDeposit(\\n        address user,\\n        uint256 amount,\\n        ILiquidityGauge gauge,\\n        bool shouldClaimRewards\\n    ) internal {\\n        gauge.deposit(amount, user, shouldClaimRewards);\\n    }\\n\\n    /// @notice Internal version of the `mint` functions\\n    /// Mints stablecoins from the protocol\\n    /// @param user Address to send the stablecoins to\\n    /// @param amount Amount of collateral to use for the mint\\n    /// @param minStableAmount Minimum stablecoin minted for the tx not to revert\\n    /// @param addressProcessed Whether `msg.sender` provided the contracts address or the tokens one\\n    /// @param stablecoinOrStableMaster Token associated to a `StableMaster` (if `addressProcessed` is false)\\n    /// or directly the `StableMaster` contract if `addressProcessed`\\n    /// @param collateral Collateral to mint from: it can be null if `addressProcessed` is true but in the corresponding\\n    /// action, the `mixer` needs to get a correct address to compute the amount of tokens to use for the mint\\n    /// @param poolManager PoolManager associated to the `collateral` (null if `addressProcessed` is not true)\\n    /// @dev This function is not designed to be composable with other actions of the router after it's called: like\\n    /// stablecoins obtained from it cannot be used for other operations: as such the `user` address should not be the router\\n    /// address\\n    function _mint(\\n        address user,\\n        uint256 amount,\\n        uint256 minStableAmount,\\n        bool addressProcessed,\\n        address stablecoinOrStableMaster,\\n        address collateral,\\n        IPoolManager poolManager\\n    ) internal {\\n        IStableMasterFront stableMaster;\\n        (stableMaster, poolManager) = _mintBurnContracts(\\n            addressProcessed,\\n            stablecoinOrStableMaster,\\n            collateral,\\n            poolManager\\n        );\\n        stableMaster.mint(amount, user, poolManager, minStableAmount);\\n    }\\n\\n    /// @notice Burns stablecoins from the protocol\\n    /// @param dest Address who will receive the proceeds\\n    /// @param amount Amount of collateral to use for the mint\\n    /// @param minCollatAmount Minimum Collateral minted for the tx not to revert\\n    /// @param addressProcessed Whether `msg.sender` provided the contracts address or the tokens one\\n    /// @param stablecoinOrStableMaster Token associated to a `StableMaster` (if `addressProcessed` is false)\\n    /// or directly the `StableMaster` contract if `addressProcessed`\\n    /// @param collateral Collateral to mint from: it can be null if `addressProcessed` is true but in the corresponding\\n    /// action, the `mixer` needs to get a correct address to compute the amount of tokens to use for the mint\\n    /// @param poolManager PoolManager associated to the `collateral` (null if `addressProcessed` is not true)\\n    function _burn(\\n        address dest,\\n        uint256 amount,\\n        uint256 minCollatAmount,\\n        bool addressProcessed,\\n        address stablecoinOrStableMaster,\\n        address collateral,\\n        IPoolManager poolManager\\n    ) internal {\\n        IStableMasterFront stableMaster;\\n        (stableMaster, poolManager) = _mintBurnContracts(\\n            addressProcessed,\\n            stablecoinOrStableMaster,\\n            collateral,\\n            poolManager\\n        );\\n        stableMaster.burn(amount, msg.sender, dest, poolManager, minCollatAmount);\\n    }\\n\\n    /// @notice Internal version of the `deposit` functions\\n    /// Allows to deposit a collateral within the protocol\\n    /// @param user Address where to send the resulting sanTokens, if this address is the router address then it means\\n    /// that the intention is to stake the sanTokens obtained in a subsequent `gaugeDeposit` action\\n    /// @param amount Amount of collateral to deposit\\n    /// @param addressProcessed Whether `msg.sender` provided the contracts addresses or the tokens ones\\n    /// @param stablecoinOrStableMaster Token associated to a `StableMaster` (if `addressProcessed` is false)\\n    /// or directly the `StableMaster` contract if `addressProcessed`\\n    /// @param collateral Token to deposit: it can be null if `addressProcessed` is true but in the corresponding\\n    /// action, the `mixer` needs to get a correct address to compute the amount of tokens to use for the deposit\\n    /// @param poolManager PoolManager associated to the `collateral` (null if `addressProcessed` is not true)\\n    /// @param sanToken SanToken associated to the `collateral` (null if `addressProcessed` is not true)\\n    /// @dev Contrary to the `mint` action, the `deposit` action can be used in composition with other actions, like\\n    /// `deposit` and then `stake`\\n    function _deposit(\\n        address user,\\n        uint256 amount,\\n        bool addressProcessed,\\n        address stablecoinOrStableMaster,\\n        address collateral,\\n        IPoolManager poolManager,\\n        ISanToken sanToken\\n    ) internal returns (uint256 addedAmount, address) {\\n        IStableMasterFront stableMaster;\\n        if (addressProcessed) {\\n            stableMaster = IStableMasterFront(stablecoinOrStableMaster);\\n        } else {\\n            Pairs memory pairs;\\n            (stableMaster, pairs) = _getInternalContracts(IERC20(stablecoinOrStableMaster), IERC20(collateral));\\n            poolManager = pairs.poolManager;\\n            sanToken = pairs.sanToken;\\n        }\\n\\n        if (user == address(this)) {\\n            // Computing the amount of sanTokens obtained\\n            addedAmount = sanToken.balanceOf(address(this));\\n            stableMaster.deposit(amount, address(this), poolManager);\\n            addedAmount = sanToken.balanceOf(address(this)) - addedAmount;\\n        } else {\\n            stableMaster.deposit(amount, user, poolManager);\\n        }\\n        return (addedAmount, address(sanToken));\\n    }\\n\\n    /// @notice Withdraws sanTokens from the protocol\\n    /// @param amount Amount of sanTokens to withdraw\\n    /// @param addressProcessed Whether `msg.sender` provided the contracts addresses or the tokens ones\\n    /// @param stablecoinOrStableMaster Token associated to a `StableMaster` (if `addressProcessed` is false)\\n    /// or directly the `StableMaster` contract if `addressProcessed`\\n    /// @param collateralOrPoolManager Collateral to withdraw (if `addressProcessed` is false) or directly\\n    /// the `PoolManager` contract if `addressProcessed`\\n    function _withdraw(\\n        uint256 amount,\\n        bool addressProcessed,\\n        address stablecoinOrStableMaster,\\n        address collateralOrPoolManager\\n    ) internal returns (uint256 withdrawnAmount, address) {\\n        IStableMasterFront stableMaster;\\n        // Stores the address of the `poolManager`, while `collateralOrPoolManager` is used in the function\\n        // to store the `collateral` address\\n        IPoolManager poolManager;\\n        if (addressProcessed) {\\n            stableMaster = IStableMasterFront(stablecoinOrStableMaster);\\n            poolManager = IPoolManager(collateralOrPoolManager);\\n            collateralOrPoolManager = poolManager.token();\\n        } else {\\n            Pairs memory pairs;\\n            (stableMaster, pairs) = _getInternalContracts(\\n                IERC20(stablecoinOrStableMaster),\\n                IERC20(collateralOrPoolManager)\\n            );\\n            poolManager = pairs.poolManager;\\n        }\\n        // Here reusing the `withdrawnAmount` variable to avoid a stack too deep problem\\n        withdrawnAmount = IERC20(collateralOrPoolManager).balanceOf(address(this));\\n\\n        // This call will increase our collateral balance\\n        stableMaster.withdraw(amount, address(this), address(this), poolManager);\\n\\n        // We compute the difference between our collateral balance after and before the `withdraw` call\\n        withdrawnAmount = IERC20(collateralOrPoolManager).balanceOf(address(this)) - withdrawnAmount;\\n\\n        return (withdrawnAmount, collateralOrPoolManager);\\n    }\\n\\n    /// @notice Internal version of the `openPerpetual` function\\n    /// Opens a perpetual within Angle\\n    /// @param owner Address to mint perpetual for\\n    /// @param margin Margin to open the perpetual with\\n    /// @param amountCommitted Commit amount in the perpetual\\n    /// @param maxOracleRate Maximum oracle rate required to have a leverage position opened\\n    /// @param minNetMargin Minimum net margin required to have a leverage position opened\\n    /// @param addressProcessed Whether msg.sender provided the contracts addresses or the tokens ones\\n    /// @param stablecoinOrPerpetualManager Token associated to the `StableMaster` (iif `addressProcessed` is false)\\n    /// or address of the desired `PerpetualManager` (if `addressProcessed` is true)\\n    /// @param collateral Collateral to mint from (it can be null if `addressProcessed` is true): it can be null if `addressProcessed` is true but in the corresponding\\n    /// action, the `mixer` needs to get a correct address to compute the amount of tokens to use for the deposit\\n    function _openPerpetual(\\n        address owner,\\n        uint256 margin,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin,\\n        bool addressProcessed,\\n        address stablecoinOrPerpetualManager,\\n        address collateral\\n    ) internal returns (uint256 perpetualID) {\\n        if (!addressProcessed) {\\n            (, Pairs memory pairs) = _getInternalContracts(IERC20(stablecoinOrPerpetualManager), IERC20(collateral));\\n            stablecoinOrPerpetualManager = address(pairs.perpetualManager);\\n        }\\n\\n        return\\n            IPerpetualManagerFrontWithClaim(stablecoinOrPerpetualManager).openPerpetual(\\n                owner,\\n                margin,\\n                amountCommitted,\\n                maxOracleRate,\\n                minNetMargin\\n            );\\n    }\\n\\n    /// @notice Internal version of the `addToPerpetual` function\\n    /// Adds collateral to a perpetual\\n    /// @param margin Amount of collateral to add\\n    /// @param perpetualID Perpetual to add collateral to\\n    /// @param addressProcessed Whether msg.sender provided the contracts addresses or the tokens ones\\n    /// @param stablecoinOrPerpetualManager Token associated to the `StableMaster` (iif `addressProcessed` is false)\\n    /// or address of the desired `PerpetualManager` (if `addressProcessed` is true)\\n    /// @param collateral Collateral to mint from (it can be null if `addressProcessed` is true): it can be null if `addressProcessed` is true but in the corresponding\\n    /// action, the `mixer` needs to get a correct address to compute the amount of tokens to use for the deposit\\n    function _addToPerpetual(\\n        uint256 margin,\\n        uint256 perpetualID,\\n        bool addressProcessed,\\n        address stablecoinOrPerpetualManager,\\n        address collateral\\n    ) internal {\\n        if (!addressProcessed) {\\n            (, Pairs memory pairs) = _getInternalContracts(IERC20(stablecoinOrPerpetualManager), IERC20(collateral));\\n            stablecoinOrPerpetualManager = address(pairs.perpetualManager);\\n        }\\n        IPerpetualManagerFrontWithClaim(stablecoinOrPerpetualManager).addToPerpetual(perpetualID, margin);\\n    }\\n\\n    // ======================== Internal Utility Functions =========================\\n\\n    /// @notice Parses the actions submitted to the router contract to interact with a `VaultManager` and makes sure that\\n    /// the calling address is well approved for all the vaults with which it is interacting\\n    /// @dev If such check was not made, we could end up in a situation where an address has given an approval for all its\\n    /// vaults to the router contract, and another address takes advantage of this to instruct actions on these other vaults\\n    /// to the router: it is hence super important for the router to pay attention to the fact that the addresses interacting\\n    /// with a vault are approved for this vault\\n    function _parseVaultIDs(\\n        ActionBorrowType[] memory actionsBorrow,\\n        bytes[] memory dataBorrow,\\n        address vaultManager\\n    ) internal view {\\n        if (actionsBorrow.length >= _MAX_TOKENS) revert IncompatibleLengths();\\n        // The amount of vaults to check should be smaller than the amount of actions\\n        uint256[_MAX_TOKENS] memory vaultIDsToCheckOwnershipOf;\\n        bool createVaultAction;\\n        uint256 lastVaultID;\\n        uint256 vaultIDLength;\\n        for (uint256 i = 0; i < actionsBorrow.length; i++) {\\n            uint256 vaultID;\\n            // If there is a createVault action, the router should not worry about looking at\\n            // next vaultIDs given equal to 0\\n            // There are different ways depending on the action with which vaultIDs are structured\\n            if (actionsBorrow[i] == ActionBorrowType.createVault) {\\n                createVaultAction = true;\\n                continue;\\n            } else if (\\n                actionsBorrow[i] == ActionBorrowType.removeCollateral || actionsBorrow[i] == ActionBorrowType.borrow\\n            ) {\\n                (vaultID, ) = abi.decode(dataBorrow[i], (uint256, uint256));\\n            } else if (actionsBorrow[i] == ActionBorrowType.closeVault) {\\n                vaultID = abi.decode(dataBorrow[i], (uint256));\\n            } else if (actionsBorrow[i] == ActionBorrowType.getDebtIn) {\\n                (vaultID, , , ) = abi.decode(dataBorrow[i], (uint256, address, uint256, uint256));\\n            } else continue;\\n            // If we need to add a null `vaultID`, we look at the `vaultIDCount` in the `VaultManager`\\n            // if there has not been any specific action\\n            if (vaultID == 0) {\\n                if (createVaultAction) {\\n                    continue;\\n                } else {\\n                    // If we haven't stored the last vaultID, we need to fetch it\\n                    if (lastVaultID == 0) {\\n                        lastVaultID = IVaultManagerStorage(vaultManager).vaultIDCount();\\n                    }\\n                    vaultID = lastVaultID;\\n                }\\n            }\\n\\n            // Check if this vaultID has already been verified\\n            for (uint256 j = 0; j < vaultIDLength; j++) {\\n                if (vaultIDsToCheckOwnershipOf[j] == vaultID) {\\n                    continue;\\n                }\\n            }\\n            // Verify this new vaultID and add it to the list\\n            if (!IVaultManagerFunctions(vaultManager).isApprovedOrOwner(msg.sender, vaultID)) {\\n                revert NotApprovedOrOwner();\\n            }\\n            vaultIDsToCheckOwnershipOf[vaultIDLength] = vaultID;\\n            vaultIDLength += 1;\\n        }\\n    }\\n\\n    /// @notice Checks if collateral in the list\\n    /// @param list List of addresses\\n    /// @param searchFor Address of interest\\n    /// @return index Place of the address in the list if it is in or current length otherwise\\n    function _searchList(address[_MAX_TOKENS] memory list, address searchFor) internal pure returns (uint256 index) {\\n        uint256 i;\\n        while (i < list.length && list[i] != address(0)) {\\n            if (list[i] == searchFor) return i;\\n            i++;\\n        }\\n        return i;\\n    }\\n\\n    /// @notice Modifies stored balances for a given collateral\\n    /// @param list List of collateral addresses\\n    /// @param balances List of balances for the different supported collateral types\\n    /// @param searchFor Address of the collateral of interest\\n    /// @param amount Amount to add in the balance for this collateral\\n    function _addToList(\\n        address[_MAX_TOKENS] memory list,\\n        uint256[_MAX_TOKENS] memory balances,\\n        address searchFor,\\n        uint256 amount\\n    ) internal pure {\\n        uint256 index = _searchList(list, searchFor);\\n        // add it to the list if non existent and we add tokens\\n        if (list[index] == address(0)) list[index] = searchFor;\\n        balances[index] += amount;\\n    }\\n\\n    /// @notice Computes the proportion of the collateral leftover balance to use for a given action\\n    /// @param proportion Ratio to take from balance\\n    /// @param list Collateral list\\n    /// @param balances Balances of each collateral asset in the collateral list\\n    /// @param searchFor Collateral to look for\\n    /// @return amount Amount to use for the action (based on the proportion given)\\n    /// @dev To use all the collateral balance available for an action, users should give `proportion` a value of\\n    /// `BASE_PARAMS`\\n    function _computeProportion(\\n        uint256 proportion,\\n        address[_MAX_TOKENS] memory list,\\n        uint256[_MAX_TOKENS] memory balances,\\n        address searchFor\\n    ) internal pure returns (uint256 amount) {\\n        uint256 index = _searchList(list, searchFor);\\n\\n        // Reverts if the index was not found\\n        if (list[index] == address(0)) revert InvalidConditions();\\n\\n        amount = (proportion * balances[index]) / BASE_PARAMS;\\n        balances[index] -= amount;\\n    }\\n\\n    /// @notice Gets Angle contracts associated to a pair (stablecoin, collateral)\\n    /// @param stablecoin Token associated to a `StableMaster`\\n    /// @param collateral Collateral to mint/deposit/open perpetual or add collateral from\\n    /// @dev This function is used to check that the parameters passed by people calling some of the main\\n    /// router functions are correct\\n    function _getInternalContracts(IERC20 stablecoin, IERC20 collateral)\\n        internal\\n        view\\n        returns (IStableMasterFront stableMaster, Pairs memory pairs)\\n    {\\n        stableMaster = mapStableMasters[stablecoin];\\n        pairs = mapPoolManagers[stableMaster][collateral];\\n        // If `stablecoin` is zero then this necessarily means that `stableMaster` here will be 0\\n        // Similarly, if `collateral` is zero, then this means that `pairs.perpetualManager`, `pairs.poolManager`\\n        // and `pairs.sanToken` will be zero\\n        // Last, if any of `pairs.perpetualManager`, `pairs.poolManager` or `pairs.sanToken` is zero, this means\\n        // that all others should be null from the `addPairs` and `removePairs` functions which keep this invariant\\n        if (address(stableMaster) == address(0) || address(pairs.poolManager) == address(0)) revert ZeroAddress();\\n\\n        return (stableMaster, pairs);\\n    }\\n\\n    /// @notice Get contracts for mint and burn actions\\n    /// @param addressProcessed Whether `msg.sender` provided the contracts address or the tokens one\\n    /// @param stablecoinOrStableMaster Token associated to a `StableMaster` (if `addressProcessed` is false)\\n    /// or directly the `StableMaster` contract if `addressProcessed`\\n    /// @param collateral Collateral to mint from: it can be null if `addressProcessed` is true but in the corresponding\\n    /// action, the `mixer` needs to get a correct address to compute the amount of tokens to use for the mint\\n    /// @param poolManager PoolManager associated to the `collateral` (null if `addressProcessed` is not true)\\n    function _mintBurnContracts(\\n        bool addressProcessed,\\n        address stablecoinOrStableMaster,\\n        address collateral,\\n        IPoolManager poolManager\\n    ) internal view returns (IStableMasterFront, IPoolManager) {\\n        IStableMasterFront stableMaster;\\n        if (addressProcessed) {\\n            stableMaster = IStableMasterFront(stablecoinOrStableMaster);\\n        } else {\\n            Pairs memory pairs;\\n            (stableMaster, pairs) = _getInternalContracts(IERC20(stablecoinOrStableMaster), IERC20(collateral));\\n            poolManager = pairs.poolManager;\\n        }\\n        return (stableMaster, poolManager);\\n    }\\n\\n    /// @notice Adds new collateral type to specific stablecoin\\n    /// @param stableMaster Address of the `StableMaster` associated to the stablecoin of interest\\n    /// @param poolManager Address of the `PoolManager` contract associated to the pair (stablecoin,collateral)\\n    /// @param liquidityGauge Address of liquidity gauge contract associated to sanToken\\n    function _addPair(\\n        IStableMasterFront stableMaster,\\n        IPoolManager poolManager,\\n        ILiquidityGauge liquidityGauge\\n    ) internal {\\n        // Fetching the associated `sanToken` and `perpetualManager` from the contract\\n        (IERC20 collateral, ISanToken sanToken, IPerpetualManager perpetualManager, , , , , , ) = IStableMaster(\\n            address(stableMaster)\\n        ).collateralMap(poolManager);\\n\\n        Pairs storage _pairs = mapPoolManagers[stableMaster][collateral];\\n        // Checking if the pair has not already been initialized: if yes we need to make the function revert\\n        // otherwise we could end up with still approved `PoolManager` and `PerpetualManager` contracts\\n        if (address(_pairs.poolManager) != address(0)) revert AlreadyAdded();\\n\\n        _pairs.poolManager = poolManager;\\n        _pairs.perpetualManager = IPerpetualManagerFrontWithClaim(address(perpetualManager));\\n        _pairs.sanToken = sanToken;\\n        // In the future, it is possible that sanTokens do not have an associated liquidity gauge\\n        if (address(liquidityGauge) != address(0)) {\\n            if (address(sanToken) != liquidityGauge.staking_token()) revert InvalidToken();\\n            _pairs.gauge = liquidityGauge;\\n            sanToken.approve(address(liquidityGauge), type(uint256).max);\\n        }\\n        _changeAllowance(collateral, address(stableMaster), type(uint256).max);\\n        _changeAllowance(collateral, address(perpetualManager), type(uint256).max);\\n        emit CollateralToggled(address(stableMaster), address(poolManager), address(liquidityGauge));\\n    }\\n\\n    /// @notice Changes allowance of this contract for a given token\\n    /// @param token Address of the token to change allowance\\n    /// @param spender Address to change the allowance of\\n    /// @param amount Amount allowed\\n    function _changeAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(spender, amount - currentAllowance);\\n        } else if (currentAllowance > amount) {\\n            token.safeDecreaseAllowance(spender, currentAllowance - amount);\\n        }\\n    }\\n\\n    /// @notice Transfers collateral or an arbitrary token which is then swapped on UniswapV3 or on 1Inch\\n    /// @param inToken Token to swap for the collateral\\n    /// @param amount Amount of in token to swap for the collateral\\n    /// @param minAmountOut Minimum amount accepted for the swap to happen\\n    /// @param swapType Choice on which contracts to swap\\n    /// @param args Bytes representing either the path to swap your input token to the accepted collateral on Uniswap or payload for 1Inch\\n    /// @dev The `path` provided is not checked, meaning people could swap for a token A and declare that they've swapped for another token B.\\n    /// However, the mixer manipulates its token balance only through the addresses registered in `listTokens`, so any subsequent mixer action\\n    /// trying to transfer funds B will do it through address of token A and revert as A is not actually funded.\\n    /// In case there is not subsequent action, `mixer` will revert when trying to send back what appears to be remaining tokens A.\\n    function _transferAndSwap(\\n        IERC20 inToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        SwapType swapType,\\n        bytes memory args\\n    ) internal returns (uint256) {\\n        if (address(this).balance >= amount) {\\n            if (address(inToken) == address(WETH9)) {\\n                WETH9.deposit{ value: amount }(); // wrap only what is needed to pay\\n            } else if (address(inToken) == address(WSTETH)) {\\n                uint256 amountOut = STETH.getSharesByPooledEth(amount);\\n                //solhint-disable-next-line\\n                (bool success, bytes memory result) = address(WSTETH).call{ value: amount }(\\\"\\\");\\n                if (!success) _revertBytes(result);\\n                amount = amountOut;\\n            }\\n        } else {\\n            inToken.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n        return _swap(inToken, amount, minAmountOut, swapType, args);\\n    }\\n\\n    /// @notice swap an amount of inToken\\n    /// @param inToken Token to swap for the collateral\\n    /// @param amount Amount of in token to swap for the collateral\\n    /// @param minAmountOut Minimum amount accepted for the swap to happen\\n    /// @param swapType Choice on which contracts to swap\\n    function _swap(\\n        IERC20 inToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        SwapType swapType,\\n        bytes memory args\\n    ) internal returns (uint256 amountOut) {\\n        if (swapType == SwapType.UniswapV3) amountOut = _swapOnUniswapV3(inToken, amount, minAmountOut, args);\\n        else if (swapType == SwapType.oneINCH) amountOut = _swapOn1Inch(inToken, minAmountOut, args);\\n        else if (swapType == SwapType.WrapStETH) amountOut = _wrapStETH(amount, minAmountOut);\\n        else if (swapType == SwapType.None) amountOut = amount;\\n        else revert InvalidCall();\\n\\n        return amountOut;\\n    }\\n\\n    function _wrapStETH(uint256 amount, uint256 minAmountOut) internal returns (uint256 amountOut) {\\n        amountOut = WSTETH.wrap(amount);\\n        if (amountOut < minAmountOut) revert TooSmallAmountOut();\\n    }\\n\\n    /// @notice Allows to swap any token to an accepted collateral via UniswapV3 (if there is a path)\\n    /// @param inToken Address token used as entrance of the swap\\n    /// @param amount Amount of in token to swap for the accepted collateral\\n    /// @param minAmountOut Minimum amount accepted for the swap to happen\\n    /// @param path Bytes representing the path to swap your input token to the accepted collateral\\n    function _swapOnUniswapV3(\\n        IERC20 inToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        bytes memory path\\n    ) internal returns (uint256 amountOut) {\\n        // Approve transfer to the `uniswapV3Router` if it is the first time that the token is used\\n        if (!uniAllowedToken[inToken]) {\\n            inToken.safeApprove(address(uniswapV3Router), type(uint256).max);\\n            uniAllowedToken[inToken] = true;\\n        }\\n        amountOut = uniswapV3Router.exactInput(\\n            ExactInputParams(path, address(this), block.timestamp, amount, minAmountOut)\\n        );\\n    }\\n\\n    /// @notice Allows to swap any token to an accepted collateral via 1Inch API\\n    /// @param minAmountOut Minimum amount accepted for the swap to happen\\n    /// @param payload Bytes needed for 1Inch API\\n    function _swapOn1Inch(\\n        IERC20 inToken,\\n        uint256 minAmountOut,\\n        bytes memory payload\\n    ) internal returns (uint256 amountOut) {\\n        // Approve transfer to the `oneInch` router if it is the first time the token is used\\n        if (!oneInchAllowedToken[inToken]) {\\n            inToken.safeApprove(address(oneInch), type(uint256).max);\\n            oneInchAllowedToken[inToken] = true;\\n        }\\n\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = oneInch.call(payload);\\n        if (!success) _revertBytes(result);\\n\\n        amountOut = abi.decode(result, (uint256));\\n        if (amountOut < minAmountOut) revert TooSmallAmountOut();\\n    }\\n\\n    /// @notice Internal function used for error handling\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert InvalidReturnMessage();\\n    }\\n}\\n\",\"keccak256\":\"0xa6f297a11e271139e1b99c6fa5710f8de26be3079c7dc38bf6c56912d305132f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x03d2979a3fea247a112a2d8c65f1afeeee082def285428a3d672447e14105158\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0f0035d4439f1b97dc8bd7b7f712e1c6e7a5933039ac0890b7d1b0ad5ba57a09\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title IFeeDistributor\\n/// @author Interface of the `FeeDistributor` contract\\n/// @dev This interface is used by the `SurplusConverter` contract to send funds to the `FeeDistributor`\\ninterface IFeeDistributor {\\n    function burn(address token) external;\\n}\\n\\n/// @title IFeeDistributorFront\\n/// @author Interface for public use of the `FeeDistributor` contract\\n/// @dev This interface is used for user related function\\ninterface IFeeDistributorFront {\\n    function token() external returns (address);\\n\\n    function claim(address _addr) external returns (uint256);\\n\\n    function claim(address[20] memory _addr) external returns (bool);\\n}\\n\",\"keccak256\":\"0xba17005da4c2b2079adfacc07c55df0b3be05f9b86c8d6f8d023580616c90c92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4e40f8c891a99656d7e66a4a57497c90f5e91a7c9d122acefc7565d13bcbc5cf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\ninterface ILiquidityGauge {\\n    // solhint-disable-next-line\\n    function staking_token() external returns (address stakingToken);\\n\\n    // solhint-disable-next-line\\n    function deposit_reward_token(address _rewardToken, uint256 _amount) external;\\n\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        // solhint-disable-next-line\\n        bool _claim_rewards\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function claim_rewards(address _addr) external;\\n\\n    // solhint-disable-next-line\\n    function claim_rewards(address _addr, address _receiver) external;\\n}\\n\",\"keccak256\":\"0xedd09a607e411e9e2d791a3660ddb38d24b44f8c316e8aab4bb8e05502995f08\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe774ea1995f39a6996a62ea5ce4f9687203bd6c282d23f9b04136b555f67bdf7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\\n/// @title Interface of the contract managing perpetuals with claim function\\n/// @author Angle Core Team\\n/// @dev Front interface with rewards function, meaning only user-facing functions\\ninterface IPerpetualManagerFrontWithClaim is IPerpetualManagerFront, IPerpetualManager {\\n    function getReward(uint256 perpetualID) external;\\n}\\n\",\"keccak256\":\"0x20eceecbfa6bc5d97d74845e227a948801a7d79503a449d2ffe58069d831da38\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0x4e4bc6a239d1b50e1685797c23462462cc1f3b67f7e2f89240bca690ef514b21\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISanToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5baf5e5c7efea3b6d15323c6ed1f53808d976e1157e7d53ef38cbb8cfa167dc5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\",\"keccak256\":\"0x10fca2f425ca228d2ce579cf1d35a4af47f21590a0cab74fd7338124aa88b558\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStableMasterFront.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\n\\n/// @title IStableMasterFront\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IStableMasterFront {\\n    function mint(\\n        uint256 amount,\\n        address user,\\n        IPoolManager poolManager,\\n        uint256 minStableAmount\\n    ) external;\\n\\n    function burn(\\n        uint256 amount,\\n        address burner,\\n        address dest,\\n        IPoolManager poolManager,\\n        uint256 minCollatAmount\\n    ) external;\\n\\n    function deposit(\\n        uint256 amount,\\n        address user,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function withdraw(\\n        uint256 amount,\\n        address burner,\\n        address dest,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function agToken() external returns (address);\\n}\\n\",\"keccak256\":\"0x1f905196034406535bf34e6b38e399cd21126f513ca99d042b6c8d1e230b1bf5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf5dbed493ca94bb80c461634d270a76675cd76233ba1ee6028688e0bfa15caf4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\n\\n// ========================= Key Structs and Enums =============================\\n\\n/// @notice Data to track during a series of action the amount to give or receive in stablecoins and collateral\\n/// to the caller or associated addresses\\nstruct PaymentData {\\n    // Stablecoin amount the contract should give\\n    uint256 stablecoinAmountToGive;\\n    // Stablecoin amount owed to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Collateral amount the contract should give\\n    uint256 collateralAmountToGive;\\n    // Collateral amount owed to the contract\\n    uint256 collateralAmountToReceive;\\n}\\n\\n/// @notice Data stored to track someone's loan (or equivalently called position)\\nstruct Vault {\\n    // Amount of collateral deposited in the vault\\n    uint256 collateralAmount;\\n    // Normalized value of the debt (that is to say of the stablecoins borrowed)\\n    uint256 normalizedDebt;\\n}\\n\\n/// @notice Actions possible when composing calls to the different entry functions proposed\\nenum ActionBorrowType {\\n    createVault,\\n    closeVault,\\n    addCollateral,\\n    removeCollateral,\\n    repayDebt,\\n    borrow,\\n    getDebtIn,\\n    permit\\n}\\n\\n// ========================= Interfaces =============================\\n\\n/// @title IVaultManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module (without getters)\\ninterface IVaultManagerFunctions {\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionBorrowType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @param who Address of the contract to handle in case of repayment of stablecoins from received collateral\\n    /// @param repayData Data to pass to the repayment contract in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionBorrowType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Checks whether a given address is approved for a vault or owns this vault\\n    /// @param spender Address for which vault ownership should be checked\\n    /// @param vaultID ID of the vault to check\\n    /// @return Whether the `spender` address owns or is approved for `vaultID`\\n    function isApprovedOrOwner(address spender, uint256 vaultID) external view returns (bool);\\n\\n    /// @notice Allows an address to give or revoke approval for all its vaults to another address\\n    /// @param owner Address signing the permit and giving (or revoking) its approval for all the controlled vaults\\n    /// @param spender Address to give approval to\\n    /// @param approved Whether to give or revoke the approval\\n    /// @param deadline Deadline parameter for the signature to be valid\\n    /// @dev The `v`, `r`, and `s` parameters are used as signature data\\n    function permit(\\n        address owner,\\n        address spender,\\n        bool approved,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n/// @title IVaultManagerStorage\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface contains getters of the contract's public variables used by other contracts\\n/// of this module\\ninterface IVaultManagerStorage {\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury);\\n\\n    /// @notice Reference to the collateral handled by this `VaultManager`\\n    function collateral() external view returns (IERC20);\\n\\n    /// @notice ID of the last vault created. The `vaultIDCount` variables serves as a counter to generate a unique\\n    /// `vaultID` for each vault: it is like `tokenID` in basic ERC721 contracts\\n    function vaultIDCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x279eb6f58911979997890a4655ec380c6728e5d945e432f196d3a2c9f8b0fdd7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVeANGLE.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IVeANGLE\\n/// @author Angle Core Team\\n/// @notice Interface for the `VeANGLE` contract\\ninterface IVeANGLE {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function deposit_for(address addr, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xae4b54d62feb88494a33f99969c74c1aef7ae9392c2ede3c80aee10c1af594bd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x5588185ad7e5932d295173a20ce9b86589c033fbf0a1682d8452969ead8f167b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/lido/ISteth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStETH is IERC20 {\\n    event Submitted(address sender, uint256 amount, address referral);\\n\\n    function submit(address) external payable returns (uint256);\\n\\n    function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xedbc46cb652d9c1401fa4a1887b9bf1675a8ad5eaf35eeda1209a958be3f3202\",\"license\":\"MIT\"},\"contracts/interfaces/external/lido/IWStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IWStETH\\n/// @author Angle Core Team\\n/// @notice Interface for the `WStETH` contract\\n/// @dev This interface only contains functions of the `WStETH` which are called by other contracts\\n/// of this module\\ninterface IWStETH is IERC20 {\\n    function stETH() external returns (address);\\n\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7e29525881f439ac6f1e1f0fb90694ef16ddafa5c3483249a86f716a7c638428\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/uniswap/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nstruct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3Router {\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\\n/// @title Router for price estimation functionality\\n/// @notice Functions for getting the price of one token with respect to another using Uniswap V2\\n/// @dev This interface is only used for non critical elements of the protocol\\ninterface IUniswapV2Router {\\n    /// @notice Given an input asset amount, returns the maximum output amount of the\\n    /// other asset (accounting for fees) given reserves.\\n    /// @param path Addresses of the pools used to get prices\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 swapAmount,\\n        uint256 minExpected,\\n        address[] calldata path,\\n        address receiver,\\n        uint256 swapDeadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x979d990ef922fbd8f0a8b2230d5d361e629f7e5c4190402fba692262ee59450a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620025f31760201c565b15905090565b3b151590565b615d4780620001126000396000f3fe60806040526004361061014b5760003560e01c8063045c08d5146101575780630c340a241461018d5780630db3280f146101ad5780631171bda9146101ed57806322f2d5861461020f5780632c76d7a61461022f578063310fb5e71461024f578063313359b114610262578063452a93201461028a5780634aa4a4fc146102aa578063560a8b78146102d25780635cc6b2d4146102fa5780636fb8df051461031a5780637c295dfa1461033a5780639f48118f146103cb578063a11a233d146103f1578063aacdd99d14610411578063b044d1e014610431578063b803442414610451578063b82c4dc114610487578063cef5cd0a146104a7578063d0772c29146104ba578063d9fb643a146104da578063e00bfe5014610502578063e45e6f301461052a578063ee7b49501461054a578063f5a418bb1461056a578063f8a3a1111461059a57600080fd5b3661015257005b600080fd5b34801561016357600080fd5b50603a54610177906001600160a01b031681565b604051610184919061451a565b60405180910390f35b34801561019957600080fd5b50603754610177906001600160a01b031681565b3480156101b957600080fd5b506101dd6101c8366004614546565b60356020526000908152604090205460ff1681565b6040519015158152602001610184565b3480156101f957600080fd5b5061020d610208366004614563565b6105ba565b005b34801561021b57600080fd5b5061020d61022a3660046145e8565b610664565b34801561023b57600080fd5b50603954610177906001600160a01b031681565b61020d61025d366004614bd1565b610a9e565b34801561026e57600080fd5b506101777331429d1856ad1377a8a0079410b297e1a9e214c281565b34801561029657600080fd5b50603854610177906001600160a01b031681565b3480156102b657600080fd5b5061017773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156102de57600080fd5b50610177730c462dbb9ec8cd1630f1728b2cfd2769d09f0dd581565b34801561030657600080fd5b5061020d6103153660046145e8565b610d75565b34801561032657600080fd5b5061020d610335366004614546565b61112e565b34801561034657600080fd5b50610398610355366004614ccd565b603460209081526000928352604080842090915290825290208054600182015460028301546003909301546001600160a01b039283169391831692918216911684565b604080516001600160a01b0395861681529385166020850152918416918301919091529091166060820152608001610184565b3480156103d757600080fd5b506103e3633b9aca0081565b604051908152602001610184565b3480156103fd57600080fd5b5061020d61040c366004614d06565b6111ca565b34801561041d57600080fd5b5061020d61042c3660046145e8565b611307565b34801561043d57600080fd5b5061020d61044c366004614d34565b611439565b34801561045d57600080fd5b5061017761046c366004614546565b6033602052600090815260409020546001600160a01b031681565b34801561049357600080fd5b5061020d6104a23660046145e8565b611466565b61020d6104b5366004614d93565b611563565b3480156104c657600080fd5b5061020d6104d5366004614f0a565b6123ec565b3480156104e657600080fd5b50610177737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b34801561050e57600080fd5b5061017773ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b34801561053657600080fd5b5061020d610545366004614ccd565b612443565b34801561055657600080fd5b5061020d610565366004614d34565b6125d3565b34801561057657600080fd5b506101dd610585366004614546565b60366020526000908152604090205460ff1681565b3480156105a657600080fd5b5061020d6105b5366004614fa4565b6125e4565b6037546001600160a01b031633148015906105e057506038546001600160a01b03163314155b156105fe57604051632678482f60e21b815260040160405180910390fd5b6106126001600160a01b03841683836125f9565b816001600160a01b0316836001600160a01b03167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488360405161065791815260200190565b60405180910390a3505050565b6037546001600160a01b0316331480159061068a57506038546001600160a01b03163314155b156106a857604051632678482f60e21b815260040160405180910390fd5b82851415806106b75750808514155b156106d5576040516346282e8d60e01b815260040160405180910390fd5b60005b85811015610a95576000603360008989858181106106f8576106f8615063565b905060200201602081019061070d9190614546565b6001600160a01b03908116825260208083019390935260409182016000908120549091168082526034909352908120919250908188888681811061075357610753615063565b90506020020160208101906107689190614546565b6001600160a01b03908116825260208201929092526040016000206003810154600282015491935082169190811690841615806107ad575082546001600160a01b0316155b156107cb5760405163d92e233d60e01b815260040160405180910390fd5b8686868181106107dd576107dd615063565b90506020020160208101906107f29190614546565b6003840180546001600160a01b0319166001600160a01b0392831617905582161561088b5760405163095ea7b360e01b81526001600160a01b0382169063095ea7b390610846908590600090600401615079565b6020604051808303816000875af1158015610865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108899190615092565b505b600087878781811061089f5761089f615063565b90506020020160208101906108b49190614546565b6001600160a01b031614610a1857806001600160a01b03168787878181106108de576108de615063565b90506020020160208101906108f39190614546565b6001600160a01b0316632dc7d74c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095691906150af565b6001600160a01b03161461097d5760405163c1ab6dc160e01b815260040160405180910390fd5b806001600160a01b031663095ea7b388888881811061099e5761099e615063565b90506020020160208101906109b39190614546565b6000196040518363ffffffff1660e01b81526004016109d3929190615079565b6020604051808303816000875af11580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a169190615092565b505b868686818110610a2a57610a2a615063565b9050602002016020810190610a3f9190614546565b6001600160a01b0316816001600160a01b03167f68bfc93bebf089f076e093803a9da9d10f6f78e2bde5f83b50b249ed5333442460405160405180910390a3505050508080610a8d906150e2565b9150506106d8565b50505050505050565b60005b8751811015610c0257878181518110610abc57610abc615063565b60200260200101516040015115610beb57878181518110610adf57610adf615063565b6020026020010151600001516001600160a01b031663f51cc7dd898381518110610b0b57610b0b615063565b6020026020010151602001513060018c8681518110610b2c57610b2c615063565b6020026020010151606001518d8781518110610b4a57610b4a615063565b6020026020010151608001518e8881518110610b6857610b68615063565b602002602001015160a001518f8981518110610b8657610b86615063565b602002602001015160c001516040518863ffffffff1660e01b8152600401610bb497969594939291906150fd565b600060405180830381600087803b158015610bce57600080fd5b505af1158015610be2573d6000803e3d6000fd5b50505050610bf0565b610c02565b80610bfa816150e2565b915050610aa1565b50610c11868686868686611563565b60005b8751811015610d6b57878181518110610c2f57610c2f615063565b602002602001015160400151610d5957878181518110610c5157610c51615063565b6020026020010151600001516001600160a01b031663f51cc7dd898381518110610c7d57610c7d615063565b6020026020010151602001513060008c8681518110610c9e57610c9e615063565b6020026020010151606001518d8781518110610cbc57610cbc615063565b6020026020010151608001518e8881518110610cda57610cda615063565b602002602001015160a001518f8981518110610cf857610cf8615063565b602002602001015160c001516040518863ffffffff1660e01b8152600401610d2697969594939291906150fd565b600060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b505050505b80610d63816150e2565b915050610c14565b5050505050505050565b6037546001600160a01b03163314801590610d9b57506038546001600160a01b03163314155b15610db957604051632678482f60e21b815260040160405180910390fd5b8285141580610dc85750808314155b15610de6576040516346282e8d60e01b815260040160405180910390fd5b610dee6144c7565b6000805b87811015611123576000858583818110610e0e57610e0e615063565b9050602002016020810190610e239190614546565b6001600160a01b03161415610e9157610e88898983818110610e4757610e47615063565b9050602002016020810190610e5c9190614546565b888884818110610e6e57610e6e615063565b9050602002016020810190610e839190614546565b612654565b93509150610f51565b848482818110610ea357610ea3615063565b9050602002016020810190610eb89190614546565b6001600160a01b0381166000908152603460205260408120919350888884818110610ee557610ee5615063565b9050602002016020810190610efa9190614546565b6001600160a01b039081168252602080830193909352604091820160002082516080810184528154831681526001820154831694810194909452600281015482169284019290925260039091015416606082015292505b6001600160a01b038216600090815260346020526040812090888884818110610f7c57610f7c615063565b9050602002016020810190610f919190614546565b6001600160a01b03168152602081019190915260400160002080546001600160a01b03199081168255600182018054821690556002820180548216905560039091018054909116905561100c878783818110610fef57610fef615063565b90506020020160208101906110049190614546565b836000612705565b61104287878381811061102157611021615063565b90506020020160208101906110369190614546565b84602001516000612705565b60608301516001600160a01b0316156110d15782604001516001600160a01b031663095ea7b3846060015160006040518363ffffffff1660e01b815260040161108c929190615079565b6020604051808303816000875af11580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190615092565b505b82606001516001600160a01b031683600001516001600160a01b0316836001600160a01b0316600080516020615cf283398151915260405160405180910390a48061111b816150e2565b915050610df2565b505050505050505050565b6037546001600160a01b0316331480159061115457506038546001600160a01b03163314155b1561117257604051632678482f60e21b815260040160405180910390fd5b6001600160a01b0380821660009081526033602052604080822080546001600160a01b03198116909155905192169182917f3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda91a25050565b6037546001600160a01b031633148015906111f057506038546001600160a01b03163314155b1561120e57604051632678482f60e21b815260040160405180910390fd5b6001600160a01b0382166112355760405163d92e233d60e01b815260040160405180910390fd5b6038546001600160a01b038381169116148061125e57506037546001600160a01b038381169116145b1561127c5760405163e6c4247b60e01b815260040160405180910390fd5b80156112a257603780546001600160a01b0319166001600160a01b0384161790556112be565b603880546001600160a01b0319166001600160a01b0384161790555b816001600160a01b03167f4526a942aaed9ea92b149506bb00ccf0f9267091de10444718cf9b09e05dc680826040516112fb911515815260200190565b60405180910390a25050565b6037546001600160a01b0316331480159061132d57506038546001600160a01b03163314155b1561134b57604051632678482f60e21b815260040160405180910390fd5b828514158061135a5750808514155b15611378576040516346282e8d60e01b815260040160405180910390fd5b60005b85811015610a955760006033600089898581811061139b5761139b615063565b90506020020160208101906113b09190614546565b6001600160a01b039081168252602082019290925260400160002054169050611426818787858181106113e5576113e5615063565b90506020020160208101906113fa9190614546565b86868681811061140c5761140c615063565b90506020020160208101906114219190614546565b6127cc565b5080611431816150e2565b91505061137b565b61144e6001600160a01b038216333087612a62565b61145f858585600086866000612a9a565b5050505050565b6037546001600160a01b0316331480159061148c57506038546001600160a01b03163314155b156114aa57604051632678482f60e21b815260040160405180910390fd5b84831415806114b95750848114155b156114d7576040516346282e8d60e01b815260040160405180910390fd5b60005b85811015610a95576115518787838181106114f7576114f7615063565b905060200201602081019061150c9190614546565b86868481811061151e5761151e615063565b90506020020160208101906115339190614546565b85858581811061154557611545615063565b90506020020135612705565b8061155b816150e2565b9150506114da565b60005b86518110156116ea5786818151811061158157611581615063565b6020026020010151600001516001600160a01b031663d505accf8883815181106115ad576115ad615063565b602002602001015160200151308a85815181106115cc576115cc615063565b6020026020010151604001518b86815181106115ea576115ea615063565b6020026020010151606001518c878151811061160857611608615063565b6020026020010151608001518d888151811061162657611626615063565b602002602001015160a001518e898151811061164457611644615063565b602090810291909101015160c001516040516001600160e01b031960e08a901b1681526001600160a01b0397881660048201529690951660248701526044860193909352606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b1580156116bf57600080fd5b505af11580156116d3573d6000803e3d6000fd5b5050505080806116e2906150e2565b915050611566565b506116f36144ee565b6116fb6144ee565b60005b87518110156117b95761176133308a848151811061171e5761171e615063565b6020026020010151602001518b858151811061173c5761173c615063565b6020026020010151600001516001600160a01b0316612a62909392919063ffffffff16565b6117a783838a848151811061177857611778615063565b6020026020010151600001518b858151811061179657611796615063565b602002602001015160200151612b2a565b806117b1816150e2565b9150506116fe565b5060005b86518110156118a45760006118668883815181106117dd576117dd615063565b6020026020010151600001518984815181106117fb576117fb615063565b6020026020010151604001518a858151811061181957611819615063565b6020026020010151606001518b868151811061183757611837615063565b602002602001015160a001518c878151811061185557611855615063565b602002602001015160800151612bb5565b905061189184848a858151811061187f5761187f615063565b60200260200101516020015184612b2a565b508061189c816150e2565b9150506117bd565b5060005b855181101561236c5760008682815181106118c5576118c5615063565b602002602001015160098111156118de576118de61513e565b1415611ab55760008060008060008060008b8b8981811061190157611901615063565b90506020028101906119139190615154565b81019061192091906151a5565b965096509650965096509650965060007331429d1856ad1377a8a0079410b297e1a9e214c26001600160a01b03166370a08231896040518263ffffffff1660e01b8152600401611970919061451a565b602060405180830381865afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b1919061527c565b90506119c1888787878787612da1565b8615611aa8576040516370a0823160e01b815281907331429d1856ad1377a8a0079410b297e1a9e214c2906370a0823190611a00908c9060040161451a565b602060405180830381865afa158015611a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a41919061527c565b611a4b9190615295565b9050633b9aca00611a5c88836152ac565b611a6691906152cb565b9050611a887331429d1856ad1377a8a0079410b297e1a9e214c2333084612a62565b611aa88b8b7331429d1856ad1377a8a0079410b297e1a9e214c284612b2a565b505050505050505061235a565b6001868281518110611ac957611ac9615063565b60200260200101516009811115611ae257611ae261513e565b1415611b5c576000806000878785818110611aff57611aff615063565b9050602002810190611b119190615154565b810190611b1e91906152ed565b925092509250600080611b32858585612f72565b90925090506001600160a01b03811615611b5257611b5288888385612b2a565b505050505061235a565b6008868281518110611b7057611b70615063565b60200260200101516009811115611b8957611b8961513e565b1415611bfa57600080868684818110611ba457611ba4615063565b9050602002810190611bb69190615154565b810190611bc39190615338565b91509150611be78186867331429d1856ad1377a8a0079410b297e1a9e214c2613079565b9050611bf3828261312c565b505061235a565b6002868281518110611c0e57611c0e615063565b60200260200101516009811115611c2757611c2761513e565b1415611c8a576000806000806000898987818110611c4757611c47615063565b9050602002810190611c599190615154565b810190611c669190615364565b94509450945094509450611c7c84898986613079565b9350611b528585848461319b565b6005868281518110611c9e57611c9e615063565b60200260200101516009811115611cb757611cb761513e565b1415611d475760008060008060008060008b8b89818110611cda57611cda615063565b9050602002810190611cec9190615154565b810190611cf991906153be565b9650965096509650965096509650611d13868b8b86613079565b9550611d2487878787878787613201565b90965090508515611d3b57611d3b8a8a8389612b2a565b5050505050505061235a565b6003868281518110611d5b57611d5b615063565b60200260200101516009811115611d7457611d7461513e565b1415611de8576000806000806000898987818110611d9457611d94615063565b9050602002810190611da69190615154565b810190611db3919061544b565b94509450945094509450611dc985898984613079565b9450611dd78585858561340c565b9095509150611b5288888488612b2a565b6004868281518110611dfc57611dfc615063565b60200260200101516009811115611e1557611e1561513e565b1415611e825760008060008060008060008b8b89818110611e3857611e38615063565b9050602002810190611e4a9190615154565b810190611e579190615495565b9650965096509650965096509650611e71868b8b85613079565b9550611d3b87878787878787612a9a565b6006868281518110611e9657611e96615063565b60200260200101516009811115611eaf57611eaf61513e565b1415611f2e576000806000806000806000808c8c8a818110611ed357611ed3615063565b9050602002810190611ee59190615154565b810190611ef291906154d9565b97509750975097509750975097509750611f0e878c8c84613079565b9650611f208888888888888888613608565b50505050505050505061235a565b6007868281518110611f4257611f42615063565b60200260200101516009811115611f5b57611f5b61513e565b1415611fbf576000806000806000898987818110611f7b57611f7b615063565b9050602002810190611f8d9190615154565b810190611f9a919061555e565b94509450945094509450611fb085898984613079565b9450611b5285858585856136b9565b6009868281518110611fd357611fd3615063565b60200260200101516009811115611fec57611fec61513e565b141561235a576000806000806000806000808c8c8a81811061201057612010615063565b90506020028101906120229190615154565b81019061202f9190615677565b9750975097509750975097509750975061204a838388613730565b6120578887600019612705565b600080600083511115612144576040516370a0823160e01b81526001600160a01b038a16906370a082319061209090309060040161451a565b602060405180830381865afa1580156120ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d1919061527c565b6040516370a0823160e01b81529092506001600160a01b038b16906370a082319061210090309060040161451a565b602060405180830381865afa15801561211d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612141919061527c565b90505b60006121548987878b8b89613a94565b90506121628b8a6000612705565b83511561225b576040516370a0823160e01b81526001600160a01b038c16906370a082319061219590309060040161451a565b602060405180830381865afa1580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d6919061527c565b604080830191909152516370a0823160e01b81526001600160a01b038b16906370a082319061220990309060040161451a565b602060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a919061527c565b815260608101829052602081018390525b8060400151816060015111156122ba5760006122778f8d613b43565b90508160400151826060015161228d9190615295565b8e82600a811061229f5761229f615063565b602002018181516122b09190615295565b9052506123089050565b806040015181606001511080156122e457506001600160a01b0388163014806122e4575060008451115b15612308576123088e8e8d846060015185604001516123039190615295565b612b2a565b8051602082015110801561232f57506001600160a01b03881630148061232f575060008451115b1561234e5761234e8e8e8c846020015185600001516123039190615295565b50505050505050505050505b80612364816150e2565b9150506118a8565b5060005b600a8110156111235760008282600a811061238d5761238d615063565b602002015111156123da576123da338383600a81106123ae576123ae615063565b60200201518584600a81106123c5576123c5615063565b60200201516001600160a01b031691906125f9565b806123e4816150e2565b915050612370565b61243d848484600186516001600160401b0381111561240d5761240d614681565b604051908082528060200260200182016040528015612436578160200160208202803683370190505b5086612da1565b50505050565b6037546001600160a01b0316331480159061246957506038546001600160a01b03163314155b1561248757604051632678482f60e21b815260040160405180910390fd5b6001600160a01b0382166124ae5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382811660009081526033602052604090205416156124e75760405163f411c32760e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b031663ee565a636040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612531573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255591906150af565b6001600160a01b03161461257c5760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0382811660009081526033602052604080822080546001600160a01b0319169385169384179055517f3db297c09c19972ba6a701ff373ab97e21ff1e4992e863c7abe44e9b2fed08479190a25050565b61145f858585600086866000613bce565b61145f85858560008686612da1565b3b151590565b61264f8363a9059cbb60e01b8484604051602401612618929190615079565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613c2c565b505050565b600061265e6144c7565b50506001600160a01b038083166000908152603360209081526040808320548416808452603483528184208686168552835292819020815160808101835281548616815260018201548616938101939093526002810154851691830191909152600301549092166060830152908115806126e0575080516001600160a01b0316155b156126fe5760405163d92e233d60e01b815260040160405180910390fd5b9250929050565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e906127369030908790600401615752565b602060405180830381865afa158015612753573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612777919061527c565b9050818110156127a5576127a08361278f8385615295565b6001600160a01b0387169190613d03565b61243d565b8181111561243d5761243d836127bb8484615295565b6001600160a01b0387169190613da0565b6000806000856001600160a01b031663ba8b7223866040518263ffffffff1660e01b81526004016127fd919061451a565b600060405180830381865afa15801561281a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261284291908101906158dc565b5050506001600160a01b03808d166000908152603460209081526040808320848b16845290915290208054979a50959850939650939490921615925061289e9150505760405163f411c32760e01b815260040160405180910390fd5b80546001600160a01b038088166001600160a01b0319928316178355600183018054858316908416179055600283018054868316931692909217909155851615612a0757846001600160a01b0316632dc7d74c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612922573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294691906150af565b6001600160a01b0316836001600160a01b0316146129775760405163c1ab6dc160e01b815260040160405180910390fd5b6003810180546001600160a01b0319166001600160a01b038781169190911790915560405163095ea7b360e01b81529084169063095ea7b3906129c290889060001990600401615079565b6020604051808303816000875af11580156129e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a059190615092565b505b612a148488600019612705565b612a218483600019612705565b846001600160a01b0316866001600160a01b0316886001600160a01b0316600080516020615cf283398151915260405160405180910390a450505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261243d9085906323b872dd60e01b90608401612618565b6000612aa885858585613e9c565b6040516303a7722360e11b8152600481018a90526001600160a01b038b811660248301528083166044830152606482018a905291945091925082169063074ee446906084015b600060405180830381600087803b158015612b0857600080fd5b505af1158015612b1c573d6000803e3d6000fd5b505050505050505050505050565b6000612b368584613b43565b905060008582600a8110612b4c57612b4c615063565b60200201516001600160a01b03161415612b8757828582600a8110612b7357612b73615063565b6001600160a01b0390921660209290920201525b818482600a8110612b9a57612b9a615063565b60200201818151612bab9190615a18565b9052505050505050565b6000844710612d73576001600160a01b03861673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21415612c505773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c3257600080fd5b505af1158015612c46573d6000803e3d6000fd5b5050505050612d88565b6001600160a01b038616737f39c581f595b53c5cb19bd0b3f8da6c935e2ca01415612d6e57604051631920845160e01b81526004810186905260009073ae7ab96520de3a18e5e111b5eaab095312d7fe8490631920845190602401602060405180830381865afa158015612cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cec919061527c565b9050600080737f39c581f595b53c5cb19bd0b3f8da6c935e2ca06001600160a01b03168860405160006040518083038185875af1925050503d8060008114612d50576040519150601f19603f3d011682016040523d82523d6000602084013e612d55565b606091505b509150915081612d6857612d6881613ed3565b50909550505b612d88565b612d886001600160a01b038716333088612a62565b612d958686868686613efb565b90505b95945050505050565b83518251141580612db457508351815114155b15612dd2576040516346282e8d60e01b815260040160405180910390fd5b60005b8551811015612e6857858181518110612df057612df0615063565b60200260200101516001600160a01b03166384e9bd7e886040518263ffffffff1660e01b8152600401612e23919061451a565b600060405180830381600087803b158015612e3d57600080fd5b505af1158015612e51573d6000803e3d6000fd5b505050508080612e60906150e2565b915050612dd5565b5060005b8451811015610a955760008415612e9e57828281518110612e8f57612e8f615063565b60200260200101519050612ee5565b6000612edc858481518110612eb557612eb5615063565b6020026020010151858581518110612ecf57612ecf615063565b6020026020010151612654565b60200151925050505b806001600160a01b0316631c4b774b878481518110612f0657612f06615063565b60200260200101516040518263ffffffff1660e01b8152600401612f2c91815260200190565b600060405180830381600087803b158015612f4657600080fd5b505af1158015612f5a573d6000803e3d6000fd5b50505050508080612f6a906150e2565b915050612e6c565b600080836001600160a01b0316631e83409a866040518263ffffffff1660e01b8152600401612fa1919061451a565b6020604051808303816000875af1158015612fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe4919061527c565b9150821561306c57836001600160a01b031663fc0c546a6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561302c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305091906150af565b90506130676001600160a01b038216333085612a62565b613071565b600091505b935093915050565b6000806130868584613b43565b905060008582600a811061309c5761309c615063565b60200201516001600160a01b031614156130c957604051631d79b70560e11b815260040160405180910390fd5b633b9aca008482600a81106130e0576130e0615063565b60200201516130ef90886152ac565b6130f991906152cb565b9150818482600a811061310e5761310e615063565b6020020181815161311f9190615295565b9052509095945050505050565b604051631d23139f60e11b8152730c462dbb9ec8cd1630f1728b2cfd2769d09f0dd590633a46273e906131659085908590600401615079565b600060405180830381600087803b15801561317f57600080fd5b505af1158015613193573d6000803e3d6000fd5b505050505050565b6040516383df674760e01b8152600481018490526001600160a01b03858116602483015282151560448301528316906383df674790606401600060405180830381600087803b1580156131ed57600080fd5b505af1158015610d6b573d6000803e3d6000fd5b60008060008715613213575085613236565b61321b6144c7565b6132258888612654565b805160409091015190975095509150505b6001600160a01b038a16301415613399576040516370a0823160e01b81526001600160a01b038516906370a082319061327390309060040161451a565b602060405180830381865afa158015613290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b4919061527c565b604051630b8b4a6160e21b81529093506001600160a01b03821690632e2d2984906132e7908c9030908a90600401615a30565b600060405180830381600087803b15801561330157600080fd5b505af1158015613315573d6000803e3d6000fd5b50506040516370a0823160e01b81528592506001600160a01b03871691506370a082319061334790309060040161451a565b602060405180830381865afa158015613364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613388919061527c565b6133929190615295565b92506133fc565b604051630b8b4a6160e21b81526001600160a01b03821690632e2d2984906133c9908c908e908a90600401615a30565b600060405180830381600087803b1580156133e357600080fd5b505af11580156133f7573d6000803e3d6000fd5b505050505b5082905097509795505050505050565b600080600080861561348757859150849050806001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561345c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348091906150af565b94506134a1565b61348f6144c7565b6134998787612654565b519093509150505b6040516370a0823160e01b81526001600160a01b038616906370a08231906134cd90309060040161451a565b602060405180830381865afa1580156134ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350e919061527c565b60405163047c207560e31b8152600481018a9052306024820181905260448201526001600160a01b038381166064830152919550908316906323e103a890608401600060405180830381600087803b15801561356957600080fd5b505af115801561357d573d6000803e3d6000fd5b50506040516370a0823160e01b81528692506001600160a01b03881691506370a08231906135af90309060040161451a565b602060405180830381865afa1580156135cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f0919061527c565b6135fa9190615295565b989497509395505050505050565b60008361362457600061361b8484612654565b60200151945050505b60405163a62b2a3d60e01b81526001600160a01b038a81166004830152602482018a905260448201899052606482018890526084820187905284169063a62b2a3d9060a4016020604051808303816000875af1158015613688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ac919061527c565b9998505050505050505050565b826136d35760006136ca8383612654565b60200151935050505b6040516324d83b7960e01b815260048101859052602481018690526001600160a01b038316906324d83b7990604401600060405180830381600087803b15801561371c57600080fd5b505af1158015611123573d6000803e3d6000fd5b600a835110613752576040516346282e8d60e01b815260040160405180910390fd5b61375a6144ee565b60008080805b8751811015610d6b5760008089838151811061377e5761377e615063565b602002602001015160078111156137975761379761513e565b14156137a7576001945050613a82565b60038983815181106137bb576137bb615063565b602002602001015160078111156137d4576137d461513e565b148061380a575060058983815181106137ef576137ef615063565b602002602001015160078111156138085761380861513e565b145b156138445787828151811061382157613821615063565b602002602001015180602001905181019061383c9190615a4f565b50905061391d565b600189838151811061385857613858615063565b602002602001015160078111156138715761387161513e565b14156138ab5787828151811061388957613889615063565b60200260200101518060200190518101906138a4919061527c565b905061391d565b60068983815181106138bf576138bf615063565b602002602001015160078111156138d8576138d861513e565b1415613917578782815181106138f0576138f0615063565b602002602001015180602001905181019061390b9190615a73565b5091925061391d915050565b50613a82565b8061399b57841561392e5750613a82565b8361399857866001600160a01b0316633c2e941b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613971573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613995919061527c565b93505b50825b60005b838110156139ce57818782600a81106139b9576139b9615063565b505050806139c6816150e2565b91505061399e565b5060405163430c208160e01b81526001600160a01b0388169063430c2081906139fd9033908590600401615079565b602060405180830381865afa158015613a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3e9190615092565b613a5b5760405163390cdd9b60e21b815260040160405180910390fd5b808684600a8110613a6e57613a6e615063565b6020020152613a7e600184615a18565b9250505b80613a8c816150e2565b915050613760565b613abf6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051631bd1f8d360e31b81526001600160a01b0388169063de8fc69890613af5908990899033908a908a908a90600401615b5e565b6080604051808303816000875af1158015613b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b389190615c05565b979650505050505050565b6000805b600a81108015613b77575060008482600a8110613b6657613b66615063565b60200201516001600160a01b031614155b15613bc557826001600160a01b03168482600a8110613b9857613b98615063565b60200201516001600160a01b03161415613bb3579050613bc8565b80613bbd816150e2565b915050613b47565b90505b92915050565b6000613bdc85858585613e9c565b604051633688210b60e11b8152600481018a90523360248201526001600160a01b038b811660448301528083166064830152608482018a9052919450919250821690636d1042169060a401612aee565b6000613c81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613fac9092919063ffffffff16565b80519091501561264f5780806020019051810190613c9f9190615092565b61264f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613d34929190615752565b602060405180830381865afa158015613d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d75919061527c565b613d7f9190615a18565b905061243d8463095ea7b360e01b8584604051602401612618929190615079565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90613dd19030908790600401615752565b602060405180830381865afa158015613dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e12919061527c565b905081811015613e765760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b6064820152608401613cfa565b6040518282039061145f90869063095ea7b360e01b906126189088908690602401615079565b60008060008615613eae575084613ec7565b613eb66144c7565b613ec08787612654565b5195509150505b96929550919350505050565b805115613ee257805181602001fd5b60405163ee418e3760e01b815260040160405180910390fd5b600080836003811115613f1057613f1061513e565b1415613f2957613f2286868685613fc5565b9050612d98565b6001836003811115613f3d57613f3d61513e565b1415613f4e57613f228685846140bb565b6002836003811115613f6257613f6261513e565b1415613f7257613f2285856141d2565b6003836003811115613f8657613f8661513e565b1415613f93575083612d98565b60405163574b16a760e11b815260040160405180910390fd5b6060613fbb848460008561426e565b90505b9392505050565b6001600160a01b03841660009081526035602052604081205460ff1661402557603954614001906001600160a01b03878116911660001961438b565b6001600160a01b0385166000908152603560205260409020805460ff191660011790555b6039546040805160a08101825284815230602082015242818301526060810187905260808101869052905163c04b8d5960e01b81526001600160a01b039092169163c04b8d599161407891600401615c6a565b6020604051808303816000875af1158015614097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d98919061527c565b6001600160a01b03831660009081526036602052604081205460ff1661411b57603a546140f7906001600160a01b03868116911660001961438b565b6001600160a01b0384166000908152603660205260409020805460ff191660011790555b603a5460405160009182916001600160a01b039091169061413d908690615cc2565b6000604051808303816000865af19150503d806000811461417a576040519150601f19603f3d011682016040523d82523d6000602084013e61417f565b606091505b5091509150816141925761419281613ed3565b808060200190518101906141a6919061527c565b9250848310156141c95760405163a1aabbe160e01b815260040160405180910390fd5b50509392505050565b604051630ea598cb60e41b815260048101839052600090737f39c581f595b53c5cb19bd0b3f8da6c935e2ca09063ea598cb0906024016020604051808303816000875af1158015614227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424b919061527c565b905081811015613bc85760405163a1aabbe160e01b815260040160405180910390fd5b6060824710156142cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401613cfa565b843b61431d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401613cfa565b600080866001600160a01b031685876040516143399190615cc2565b60006040518083038185875af1925050503d8060008114614376576040519150601f19603f3d011682016040523d82523d6000602084013e61437b565b606091505b5091509150613b3882828661448e565b8015806144045750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906143c19030908690600401615752565b602060405180830381865afa1580156143de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614402919061527c565b155b61446f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401613cfa565b61264f8363095ea7b360e01b8484604051602401612618929190615079565b6060831561449d575081613fbe565b8251156144ad5782518084602001fd5b8160405162461bcd60e51b8152600401613cfa9190615cde565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806101400160405280600a906020820280368337509192915050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461454357600080fd5b50565b60006020828403121561455857600080fd5b8135613bc58161452e565b60008060006060848603121561457857600080fd5b83356145838161452e565b925060208401356145938161452e565b929592945050506040919091013590565b60008083601f8401126145b657600080fd5b5081356001600160401b038111156145cd57600080fd5b6020830191508360208260051b85010111156126fe57600080fd5b6000806000806000806060878903121561460157600080fd5b86356001600160401b038082111561461857600080fd5b6146248a838b016145a4565b9098509650602089013591508082111561463d57600080fd5b6146498a838b016145a4565b9096509450604089013591508082111561466257600080fd5b5061466f89828a016145a4565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156146b9576146b9614681565b60405290565b604080519081016001600160401b03811182821017156146b9576146b9614681565b60405160c081016001600160401b03811182821017156146b9576146b9614681565b60405161010081016001600160401b03811182821017156146b9576146b9614681565b604051601f8201601f191681016001600160401b038111828210171561474e5761474e614681565b604052919050565b60006001600160401b0382111561476f5761476f614681565b5060051b60200190565b801515811461454357600080fd5b803561479281614779565b919050565b803560ff8116811461479257600080fd5b600082601f8301126147b957600080fd5b813560206147ce6147c983614756565b614726565b82815260e092830285018201928282019190878511156147ed57600080fd5b8387015b8581101561487e5781818a0312156148095760008081fd5b614811614697565b813561481c8161452e565b81528186013561482b8161452e565b8187015260408281013561483e81614779565b90820152606082810135908201526080614859818401614797565b9082015260a0828101359082015260c0808301359082015284529284019281016147f1565b5090979650505050505050565b600082601f83011261489c57600080fd5b813560206148ac6147c983614756565b82815260e092830285018201928282019190878511156148cb57600080fd5b8387015b8581101561487e5781818a0312156148e75760008081fd5b6148ef614697565b81356148fa8161452e565b8152818601356149098161452e565b818701526040828101359082015260608083013590820152608061492e818401614797565b9082015260a0828101359082015260c0808301359082015284529284019281016148cf565b600082601f83011261496457600080fd5b813560206149746147c983614756565b82815260069290921b8401810191818101908684111561499357600080fd5b8286015b848110156149db57604081890312156149b05760008081fd5b6149b86146bf565b81356149c38161452e565b81528185013585820152835291830191604001614997565b509695505050505050565b600082601f8301126149f757600080fd5b81356001600160401b03811115614a1057614a10614681565b614a23601f8201601f1916602001614726565b818152846020838601011115614a3857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112614a6657600080fd5b81356020614a766147c983614756565b82815260059290921b84018101918181019086841115614a9557600080fd5b8286015b848110156149db5780356001600160401b0380821115614ab95760008081fd5b9088019060c0828b03601f1901811315614ad35760008081fd5b614adb6146e1565b87840135614ae88161452e565b8152604084810135614af98161452e565b808a84015250606080860135828401526080915081860135818401525060a08086013585811115614b2a5760008081fd5b614b388f8c838a01016149e6565b8484015250948301359460048610614b5257600094508485fd5b8201949094528652505050918301918301614a99565b600082601f830112614b7957600080fd5b81356020614b896147c983614756565b82815260059290921b84018101918181019086841115614ba857600080fd5b8286015b848110156149db578035600a8110614bc45760008081fd5b8352918301918301614bac565b600080600080600080600060c0888a031215614bec57600080fd5b87356001600160401b0380821115614c0357600080fd5b614c0f8b838c016147a8565b985060208a0135915080821115614c2557600080fd5b614c318b838c0161488b565b975060408a0135915080821115614c4757600080fd5b614c538b838c01614953565b965060608a0135915080821115614c6957600080fd5b614c758b838c01614a55565b955060808a0135915080821115614c8b57600080fd5b614c978b838c01614b68565b945060a08a0135915080821115614cad57600080fd5b50614cba8a828b016145a4565b989b979a50959850939692959293505050565b60008060408385031215614ce057600080fd5b8235614ceb8161452e565b91506020830135614cfb8161452e565b809150509250929050565b60008060408385031215614d1957600080fd5b8235614d248161452e565b91506020830135614cfb81614779565b600080600080600060a08688031215614d4c57600080fd5b8535614d578161452e565b945060208601359350604086013592506060860135614d758161452e565b91506080860135614d858161452e565b809150509295509295909350565b60008060008060008060a08789031215614dac57600080fd5b86356001600160401b0380821115614dc357600080fd5b614dcf8a838b0161488b565b97506020890135915080821115614de557600080fd5b614df18a838b01614953565b96506040890135915080821115614e0757600080fd5b614e138a838b01614a55565b95506060890135915080821115614e2957600080fd5b614e358a838b01614b68565b9450608089013591508082111561466257600080fd5b600082601f830112614e5c57600080fd5b81356020614e6c6147c983614756565b82815260059290921b84018101918181019086841115614e8b57600080fd5b8286015b848110156149db578035614ea28161452e565b8352918301918301614e8f565b600082601f830112614ec057600080fd5b81356020614ed06147c983614756565b82815260059290921b84018101918181019086841115614eef57600080fd5b8286015b848110156149db5780358352918301918301614ef3565b60008060008060808587031215614f2057600080fd5b8435614f2b8161452e565b935060208501356001600160401b0380821115614f4757600080fd5b614f5388838901614e4b565b94506040870135915080821115614f6957600080fd5b614f7588838901614eaf565b93506060870135915080821115614f8b57600080fd5b50614f9887828801614e4b565b91505092959194509250565b600080600080600060a08688031215614fbc57600080fd5b8535614fc78161452e565b945060208601356001600160401b0380821115614fe357600080fd5b614fef89838a01614e4b565b9550604088013591508082111561500557600080fd5b61501189838a01614eaf565b9450606088013591508082111561502757600080fd5b61503389838a01614e4b565b9350608088013591508082111561504957600080fd5b5061505688828901614e4b565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b6000602082840312156150a457600080fd5b8151613bc581614779565b6000602082840312156150c157600080fd5b8151613bc58161452e565b634e487b7160e01b600052601160045260246000fd5b60006000198214156150f6576150f66150cc565b5060010190565b6001600160a01b0397881681529590961660208601529215156040850152606084019190915260ff16608083015260a082015260c081019190915260e00190565b634e487b7160e01b600052602160045260246000fd5b6000808335601e1984360301811261516b57600080fd5b8301803591506001600160401b0382111561518557600080fd5b6020019150368190038213156126fe57600080fd5b80356147928161452e565b600080600080600080600060e0888a0312156151c057600080fd5b6151c98861519a565b96506020880135955060408801356001600160401b03808211156151ec57600080fd5b6151f88b838c01614e4b565b965060608a013591508082111561520e57600080fd5b61521a8b838c01614eaf565b955061522860808b01614787565b945060a08a013591508082111561523e57600080fd5b61524a8b838c01614e4b565b935060c08a013591508082111561526057600080fd5b5061526d8a828b01614e4b565b91505092959891949750929550565b60006020828403121561528e57600080fd5b5051919050565b6000828210156152a7576152a76150cc565b500390565b60008160001904831182151516156152c6576152c66150cc565b500290565b6000826152e857634e487b7160e01b600052601260045260246000fd5b500490565b60008060006060848603121561530257600080fd5b833561530d8161452e565b9250602084013561531d8161452e565b9150604084013561532d81614779565b809150509250925092565b6000806040838503121561534b57600080fd5b82356153568161452e565b946020939093013593505050565b600080600080600060a0868803121561537c57600080fd5b85356153878161452e565b945060208601359350604086013561539e8161452e565b925060608601356153ae8161452e565b91506080860135614d8581614779565b600080600080600080600060e0888a0312156153d957600080fd5b87356153e48161452e565b96506020880135955060408801356153fb81614779565b9450606088013561540b8161452e565b9350608088013561541b8161452e565b925060a088013561542b8161452e565b915060c088013561543b8161452e565b8091505092959891949750929550565b600080600080600060a0868803121561546357600080fd5b85359450602086013561547581614779565b935060408601356154858161452e565b92506060860135614d758161452e565b600080600080600080600060e0888a0312156154b057600080fd5b87356154bb8161452e565b96506020880135955060408801359450606088013561540b81614779565b600080600080600080600080610100898b0312156154f657600080fd5b88356155018161452e565b97506020890135965060408901359550606089013594506080890135935060a089013561552d81614779565b925060c089013561553d8161452e565b915060e089013561554d8161452e565b809150509295985092959890939650565b600080600080600060a0868803121561557657600080fd5b8535945060208601359350604086013561548581614779565b600082601f8301126155a057600080fd5b813560206155b06147c983614756565b82815260059290921b840181019181810190868411156155cf57600080fd5b8286015b848110156149db578035600881106155eb5760008081fd5b83529183019183016155d3565b600082601f83011261560957600080fd5b813560206156196147c983614756565b82815260059290921b8401810191818101908684111561563857600080fd5b8286015b848110156149db5780356001600160401b0381111561565b5760008081fd5b6156698986838b01016149e6565b84525091830191830161563c565b600080600080600080600080610100898b03121561569457600080fd5b61569d8961519a565b97506156ab60208a0161519a565b96506156b960408a0161519a565b95506156c760608a0161519a565b94506156d560808a0161519a565b935060a08901356001600160401b03808211156156f157600080fd5b6156fd8c838d0161558f565b945060c08b013591508082111561571357600080fd5b61571f8c838d016155f8565b935060e08b013591508082111561573557600080fd5b506157428b828c016149e6565b9150509295985092959890939650565b6001600160a01b0392831681529116602082015260400190565b80516001600160401b038116811461479257600080fd5b600082601f83011261579457600080fd5b815160206157a46147c983614756565b82815260059290921b840181019181810190868411156157c357600080fd5b8286015b848110156149db576157d88161576c565b83529183019183016157c7565b600061010082840312156157f857600080fd5b615800614703565b82519091506001600160401b038082111561581a57600080fd5b61582685838601615783565b8352602084015191508082111561583c57600080fd5b61584885838601615783565b6020840152604084015191508082111561586157600080fd5b61586d85838601615783565b6040840152606084015191508082111561588657600080fd5b5061589384828501615783565b6060830152506158a56080830161576c565b60808201526158b660a0830161576c565b60a08201526158c760c0830161576c565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b036102008112156158fc57600080fd5b8a516159078161452e565b60208c0151909a506159188161452e565b60408c01519099506159298161452e565b60608c015190985061593a8161452e565b8097505060808b0151955060a08b0151945060c08b015193506101008060df198301121561596757600080fd5b61596f614703565b60e08d01518152908c015160208201526101208c015160408201526101408c0151606082015290506159a46101608c0161576c565b60808201526159b66101808c0161576c565b60a08201526159c86101a08c0161576c565b60c08201526159da6101c08c0161576c565b60e08201526101e08b01519092506001600160401b038111156159fc57600080fd5b615a088c828d016157e5565b9150509295985092959850929598565b60008219821115615a2b57615a2b6150cc565b500190565b9283526001600160a01b03918216602084015216604082015260600190565b60008060408385031215615a6257600080fd5b505080516020909101519092909150565b60008060008060808587031215615a8957600080fd5b845193506020850151615a9b8161452e565b6040860151606090960151949790965092505050565b60005b83811015615acc578181015183820152602001615ab4565b8381111561243d5750506000910152565b60008151808452615af5816020860160208601615ab1565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015615b51578284038952615b3f848351615add565b98850198935090840190600101615b27565b5091979650505050505050565b60c0808252875190820181905260009060209060e0840190828b0184805b83811015615bb457825160088110615ba257634e487b7160e01b83526021600452602483fd5b85529385019391850191600101615b7c565b5050505083810382850152615bc9818a615b09565b915050615bd9604084018861450d565b615be6606084018761450d565b615bf3608084018661450d565b82810360a08401526136ac8185615add565b600060808284031215615c1757600080fd5b604051608081016001600160401b0381118282101715615c3957615c39614681565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b602081526000825160a06020840152615c8660c0840182615add565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008251615cd4818460208701615ab1565b9190910192915050565b602081526000613fbe6020830184615add56feb3c6ea40376b764923443dc6ded6f0af1b34f1109e2d22c4f499855d960eeeaea2646970667358221220addbfe3d55a3366735709b10a8d00405fe105a55704fa1412758512018727c0464736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063045c08d5146101575780630c340a241461018d5780630db3280f146101ad5780631171bda9146101ed57806322f2d5861461020f5780632c76d7a61461022f578063310fb5e71461024f578063313359b114610262578063452a93201461028a5780634aa4a4fc146102aa578063560a8b78146102d25780635cc6b2d4146102fa5780636fb8df051461031a5780637c295dfa1461033a5780639f48118f146103cb578063a11a233d146103f1578063aacdd99d14610411578063b044d1e014610431578063b803442414610451578063b82c4dc114610487578063cef5cd0a146104a7578063d0772c29146104ba578063d9fb643a146104da578063e00bfe5014610502578063e45e6f301461052a578063ee7b49501461054a578063f5a418bb1461056a578063f8a3a1111461059a57600080fd5b3661015257005b600080fd5b34801561016357600080fd5b50603a54610177906001600160a01b031681565b604051610184919061451a565b60405180910390f35b34801561019957600080fd5b50603754610177906001600160a01b031681565b3480156101b957600080fd5b506101dd6101c8366004614546565b60356020526000908152604090205460ff1681565b6040519015158152602001610184565b3480156101f957600080fd5b5061020d610208366004614563565b6105ba565b005b34801561021b57600080fd5b5061020d61022a3660046145e8565b610664565b34801561023b57600080fd5b50603954610177906001600160a01b031681565b61020d61025d366004614bd1565b610a9e565b34801561026e57600080fd5b506101777331429d1856ad1377a8a0079410b297e1a9e214c281565b34801561029657600080fd5b50603854610177906001600160a01b031681565b3480156102b657600080fd5b5061017773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156102de57600080fd5b50610177730c462dbb9ec8cd1630f1728b2cfd2769d09f0dd581565b34801561030657600080fd5b5061020d6103153660046145e8565b610d75565b34801561032657600080fd5b5061020d610335366004614546565b61112e565b34801561034657600080fd5b50610398610355366004614ccd565b603460209081526000928352604080842090915290825290208054600182015460028301546003909301546001600160a01b039283169391831692918216911684565b604080516001600160a01b0395861681529385166020850152918416918301919091529091166060820152608001610184565b3480156103d757600080fd5b506103e3633b9aca0081565b604051908152602001610184565b3480156103fd57600080fd5b5061020d61040c366004614d06565b6111ca565b34801561041d57600080fd5b5061020d61042c3660046145e8565b611307565b34801561043d57600080fd5b5061020d61044c366004614d34565b611439565b34801561045d57600080fd5b5061017761046c366004614546565b6033602052600090815260409020546001600160a01b031681565b34801561049357600080fd5b5061020d6104a23660046145e8565b611466565b61020d6104b5366004614d93565b611563565b3480156104c657600080fd5b5061020d6104d5366004614f0a565b6123ec565b3480156104e657600080fd5b50610177737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b34801561050e57600080fd5b5061017773ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b34801561053657600080fd5b5061020d610545366004614ccd565b612443565b34801561055657600080fd5b5061020d610565366004614d34565b6125d3565b34801561057657600080fd5b506101dd610585366004614546565b60366020526000908152604090205460ff1681565b3480156105a657600080fd5b5061020d6105b5366004614fa4565b6125e4565b6037546001600160a01b031633148015906105e057506038546001600160a01b03163314155b156105fe57604051632678482f60e21b815260040160405180910390fd5b6106126001600160a01b03841683836125f9565b816001600160a01b0316836001600160a01b03167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488360405161065791815260200190565b60405180910390a3505050565b6037546001600160a01b0316331480159061068a57506038546001600160a01b03163314155b156106a857604051632678482f60e21b815260040160405180910390fd5b82851415806106b75750808514155b156106d5576040516346282e8d60e01b815260040160405180910390fd5b60005b85811015610a95576000603360008989858181106106f8576106f8615063565b905060200201602081019061070d9190614546565b6001600160a01b03908116825260208083019390935260409182016000908120549091168082526034909352908120919250908188888681811061075357610753615063565b90506020020160208101906107689190614546565b6001600160a01b03908116825260208201929092526040016000206003810154600282015491935082169190811690841615806107ad575082546001600160a01b0316155b156107cb5760405163d92e233d60e01b815260040160405180910390fd5b8686868181106107dd576107dd615063565b90506020020160208101906107f29190614546565b6003840180546001600160a01b0319166001600160a01b0392831617905582161561088b5760405163095ea7b360e01b81526001600160a01b0382169063095ea7b390610846908590600090600401615079565b6020604051808303816000875af1158015610865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108899190615092565b505b600087878781811061089f5761089f615063565b90506020020160208101906108b49190614546565b6001600160a01b031614610a1857806001600160a01b03168787878181106108de576108de615063565b90506020020160208101906108f39190614546565b6001600160a01b0316632dc7d74c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095691906150af565b6001600160a01b03161461097d5760405163c1ab6dc160e01b815260040160405180910390fd5b806001600160a01b031663095ea7b388888881811061099e5761099e615063565b90506020020160208101906109b39190614546565b6000196040518363ffffffff1660e01b81526004016109d3929190615079565b6020604051808303816000875af11580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a169190615092565b505b868686818110610a2a57610a2a615063565b9050602002016020810190610a3f9190614546565b6001600160a01b0316816001600160a01b03167f68bfc93bebf089f076e093803a9da9d10f6f78e2bde5f83b50b249ed5333442460405160405180910390a3505050508080610a8d906150e2565b9150506106d8565b50505050505050565b60005b8751811015610c0257878181518110610abc57610abc615063565b60200260200101516040015115610beb57878181518110610adf57610adf615063565b6020026020010151600001516001600160a01b031663f51cc7dd898381518110610b0b57610b0b615063565b6020026020010151602001513060018c8681518110610b2c57610b2c615063565b6020026020010151606001518d8781518110610b4a57610b4a615063565b6020026020010151608001518e8881518110610b6857610b68615063565b602002602001015160a001518f8981518110610b8657610b86615063565b602002602001015160c001516040518863ffffffff1660e01b8152600401610bb497969594939291906150fd565b600060405180830381600087803b158015610bce57600080fd5b505af1158015610be2573d6000803e3d6000fd5b50505050610bf0565b610c02565b80610bfa816150e2565b915050610aa1565b50610c11868686868686611563565b60005b8751811015610d6b57878181518110610c2f57610c2f615063565b602002602001015160400151610d5957878181518110610c5157610c51615063565b6020026020010151600001516001600160a01b031663f51cc7dd898381518110610c7d57610c7d615063565b6020026020010151602001513060008c8681518110610c9e57610c9e615063565b6020026020010151606001518d8781518110610cbc57610cbc615063565b6020026020010151608001518e8881518110610cda57610cda615063565b602002602001015160a001518f8981518110610cf857610cf8615063565b602002602001015160c001516040518863ffffffff1660e01b8152600401610d2697969594939291906150fd565b600060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b505050505b80610d63816150e2565b915050610c14565b5050505050505050565b6037546001600160a01b03163314801590610d9b57506038546001600160a01b03163314155b15610db957604051632678482f60e21b815260040160405180910390fd5b8285141580610dc85750808314155b15610de6576040516346282e8d60e01b815260040160405180910390fd5b610dee6144c7565b6000805b87811015611123576000858583818110610e0e57610e0e615063565b9050602002016020810190610e239190614546565b6001600160a01b03161415610e9157610e88898983818110610e4757610e47615063565b9050602002016020810190610e5c9190614546565b888884818110610e6e57610e6e615063565b9050602002016020810190610e839190614546565b612654565b93509150610f51565b848482818110610ea357610ea3615063565b9050602002016020810190610eb89190614546565b6001600160a01b0381166000908152603460205260408120919350888884818110610ee557610ee5615063565b9050602002016020810190610efa9190614546565b6001600160a01b039081168252602080830193909352604091820160002082516080810184528154831681526001820154831694810194909452600281015482169284019290925260039091015416606082015292505b6001600160a01b038216600090815260346020526040812090888884818110610f7c57610f7c615063565b9050602002016020810190610f919190614546565b6001600160a01b03168152602081019190915260400160002080546001600160a01b03199081168255600182018054821690556002820180548216905560039091018054909116905561100c878783818110610fef57610fef615063565b90506020020160208101906110049190614546565b836000612705565b61104287878381811061102157611021615063565b90506020020160208101906110369190614546565b84602001516000612705565b60608301516001600160a01b0316156110d15782604001516001600160a01b031663095ea7b3846060015160006040518363ffffffff1660e01b815260040161108c929190615079565b6020604051808303816000875af11580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190615092565b505b82606001516001600160a01b031683600001516001600160a01b0316836001600160a01b0316600080516020615cf283398151915260405160405180910390a48061111b816150e2565b915050610df2565b505050505050505050565b6037546001600160a01b0316331480159061115457506038546001600160a01b03163314155b1561117257604051632678482f60e21b815260040160405180910390fd5b6001600160a01b0380821660009081526033602052604080822080546001600160a01b03198116909155905192169182917f3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda91a25050565b6037546001600160a01b031633148015906111f057506038546001600160a01b03163314155b1561120e57604051632678482f60e21b815260040160405180910390fd5b6001600160a01b0382166112355760405163d92e233d60e01b815260040160405180910390fd5b6038546001600160a01b038381169116148061125e57506037546001600160a01b038381169116145b1561127c5760405163e6c4247b60e01b815260040160405180910390fd5b80156112a257603780546001600160a01b0319166001600160a01b0384161790556112be565b603880546001600160a01b0319166001600160a01b0384161790555b816001600160a01b03167f4526a942aaed9ea92b149506bb00ccf0f9267091de10444718cf9b09e05dc680826040516112fb911515815260200190565b60405180910390a25050565b6037546001600160a01b0316331480159061132d57506038546001600160a01b03163314155b1561134b57604051632678482f60e21b815260040160405180910390fd5b828514158061135a5750808514155b15611378576040516346282e8d60e01b815260040160405180910390fd5b60005b85811015610a955760006033600089898581811061139b5761139b615063565b90506020020160208101906113b09190614546565b6001600160a01b039081168252602082019290925260400160002054169050611426818787858181106113e5576113e5615063565b90506020020160208101906113fa9190614546565b86868681811061140c5761140c615063565b90506020020160208101906114219190614546565b6127cc565b5080611431816150e2565b91505061137b565b61144e6001600160a01b038216333087612a62565b61145f858585600086866000612a9a565b5050505050565b6037546001600160a01b0316331480159061148c57506038546001600160a01b03163314155b156114aa57604051632678482f60e21b815260040160405180910390fd5b84831415806114b95750848114155b156114d7576040516346282e8d60e01b815260040160405180910390fd5b60005b85811015610a95576115518787838181106114f7576114f7615063565b905060200201602081019061150c9190614546565b86868481811061151e5761151e615063565b90506020020160208101906115339190614546565b85858581811061154557611545615063565b90506020020135612705565b8061155b816150e2565b9150506114da565b60005b86518110156116ea5786818151811061158157611581615063565b6020026020010151600001516001600160a01b031663d505accf8883815181106115ad576115ad615063565b602002602001015160200151308a85815181106115cc576115cc615063565b6020026020010151604001518b86815181106115ea576115ea615063565b6020026020010151606001518c878151811061160857611608615063565b6020026020010151608001518d888151811061162657611626615063565b602002602001015160a001518e898151811061164457611644615063565b602090810291909101015160c001516040516001600160e01b031960e08a901b1681526001600160a01b0397881660048201529690951660248701526044860193909352606485019190915260ff16608484015260a483015260c482015260e401600060405180830381600087803b1580156116bf57600080fd5b505af11580156116d3573d6000803e3d6000fd5b5050505080806116e2906150e2565b915050611566565b506116f36144ee565b6116fb6144ee565b60005b87518110156117b95761176133308a848151811061171e5761171e615063565b6020026020010151602001518b858151811061173c5761173c615063565b6020026020010151600001516001600160a01b0316612a62909392919063ffffffff16565b6117a783838a848151811061177857611778615063565b6020026020010151600001518b858151811061179657611796615063565b602002602001015160200151612b2a565b806117b1816150e2565b9150506116fe565b5060005b86518110156118a45760006118668883815181106117dd576117dd615063565b6020026020010151600001518984815181106117fb576117fb615063565b6020026020010151604001518a858151811061181957611819615063565b6020026020010151606001518b868151811061183757611837615063565b602002602001015160a001518c878151811061185557611855615063565b602002602001015160800151612bb5565b905061189184848a858151811061187f5761187f615063565b60200260200101516020015184612b2a565b508061189c816150e2565b9150506117bd565b5060005b855181101561236c5760008682815181106118c5576118c5615063565b602002602001015160098111156118de576118de61513e565b1415611ab55760008060008060008060008b8b8981811061190157611901615063565b90506020028101906119139190615154565b81019061192091906151a5565b965096509650965096509650965060007331429d1856ad1377a8a0079410b297e1a9e214c26001600160a01b03166370a08231896040518263ffffffff1660e01b8152600401611970919061451a565b602060405180830381865afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b1919061527c565b90506119c1888787878787612da1565b8615611aa8576040516370a0823160e01b815281907331429d1856ad1377a8a0079410b297e1a9e214c2906370a0823190611a00908c9060040161451a565b602060405180830381865afa158015611a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a41919061527c565b611a4b9190615295565b9050633b9aca00611a5c88836152ac565b611a6691906152cb565b9050611a887331429d1856ad1377a8a0079410b297e1a9e214c2333084612a62565b611aa88b8b7331429d1856ad1377a8a0079410b297e1a9e214c284612b2a565b505050505050505061235a565b6001868281518110611ac957611ac9615063565b60200260200101516009811115611ae257611ae261513e565b1415611b5c576000806000878785818110611aff57611aff615063565b9050602002810190611b119190615154565b810190611b1e91906152ed565b925092509250600080611b32858585612f72565b90925090506001600160a01b03811615611b5257611b5288888385612b2a565b505050505061235a565b6008868281518110611b7057611b70615063565b60200260200101516009811115611b8957611b8961513e565b1415611bfa57600080868684818110611ba457611ba4615063565b9050602002810190611bb69190615154565b810190611bc39190615338565b91509150611be78186867331429d1856ad1377a8a0079410b297e1a9e214c2613079565b9050611bf3828261312c565b505061235a565b6002868281518110611c0e57611c0e615063565b60200260200101516009811115611c2757611c2761513e565b1415611c8a576000806000806000898987818110611c4757611c47615063565b9050602002810190611c599190615154565b810190611c669190615364565b94509450945094509450611c7c84898986613079565b9350611b528585848461319b565b6005868281518110611c9e57611c9e615063565b60200260200101516009811115611cb757611cb761513e565b1415611d475760008060008060008060008b8b89818110611cda57611cda615063565b9050602002810190611cec9190615154565b810190611cf991906153be565b9650965096509650965096509650611d13868b8b86613079565b9550611d2487878787878787613201565b90965090508515611d3b57611d3b8a8a8389612b2a565b5050505050505061235a565b6003868281518110611d5b57611d5b615063565b60200260200101516009811115611d7457611d7461513e565b1415611de8576000806000806000898987818110611d9457611d94615063565b9050602002810190611da69190615154565b810190611db3919061544b565b94509450945094509450611dc985898984613079565b9450611dd78585858561340c565b9095509150611b5288888488612b2a565b6004868281518110611dfc57611dfc615063565b60200260200101516009811115611e1557611e1561513e565b1415611e825760008060008060008060008b8b89818110611e3857611e38615063565b9050602002810190611e4a9190615154565b810190611e579190615495565b9650965096509650965096509650611e71868b8b85613079565b9550611d3b87878787878787612a9a565b6006868281518110611e9657611e96615063565b60200260200101516009811115611eaf57611eaf61513e565b1415611f2e576000806000806000806000808c8c8a818110611ed357611ed3615063565b9050602002810190611ee59190615154565b810190611ef291906154d9565b97509750975097509750975097509750611f0e878c8c84613079565b9650611f208888888888888888613608565b50505050505050505061235a565b6007868281518110611f4257611f42615063565b60200260200101516009811115611f5b57611f5b61513e565b1415611fbf576000806000806000898987818110611f7b57611f7b615063565b9050602002810190611f8d9190615154565b810190611f9a919061555e565b94509450945094509450611fb085898984613079565b9450611b5285858585856136b9565b6009868281518110611fd357611fd3615063565b60200260200101516009811115611fec57611fec61513e565b141561235a576000806000806000806000808c8c8a81811061201057612010615063565b90506020028101906120229190615154565b81019061202f9190615677565b9750975097509750975097509750975061204a838388613730565b6120578887600019612705565b600080600083511115612144576040516370a0823160e01b81526001600160a01b038a16906370a082319061209090309060040161451a565b602060405180830381865afa1580156120ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d1919061527c565b6040516370a0823160e01b81529092506001600160a01b038b16906370a082319061210090309060040161451a565b602060405180830381865afa15801561211d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612141919061527c565b90505b60006121548987878b8b89613a94565b90506121628b8a6000612705565b83511561225b576040516370a0823160e01b81526001600160a01b038c16906370a082319061219590309060040161451a565b602060405180830381865afa1580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d6919061527c565b604080830191909152516370a0823160e01b81526001600160a01b038b16906370a082319061220990309060040161451a565b602060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a919061527c565b815260608101829052602081018390525b8060400151816060015111156122ba5760006122778f8d613b43565b90508160400151826060015161228d9190615295565b8e82600a811061229f5761229f615063565b602002018181516122b09190615295565b9052506123089050565b806040015181606001511080156122e457506001600160a01b0388163014806122e4575060008451115b15612308576123088e8e8d846060015185604001516123039190615295565b612b2a565b8051602082015110801561232f57506001600160a01b03881630148061232f575060008451115b1561234e5761234e8e8e8c846020015185600001516123039190615295565b50505050505050505050505b80612364816150e2565b9150506118a8565b5060005b600a8110156111235760008282600a811061238d5761238d615063565b602002015111156123da576123da338383600a81106123ae576123ae615063565b60200201518584600a81106123c5576123c5615063565b60200201516001600160a01b031691906125f9565b806123e4816150e2565b915050612370565b61243d848484600186516001600160401b0381111561240d5761240d614681565b604051908082528060200260200182016040528015612436578160200160208202803683370190505b5086612da1565b50505050565b6037546001600160a01b0316331480159061246957506038546001600160a01b03163314155b1561248757604051632678482f60e21b815260040160405180910390fd5b6001600160a01b0382166124ae5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382811660009081526033602052604090205416156124e75760405163f411c32760e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b031663ee565a636040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612531573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255591906150af565b6001600160a01b03161461257c5760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0382811660009081526033602052604080822080546001600160a01b0319169385169384179055517f3db297c09c19972ba6a701ff373ab97e21ff1e4992e863c7abe44e9b2fed08479190a25050565b61145f858585600086866000613bce565b61145f85858560008686612da1565b3b151590565b61264f8363a9059cbb60e01b8484604051602401612618929190615079565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613c2c565b505050565b600061265e6144c7565b50506001600160a01b038083166000908152603360209081526040808320548416808452603483528184208686168552835292819020815160808101835281548616815260018201548616938101939093526002810154851691830191909152600301549092166060830152908115806126e0575080516001600160a01b0316155b156126fe5760405163d92e233d60e01b815260040160405180910390fd5b9250929050565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e906127369030908790600401615752565b602060405180830381865afa158015612753573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612777919061527c565b9050818110156127a5576127a08361278f8385615295565b6001600160a01b0387169190613d03565b61243d565b8181111561243d5761243d836127bb8484615295565b6001600160a01b0387169190613da0565b6000806000856001600160a01b031663ba8b7223866040518263ffffffff1660e01b81526004016127fd919061451a565b600060405180830381865afa15801561281a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261284291908101906158dc565b5050506001600160a01b03808d166000908152603460209081526040808320848b16845290915290208054979a50959850939650939490921615925061289e9150505760405163f411c32760e01b815260040160405180910390fd5b80546001600160a01b038088166001600160a01b0319928316178355600183018054858316908416179055600283018054868316931692909217909155851615612a0757846001600160a01b0316632dc7d74c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612922573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294691906150af565b6001600160a01b0316836001600160a01b0316146129775760405163c1ab6dc160e01b815260040160405180910390fd5b6003810180546001600160a01b0319166001600160a01b038781169190911790915560405163095ea7b360e01b81529084169063095ea7b3906129c290889060001990600401615079565b6020604051808303816000875af11580156129e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a059190615092565b505b612a148488600019612705565b612a218483600019612705565b846001600160a01b0316866001600160a01b0316886001600160a01b0316600080516020615cf283398151915260405160405180910390a450505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261243d9085906323b872dd60e01b90608401612618565b6000612aa885858585613e9c565b6040516303a7722360e11b8152600481018a90526001600160a01b038b811660248301528083166044830152606482018a905291945091925082169063074ee446906084015b600060405180830381600087803b158015612b0857600080fd5b505af1158015612b1c573d6000803e3d6000fd5b505050505050505050505050565b6000612b368584613b43565b905060008582600a8110612b4c57612b4c615063565b60200201516001600160a01b03161415612b8757828582600a8110612b7357612b73615063565b6001600160a01b0390921660209290920201525b818482600a8110612b9a57612b9a615063565b60200201818151612bab9190615a18565b9052505050505050565b6000844710612d73576001600160a01b03861673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21415612c505773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c3257600080fd5b505af1158015612c46573d6000803e3d6000fd5b5050505050612d88565b6001600160a01b038616737f39c581f595b53c5cb19bd0b3f8da6c935e2ca01415612d6e57604051631920845160e01b81526004810186905260009073ae7ab96520de3a18e5e111b5eaab095312d7fe8490631920845190602401602060405180830381865afa158015612cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cec919061527c565b9050600080737f39c581f595b53c5cb19bd0b3f8da6c935e2ca06001600160a01b03168860405160006040518083038185875af1925050503d8060008114612d50576040519150601f19603f3d011682016040523d82523d6000602084013e612d55565b606091505b509150915081612d6857612d6881613ed3565b50909550505b612d88565b612d886001600160a01b038716333088612a62565b612d958686868686613efb565b90505b95945050505050565b83518251141580612db457508351815114155b15612dd2576040516346282e8d60e01b815260040160405180910390fd5b60005b8551811015612e6857858181518110612df057612df0615063565b60200260200101516001600160a01b03166384e9bd7e886040518263ffffffff1660e01b8152600401612e23919061451a565b600060405180830381600087803b158015612e3d57600080fd5b505af1158015612e51573d6000803e3d6000fd5b505050508080612e60906150e2565b915050612dd5565b5060005b8451811015610a955760008415612e9e57828281518110612e8f57612e8f615063565b60200260200101519050612ee5565b6000612edc858481518110612eb557612eb5615063565b6020026020010151858581518110612ecf57612ecf615063565b6020026020010151612654565b60200151925050505b806001600160a01b0316631c4b774b878481518110612f0657612f06615063565b60200260200101516040518263ffffffff1660e01b8152600401612f2c91815260200190565b600060405180830381600087803b158015612f4657600080fd5b505af1158015612f5a573d6000803e3d6000fd5b50505050508080612f6a906150e2565b915050612e6c565b600080836001600160a01b0316631e83409a866040518263ffffffff1660e01b8152600401612fa1919061451a565b6020604051808303816000875af1158015612fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe4919061527c565b9150821561306c57836001600160a01b031663fc0c546a6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561302c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305091906150af565b90506130676001600160a01b038216333085612a62565b613071565b600091505b935093915050565b6000806130868584613b43565b905060008582600a811061309c5761309c615063565b60200201516001600160a01b031614156130c957604051631d79b70560e11b815260040160405180910390fd5b633b9aca008482600a81106130e0576130e0615063565b60200201516130ef90886152ac565b6130f991906152cb565b9150818482600a811061310e5761310e615063565b6020020181815161311f9190615295565b9052509095945050505050565b604051631d23139f60e11b8152730c462dbb9ec8cd1630f1728b2cfd2769d09f0dd590633a46273e906131659085908590600401615079565b600060405180830381600087803b15801561317f57600080fd5b505af1158015613193573d6000803e3d6000fd5b505050505050565b6040516383df674760e01b8152600481018490526001600160a01b03858116602483015282151560448301528316906383df674790606401600060405180830381600087803b1580156131ed57600080fd5b505af1158015610d6b573d6000803e3d6000fd5b60008060008715613213575085613236565b61321b6144c7565b6132258888612654565b805160409091015190975095509150505b6001600160a01b038a16301415613399576040516370a0823160e01b81526001600160a01b038516906370a082319061327390309060040161451a565b602060405180830381865afa158015613290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b4919061527c565b604051630b8b4a6160e21b81529093506001600160a01b03821690632e2d2984906132e7908c9030908a90600401615a30565b600060405180830381600087803b15801561330157600080fd5b505af1158015613315573d6000803e3d6000fd5b50506040516370a0823160e01b81528592506001600160a01b03871691506370a082319061334790309060040161451a565b602060405180830381865afa158015613364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613388919061527c565b6133929190615295565b92506133fc565b604051630b8b4a6160e21b81526001600160a01b03821690632e2d2984906133c9908c908e908a90600401615a30565b600060405180830381600087803b1580156133e357600080fd5b505af11580156133f7573d6000803e3d6000fd5b505050505b5082905097509795505050505050565b600080600080861561348757859150849050806001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561345c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348091906150af565b94506134a1565b61348f6144c7565b6134998787612654565b519093509150505b6040516370a0823160e01b81526001600160a01b038616906370a08231906134cd90309060040161451a565b602060405180830381865afa1580156134ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350e919061527c565b60405163047c207560e31b8152600481018a9052306024820181905260448201526001600160a01b038381166064830152919550908316906323e103a890608401600060405180830381600087803b15801561356957600080fd5b505af115801561357d573d6000803e3d6000fd5b50506040516370a0823160e01b81528692506001600160a01b03881691506370a08231906135af90309060040161451a565b602060405180830381865afa1580156135cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f0919061527c565b6135fa9190615295565b989497509395505050505050565b60008361362457600061361b8484612654565b60200151945050505b60405163a62b2a3d60e01b81526001600160a01b038a81166004830152602482018a905260448201899052606482018890526084820187905284169063a62b2a3d9060a4016020604051808303816000875af1158015613688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ac919061527c565b9998505050505050505050565b826136d35760006136ca8383612654565b60200151935050505b6040516324d83b7960e01b815260048101859052602481018690526001600160a01b038316906324d83b7990604401600060405180830381600087803b15801561371c57600080fd5b505af1158015611123573d6000803e3d6000fd5b600a835110613752576040516346282e8d60e01b815260040160405180910390fd5b61375a6144ee565b60008080805b8751811015610d6b5760008089838151811061377e5761377e615063565b602002602001015160078111156137975761379761513e565b14156137a7576001945050613a82565b60038983815181106137bb576137bb615063565b602002602001015160078111156137d4576137d461513e565b148061380a575060058983815181106137ef576137ef615063565b602002602001015160078111156138085761380861513e565b145b156138445787828151811061382157613821615063565b602002602001015180602001905181019061383c9190615a4f565b50905061391d565b600189838151811061385857613858615063565b602002602001015160078111156138715761387161513e565b14156138ab5787828151811061388957613889615063565b60200260200101518060200190518101906138a4919061527c565b905061391d565b60068983815181106138bf576138bf615063565b602002602001015160078111156138d8576138d861513e565b1415613917578782815181106138f0576138f0615063565b602002602001015180602001905181019061390b9190615a73565b5091925061391d915050565b50613a82565b8061399b57841561392e5750613a82565b8361399857866001600160a01b0316633c2e941b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613971573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613995919061527c565b93505b50825b60005b838110156139ce57818782600a81106139b9576139b9615063565b505050806139c6816150e2565b91505061399e565b5060405163430c208160e01b81526001600160a01b0388169063430c2081906139fd9033908590600401615079565b602060405180830381865afa158015613a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3e9190615092565b613a5b5760405163390cdd9b60e21b815260040160405180910390fd5b808684600a8110613a6e57613a6e615063565b6020020152613a7e600184615a18565b9250505b80613a8c816150e2565b915050613760565b613abf6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051631bd1f8d360e31b81526001600160a01b0388169063de8fc69890613af5908990899033908a908a908a90600401615b5e565b6080604051808303816000875af1158015613b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b389190615c05565b979650505050505050565b6000805b600a81108015613b77575060008482600a8110613b6657613b66615063565b60200201516001600160a01b031614155b15613bc557826001600160a01b03168482600a8110613b9857613b98615063565b60200201516001600160a01b03161415613bb3579050613bc8565b80613bbd816150e2565b915050613b47565b90505b92915050565b6000613bdc85858585613e9c565b604051633688210b60e11b8152600481018a90523360248201526001600160a01b038b811660448301528083166064830152608482018a9052919450919250821690636d1042169060a401612aee565b6000613c81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613fac9092919063ffffffff16565b80519091501561264f5780806020019051810190613c9f9190615092565b61264f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613d34929190615752565b602060405180830381865afa158015613d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d75919061527c565b613d7f9190615a18565b905061243d8463095ea7b360e01b8584604051602401612618929190615079565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90613dd19030908790600401615752565b602060405180830381865afa158015613dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e12919061527c565b905081811015613e765760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b6064820152608401613cfa565b6040518282039061145f90869063095ea7b360e01b906126189088908690602401615079565b60008060008615613eae575084613ec7565b613eb66144c7565b613ec08787612654565b5195509150505b96929550919350505050565b805115613ee257805181602001fd5b60405163ee418e3760e01b815260040160405180910390fd5b600080836003811115613f1057613f1061513e565b1415613f2957613f2286868685613fc5565b9050612d98565b6001836003811115613f3d57613f3d61513e565b1415613f4e57613f228685846140bb565b6002836003811115613f6257613f6261513e565b1415613f7257613f2285856141d2565b6003836003811115613f8657613f8661513e565b1415613f93575083612d98565b60405163574b16a760e11b815260040160405180910390fd5b6060613fbb848460008561426e565b90505b9392505050565b6001600160a01b03841660009081526035602052604081205460ff1661402557603954614001906001600160a01b03878116911660001961438b565b6001600160a01b0385166000908152603560205260409020805460ff191660011790555b6039546040805160a08101825284815230602082015242818301526060810187905260808101869052905163c04b8d5960e01b81526001600160a01b039092169163c04b8d599161407891600401615c6a565b6020604051808303816000875af1158015614097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d98919061527c565b6001600160a01b03831660009081526036602052604081205460ff1661411b57603a546140f7906001600160a01b03868116911660001961438b565b6001600160a01b0384166000908152603660205260409020805460ff191660011790555b603a5460405160009182916001600160a01b039091169061413d908690615cc2565b6000604051808303816000865af19150503d806000811461417a576040519150601f19603f3d011682016040523d82523d6000602084013e61417f565b606091505b5091509150816141925761419281613ed3565b808060200190518101906141a6919061527c565b9250848310156141c95760405163a1aabbe160e01b815260040160405180910390fd5b50509392505050565b604051630ea598cb60e41b815260048101839052600090737f39c581f595b53c5cb19bd0b3f8da6c935e2ca09063ea598cb0906024016020604051808303816000875af1158015614227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424b919061527c565b905081811015613bc85760405163a1aabbe160e01b815260040160405180910390fd5b6060824710156142cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401613cfa565b843b61431d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401613cfa565b600080866001600160a01b031685876040516143399190615cc2565b60006040518083038185875af1925050503d8060008114614376576040519150601f19603f3d011682016040523d82523d6000602084013e61437b565b606091505b5091509150613b3882828661448e565b8015806144045750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906143c19030908690600401615752565b602060405180830381865afa1580156143de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614402919061527c565b155b61446f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401613cfa565b61264f8363095ea7b360e01b8484604051602401612618929190615079565b6060831561449d575081613fbe565b8251156144ad5782518084602001fd5b8160405162461bcd60e51b8152600401613cfa9190615cde565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806101400160405280600a906020820280368337509192915050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461454357600080fd5b50565b60006020828403121561455857600080fd5b8135613bc58161452e565b60008060006060848603121561457857600080fd5b83356145838161452e565b925060208401356145938161452e565b929592945050506040919091013590565b60008083601f8401126145b657600080fd5b5081356001600160401b038111156145cd57600080fd5b6020830191508360208260051b85010111156126fe57600080fd5b6000806000806000806060878903121561460157600080fd5b86356001600160401b038082111561461857600080fd5b6146248a838b016145a4565b9098509650602089013591508082111561463d57600080fd5b6146498a838b016145a4565b9096509450604089013591508082111561466257600080fd5b5061466f89828a016145a4565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156146b9576146b9614681565b60405290565b604080519081016001600160401b03811182821017156146b9576146b9614681565b60405160c081016001600160401b03811182821017156146b9576146b9614681565b60405161010081016001600160401b03811182821017156146b9576146b9614681565b604051601f8201601f191681016001600160401b038111828210171561474e5761474e614681565b604052919050565b60006001600160401b0382111561476f5761476f614681565b5060051b60200190565b801515811461454357600080fd5b803561479281614779565b919050565b803560ff8116811461479257600080fd5b600082601f8301126147b957600080fd5b813560206147ce6147c983614756565b614726565b82815260e092830285018201928282019190878511156147ed57600080fd5b8387015b8581101561487e5781818a0312156148095760008081fd5b614811614697565b813561481c8161452e565b81528186013561482b8161452e565b8187015260408281013561483e81614779565b90820152606082810135908201526080614859818401614797565b9082015260a0828101359082015260c0808301359082015284529284019281016147f1565b5090979650505050505050565b600082601f83011261489c57600080fd5b813560206148ac6147c983614756565b82815260e092830285018201928282019190878511156148cb57600080fd5b8387015b8581101561487e5781818a0312156148e75760008081fd5b6148ef614697565b81356148fa8161452e565b8152818601356149098161452e565b818701526040828101359082015260608083013590820152608061492e818401614797565b9082015260a0828101359082015260c0808301359082015284529284019281016148cf565b600082601f83011261496457600080fd5b813560206149746147c983614756565b82815260069290921b8401810191818101908684111561499357600080fd5b8286015b848110156149db57604081890312156149b05760008081fd5b6149b86146bf565b81356149c38161452e565b81528185013585820152835291830191604001614997565b509695505050505050565b600082601f8301126149f757600080fd5b81356001600160401b03811115614a1057614a10614681565b614a23601f8201601f1916602001614726565b818152846020838601011115614a3857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112614a6657600080fd5b81356020614a766147c983614756565b82815260059290921b84018101918181019086841115614a9557600080fd5b8286015b848110156149db5780356001600160401b0380821115614ab95760008081fd5b9088019060c0828b03601f1901811315614ad35760008081fd5b614adb6146e1565b87840135614ae88161452e565b8152604084810135614af98161452e565b808a84015250606080860135828401526080915081860135818401525060a08086013585811115614b2a5760008081fd5b614b388f8c838a01016149e6565b8484015250948301359460048610614b5257600094508485fd5b8201949094528652505050918301918301614a99565b600082601f830112614b7957600080fd5b81356020614b896147c983614756565b82815260059290921b84018101918181019086841115614ba857600080fd5b8286015b848110156149db578035600a8110614bc45760008081fd5b8352918301918301614bac565b600080600080600080600060c0888a031215614bec57600080fd5b87356001600160401b0380821115614c0357600080fd5b614c0f8b838c016147a8565b985060208a0135915080821115614c2557600080fd5b614c318b838c0161488b565b975060408a0135915080821115614c4757600080fd5b614c538b838c01614953565b965060608a0135915080821115614c6957600080fd5b614c758b838c01614a55565b955060808a0135915080821115614c8b57600080fd5b614c978b838c01614b68565b945060a08a0135915080821115614cad57600080fd5b50614cba8a828b016145a4565b989b979a50959850939692959293505050565b60008060408385031215614ce057600080fd5b8235614ceb8161452e565b91506020830135614cfb8161452e565b809150509250929050565b60008060408385031215614d1957600080fd5b8235614d248161452e565b91506020830135614cfb81614779565b600080600080600060a08688031215614d4c57600080fd5b8535614d578161452e565b945060208601359350604086013592506060860135614d758161452e565b91506080860135614d858161452e565b809150509295509295909350565b60008060008060008060a08789031215614dac57600080fd5b86356001600160401b0380821115614dc357600080fd5b614dcf8a838b0161488b565b97506020890135915080821115614de557600080fd5b614df18a838b01614953565b96506040890135915080821115614e0757600080fd5b614e138a838b01614a55565b95506060890135915080821115614e2957600080fd5b614e358a838b01614b68565b9450608089013591508082111561466257600080fd5b600082601f830112614e5c57600080fd5b81356020614e6c6147c983614756565b82815260059290921b84018101918181019086841115614e8b57600080fd5b8286015b848110156149db578035614ea28161452e565b8352918301918301614e8f565b600082601f830112614ec057600080fd5b81356020614ed06147c983614756565b82815260059290921b84018101918181019086841115614eef57600080fd5b8286015b848110156149db5780358352918301918301614ef3565b60008060008060808587031215614f2057600080fd5b8435614f2b8161452e565b935060208501356001600160401b0380821115614f4757600080fd5b614f5388838901614e4b565b94506040870135915080821115614f6957600080fd5b614f7588838901614eaf565b93506060870135915080821115614f8b57600080fd5b50614f9887828801614e4b565b91505092959194509250565b600080600080600060a08688031215614fbc57600080fd5b8535614fc78161452e565b945060208601356001600160401b0380821115614fe357600080fd5b614fef89838a01614e4b565b9550604088013591508082111561500557600080fd5b61501189838a01614eaf565b9450606088013591508082111561502757600080fd5b61503389838a01614e4b565b9350608088013591508082111561504957600080fd5b5061505688828901614e4b565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b6000602082840312156150a457600080fd5b8151613bc581614779565b6000602082840312156150c157600080fd5b8151613bc58161452e565b634e487b7160e01b600052601160045260246000fd5b60006000198214156150f6576150f66150cc565b5060010190565b6001600160a01b0397881681529590961660208601529215156040850152606084019190915260ff16608083015260a082015260c081019190915260e00190565b634e487b7160e01b600052602160045260246000fd5b6000808335601e1984360301811261516b57600080fd5b8301803591506001600160401b0382111561518557600080fd5b6020019150368190038213156126fe57600080fd5b80356147928161452e565b600080600080600080600060e0888a0312156151c057600080fd5b6151c98861519a565b96506020880135955060408801356001600160401b03808211156151ec57600080fd5b6151f88b838c01614e4b565b965060608a013591508082111561520e57600080fd5b61521a8b838c01614eaf565b955061522860808b01614787565b945060a08a013591508082111561523e57600080fd5b61524a8b838c01614e4b565b935060c08a013591508082111561526057600080fd5b5061526d8a828b01614e4b565b91505092959891949750929550565b60006020828403121561528e57600080fd5b5051919050565b6000828210156152a7576152a76150cc565b500390565b60008160001904831182151516156152c6576152c66150cc565b500290565b6000826152e857634e487b7160e01b600052601260045260246000fd5b500490565b60008060006060848603121561530257600080fd5b833561530d8161452e565b9250602084013561531d8161452e565b9150604084013561532d81614779565b809150509250925092565b6000806040838503121561534b57600080fd5b82356153568161452e565b946020939093013593505050565b600080600080600060a0868803121561537c57600080fd5b85356153878161452e565b945060208601359350604086013561539e8161452e565b925060608601356153ae8161452e565b91506080860135614d8581614779565b600080600080600080600060e0888a0312156153d957600080fd5b87356153e48161452e565b96506020880135955060408801356153fb81614779565b9450606088013561540b8161452e565b9350608088013561541b8161452e565b925060a088013561542b8161452e565b915060c088013561543b8161452e565b8091505092959891949750929550565b600080600080600060a0868803121561546357600080fd5b85359450602086013561547581614779565b935060408601356154858161452e565b92506060860135614d758161452e565b600080600080600080600060e0888a0312156154b057600080fd5b87356154bb8161452e565b96506020880135955060408801359450606088013561540b81614779565b600080600080600080600080610100898b0312156154f657600080fd5b88356155018161452e565b97506020890135965060408901359550606089013594506080890135935060a089013561552d81614779565b925060c089013561553d8161452e565b915060e089013561554d8161452e565b809150509295985092959890939650565b600080600080600060a0868803121561557657600080fd5b8535945060208601359350604086013561548581614779565b600082601f8301126155a057600080fd5b813560206155b06147c983614756565b82815260059290921b840181019181810190868411156155cf57600080fd5b8286015b848110156149db578035600881106155eb5760008081fd5b83529183019183016155d3565b600082601f83011261560957600080fd5b813560206156196147c983614756565b82815260059290921b8401810191818101908684111561563857600080fd5b8286015b848110156149db5780356001600160401b0381111561565b5760008081fd5b6156698986838b01016149e6565b84525091830191830161563c565b600080600080600080600080610100898b03121561569457600080fd5b61569d8961519a565b97506156ab60208a0161519a565b96506156b960408a0161519a565b95506156c760608a0161519a565b94506156d560808a0161519a565b935060a08901356001600160401b03808211156156f157600080fd5b6156fd8c838d0161558f565b945060c08b013591508082111561571357600080fd5b61571f8c838d016155f8565b935060e08b013591508082111561573557600080fd5b506157428b828c016149e6565b9150509295985092959890939650565b6001600160a01b0392831681529116602082015260400190565b80516001600160401b038116811461479257600080fd5b600082601f83011261579457600080fd5b815160206157a46147c983614756565b82815260059290921b840181019181810190868411156157c357600080fd5b8286015b848110156149db576157d88161576c565b83529183019183016157c7565b600061010082840312156157f857600080fd5b615800614703565b82519091506001600160401b038082111561581a57600080fd5b61582685838601615783565b8352602084015191508082111561583c57600080fd5b61584885838601615783565b6020840152604084015191508082111561586157600080fd5b61586d85838601615783565b6040840152606084015191508082111561588657600080fd5b5061589384828501615783565b6060830152506158a56080830161576c565b60808201526158b660a0830161576c565b60a08201526158c760c0830161576c565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b036102008112156158fc57600080fd5b8a516159078161452e565b60208c0151909a506159188161452e565b60408c01519099506159298161452e565b60608c015190985061593a8161452e565b8097505060808b0151955060a08b0151945060c08b015193506101008060df198301121561596757600080fd5b61596f614703565b60e08d01518152908c015160208201526101208c015160408201526101408c0151606082015290506159a46101608c0161576c565b60808201526159b66101808c0161576c565b60a08201526159c86101a08c0161576c565b60c08201526159da6101c08c0161576c565b60e08201526101e08b01519092506001600160401b038111156159fc57600080fd5b615a088c828d016157e5565b9150509295985092959850929598565b60008219821115615a2b57615a2b6150cc565b500190565b9283526001600160a01b03918216602084015216604082015260600190565b60008060408385031215615a6257600080fd5b505080516020909101519092909150565b60008060008060808587031215615a8957600080fd5b845193506020850151615a9b8161452e565b6040860151606090960151949790965092505050565b60005b83811015615acc578181015183820152602001615ab4565b8381111561243d5750506000910152565b60008151808452615af5816020860160208601615ab1565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015615b51578284038952615b3f848351615add565b98850198935090840190600101615b27565b5091979650505050505050565b60c0808252875190820181905260009060209060e0840190828b0184805b83811015615bb457825160088110615ba257634e487b7160e01b83526021600452602483fd5b85529385019391850191600101615b7c565b5050505083810382850152615bc9818a615b09565b915050615bd9604084018861450d565b615be6606084018761450d565b615bf3608084018661450d565b82810360a08401526136ac8185615add565b600060808284031215615c1757600080fd5b604051608081016001600160401b0381118282101715615c3957615c39614681565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b602081526000825160a06020840152615c8660c0840182615add565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008251615cd4818460208701615ab1565b9190910192915050565b602081526000613fbe6020830184615add56feb3c6ea40376b764923443dc6ded6f0af1b34f1109e2d22c4f499855d960eeeaea2646970667358221220addbfe3d55a3366735709b10a8d00405fe105a55704fa1412758512018727c0464736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "Interfaces were designed for both advanced users which know the addresses of the protocol's contract, but most of the time users which only know addresses of the stablecoins and collateral types of the protocol can perform the actions they want without needing to understand what's happening under the hood",
    "kind": "dev",
    "methods": {
      "addPairs(address[],address[],address[])": {
        "params": {
          "liquidityGauges": "Addresses of liquidity gauges contract associated to sanToken",
          "poolManagers": "Addresses of the `PoolManager` contracts associated to the pair (stablecoin,collateral)",
          "stablecoins": "Addresses of the stablecoins associated to the `StableMaster` of interest"
        }
      },
      "addStableMaster(address,address)": {
        "params": {
          "stableMaster": "Address of the new `StableMaster`",
          "stablecoin": "Address of the new stablecoin"
        }
      },
      "burn(address,uint256,uint256,address,address)": {
        "params": {
          "amount": "Amount of stablecoins to use for the burn",
          "collateral": "Collateral to mint from",
          "dest": "Address to send the collateral to",
          "minCollatAmount": "Minimum collateral amount received for the tx not to revert",
          "stablecoin": "Address of the stablecoin to mint"
        }
      },
      "changeAllowance(address[],address[],uint256[])": {
        "details": "Approvals are normally given in the `addGauges` method, in the initializer and in the internal functions to process swaps with Uniswap and 1Inch",
        "params": {
          "amounts": "Amounts to allow",
          "spenders": "Addresses to allow transfer",
          "tokens": "Addresses of the tokens to allow"
        }
      },
      "claimRewards(address,address[],uint256[],address[])": {
        "details": "If the caller wants to send the rewards to another account it first needs to call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`",
        "params": {
          "liquidityGauges": "Contracts to claim for",
          "perpetualIDs": "Perpetual IDs to claim rewards for",
          "perpetualManagers": "`perpetualManager` contracts for every perp to claim",
          "user": "Address to which the contract should send the rewards from gauges (not perpetuals)"
        }
      },
      "claimRewards(address,address[],uint256[],address[],address[])": {
        "details": "If the caller wants to send the rewards to another account it first needs to call `set_rewards_receiver(otherAccount)` on each `liquidityGauge`",
        "params": {
          "collaterals": "Collateral contracts linked to the perpetualsIDs or `perpetualManager`",
          "gaugeUser": "Address for which to fetch the rewards from the gauges",
          "liquidityGauges": "Gauges to claim on",
          "perpetualIDs": "Perpetual IDs to claim rewards for",
          "stablecoins": "Stablecoin contracts linked to the perpetualsIDs"
        }
      },
      "mint(address,uint256,uint256,address,address)": {
        "params": {
          "amount": "Amount of collateral to use for the mint",
          "collateral": "Collateral to mint from",
          "minStableAmount": "Minimum stablecoin minted for the tx not to revert",
          "stablecoin": "Address of the stablecoin to mint",
          "user": "Address to send the stablecoins to"
        }
      },
      "mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])": {
        "details": "This function first fills the router balances via transfers and swaps. It then proceeds with each action in the order at which they are givenWith this function, users can specify paths to swap tokens to the desired token of their choice. Yet the protocol does not verify the payload given and cannot check that the swap performed by users actually gives the desired out token: in this case funds will be lost by the userFor some actions (`mint`, `deposit`, `openPerpetual`, `addToPerpetual`, `withdraw`), users are required to give a proportion of the amount of token they have brought to the router within the transaction (through a direct transfer or a swap) they want to use for the operation. If you want to use all the USDC you have brought (through an ETH -> USDC) swap to mint stablecoins for instance, you should use `BASE_PARAMS` as a proportion.The proportion that is specified for an action is a proportion of what is left. If you want to use 50% of your USDC for a `mint` and the rest for an `openPerpetual`, proportion used for the `mint` should be 50% (that is `BASE_PARAMS/2`), and proportion for the `openPerpetual` should be all that is left that is 100% (= `BASE_PARAMS`).For each action here, make sure to read the documentation of the associated internal function to know how to correctly specify parameters",
        "params": {
          "actions": "List of actions to be performed by the router (in order of execution): make sure to read for each action the associated internal function",
          "data": "Array of encoded data for each of the actions performed in this mixer. This is where the bytes-encoded parameters for a given action are stored",
          "paramsPermit": "Array of params `PermitType` used to do a 1 tx to approve the router on each token (can be done once by setting high approved amounts) which supports the `permit` standard. Users willing to interact with the contract with tokens that do not support permit should approve the contract for these tokens prior to interacting with it",
          "paramsSwap": "Array of params `ParamsSwapType` used to swap tokens",
          "paramsTransfer": "Array of params `TransferType` used to transfer tokens to the router"
        }
      },
      "mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])": {
        "details": "In `paramsPermitVaultManager`, the signatures for granting approvals must be given first before the signatures to revoke approvals",
        "params": {
          "paramsPermitVaultManager": "Parameters to sign permit to give allowance to the router for a `VaultManager` contract"
        }
      },
      "recoverERC20(address,address,uint256)": {
        "details": "If tokens are mistakenly sent to this contract, any address can take advantage of the `mixer` function below to get the funds back",
        "params": {
          "to": "Address to give tokens to",
          "tokenAddress": "Address of the token to transfer",
          "tokenAmount": "Amount of tokens to transfer"
        }
      },
      "removePairs(address[],address[],address[])": {
        "details": "In the lists, if a `stableMaster` address is null in `stableMasters` then this means that the associated `stablecoins` address (at the same index) should be non null",
        "params": {
          "collaterals": "Addresses of the collaterals",
          "stableMasters": "List of the associated `StableMaster` contracts",
          "stablecoins": "Addresses of the stablecoins"
        }
      },
      "removeStableMaster(address)": {
        "details": "Before calling this function, governor or guardian should remove first all pairs from the `mapPoolManagers[stableMaster]`. It is assumed that the governor or guardian calling this function will act correctly here, it indeed avoids storing a list of all pairs for each `StableMaster`",
        "params": {
          "stablecoin": "Address of the associated stablecoin"
        }
      },
      "setGovernorOrGuardian(address,bool)": {
        "details": "There can only be one guardian and one governor address in the router and both need to be different",
        "params": {
          "admin": "New guardian or guardian address",
          "setGovernor": "Whether to set Governor if true, or Guardian if false"
        }
      },
      "setLiquidityGauges(address[],address[],address[])": {
        "details": "If `newLiquidityGauge` is null, this means that there is no liquidity gauge for this pairThis function could be used to simply revoke the approval to a liquidity gauge",
        "params": {
          "collaterals": "Addresses of the collaterals",
          "newLiquidityGauges": "Addresses of the new liquidity gauges contract",
          "stablecoins": "Addresses of the stablecoins"
        }
      }
    },
    "title": "Angle Router",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE_PARAMS()": {
        "notice": "Base used for params"
      },
      "STETH()": {
        "notice": "StETH contract"
      },
      "WSTETH()": {
        "notice": "Wrapped StETH contract"
      },
      "addPairs(address[],address[],address[])": {
        "notice": "Adds new collateral types to specific stablecoins"
      },
      "addStableMaster(address,address)": {
        "notice": "Adds a new `StableMaster`"
      },
      "burn(address,uint256,uint256,address,address)": {
        "notice": "Wrapper built on top of the `_burn` method to burn stablecoins"
      },
      "changeAllowance(address[],address[],uint256[])": {
        "notice": "Change allowance for a contract."
      },
      "claimRewards(address,address[],uint256[],address[])": {
        "notice": "Wrapper n°2 (a little more gas efficient than n°1) built on top of the _claimRewards function Allows to claim rewards for multiple gauges and perpetuals at once"
      },
      "claimRewards(address,address[],uint256[],address[],address[])": {
        "notice": "Wrapper n°1 built on top of the _claimRewards function Allows to claim rewards for multiple gauges and perpetuals at once"
      },
      "governor()": {
        "notice": "Governor address"
      },
      "guardian()": {
        "notice": "Guardian address"
      },
      "mapPoolManagers(address,address)": {
        "notice": "Maps a `StableMaster` to a mapping of collateral token to its counterpart `PoolManager`"
      },
      "mapStableMasters(address)": {
        "notice": "Maps an agToken to its counterpart `StableMaster`"
      },
      "mint(address,uint256,uint256,address,address)": {
        "notice": "Wrapper built on top of the `_mint` method to mint stablecoins"
      },
      "mixer((address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])": {
        "notice": "Allows composable calls to different functions within the protocol"
      },
      "mixerVaultManagerPermit((address,address,bool,uint256,uint8,bytes32,bytes32)[],(address,address,uint256,uint256,uint8,bytes32,bytes32)[],(address,uint256)[],(address,address,uint256,uint256,bytes,uint8)[],uint8[],bytes[])": {
        "notice": "Wrapper built on top of the mixer function to grant approval to a VaultManager contract before performing actions and then revoking this approval after these actions"
      },
      "oneInch()": {
        "notice": "Address of 1Inch router used for swaps"
      },
      "oneInchAllowedToken(address)": {
        "notice": "Whether the token was already approved on 1Inch"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Supports recovering any tokens as the router does not own any other tokens than the one mistakenly sent"
      },
      "removePairs(address[],address[],address[])": {
        "notice": "Removes collateral types from specific `StableMaster` contracts using the address of the associated stablecoins"
      },
      "removeStableMaster(address)": {
        "notice": "Removes a `StableMaster`"
      },
      "setGovernorOrGuardian(address,bool)": {
        "notice": "Changes the guardian or the governor address"
      },
      "setLiquidityGauges(address[],address[],address[])": {
        "notice": "Sets new `liquidityGauge` contract for the associated sanTokens"
      },
      "uniAllowedToken(address)": {
        "notice": "Whether the token was already approved on Uniswap router"
      },
      "uniswapV3Router()": {
        "notice": "Address of the router used for swaps"
      }
    },
    "notice": "The `AngleRouter` contract facilitates interactions for users with the protocol. It was built to reduce the number of approvals required to users and the number of transactions needed to perform some complex actions: like deposit and stake in just one transaction",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 87,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5166,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "mapStableMasters",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_contract(IERC20)3338,t_contract(IStableMasterFront)10750)"
      },
      {
        "astId": 5176,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "mapPoolManagers",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_contract(IStableMasterFront)10750,t_mapping(t_contract(IERC20)3338,t_struct(Pairs)5108_storage))"
      },
      {
        "astId": 5182,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "uniAllowedToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_contract(IERC20)3338,t_bool)"
      },
      {
        "astId": 5188,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "oneInchAllowedToken",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_contract(IERC20)3338,t_bool)"
      },
      {
        "astId": 5191,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "governor",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 5194,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "guardian",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 5198,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "uniswapV3Router",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IUniswapV3Router)11363"
      },
      {
        "astId": 5201,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "oneInch",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      },
      {
        "astId": 5205,
        "contract": "contracts/AngleRouter01.sol:AngleRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3338": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidityGauge)9783": {
        "encoding": "inplace",
        "label": "contract ILiquidityGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IPerpetualManagerFrontWithClaim)10039": {
        "encoding": "inplace",
        "label": "contract IPerpetualManagerFrontWithClaim",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolManager)10164": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISanToken)10469": {
        "encoding": "inplace",
        "label": "contract ISanToken",
        "numberOfBytes": "20"
      },
      "t_contract(IStableMasterFront)10750": {
        "encoding": "inplace",
        "label": "contract IStableMasterFront",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Router)11363": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)3338,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3338",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)3338,t_contract(IStableMasterFront)10750)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3338",
        "label": "mapping(contract IERC20 => contract IStableMasterFront)",
        "numberOfBytes": "32",
        "value": "t_contract(IStableMasterFront)10750"
      },
      "t_mapping(t_contract(IERC20)3338,t_struct(Pairs)5108_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3338",
        "label": "mapping(contract IERC20 => struct AngleRouter.Pairs)",
        "numberOfBytes": "32",
        "value": "t_struct(Pairs)5108_storage"
      },
      "t_mapping(t_contract(IStableMasterFront)10750,t_mapping(t_contract(IERC20)3338,t_struct(Pairs)5108_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IStableMasterFront)10750",
        "label": "mapping(contract IStableMasterFront => mapping(contract IERC20 => struct AngleRouter.Pairs))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)3338,t_struct(Pairs)5108_storage)"
      },
      "t_struct(Pairs)5108_storage": {
        "encoding": "inplace",
        "label": "struct AngleRouter.Pairs",
        "members": [
          {
            "astId": 5098,
            "contract": "contracts/AngleRouter01.sol:AngleRouter",
            "label": "poolManager",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IPoolManager)10164"
          },
          {
            "astId": 5101,
            "contract": "contracts/AngleRouter01.sol:AngleRouter",
            "label": "perpetualManager",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPerpetualManagerFrontWithClaim)10039"
          },
          {
            "astId": 5104,
            "contract": "contracts/AngleRouter01.sol:AngleRouter",
            "label": "sanToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ISanToken)10469"
          },
          {
            "astId": 5107,
            "contract": "contracts/AngleRouter01.sol:AngleRouter",
            "label": "gauge",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(ILiquidityGauge)9783"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}